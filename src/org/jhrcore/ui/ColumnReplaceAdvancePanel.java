/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ColumnReplacePanel.java
 *
 * Created on 2009-11-3, 16:38:08
 */
package org.jhrcore.ui;

import com.foundercy.pf.control.table.FBaseTableColumn;
import com.foundercy.pf.control.table.FTable;
import com.foundercy.pf.control.table.FTableColumnItem;
import com.foundercy.pf.control.table.FTableModel;
import com.foundercy.pf.control.table.ITableCellEditable;
import java.awt.BorderLayout;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import org.jhrcore.client.CommUtil;
import org.jhrcore.client.UserContext;
import org.jhrcore.entity.Code;
import org.jhrcore.comm.CodeManager;
import org.jhrcore.entity.annotation.ObjectListHint;
import org.jhrcore.entity.base.TempFieldInfo;
import org.jhrcore.entity.salary.ValidateSQLResult;
import org.jhrcore.rebuild.EntityBuilder;
import org.jhrcore.ui.listener.IPickFieldSelectListener;
import org.jhrcore.ui.listener.IPickFormulaEditorListener;
import org.jhrcore.ui.listener.IPickReplaceListener;
import org.jhrcore.ui.renderer.HRRendererView;
import org.jhrcore.util.MsgUtil;
import org.jhrcore.util.PublicUtil;

/**
 *
 * @author mxliteboss
 */
public class ColumnReplaceAdvancePanel extends javax.swing.JPanel implements IPickReplaceListener {

    private FormulaEditorPanel pnlEditor = new FormulaEditorPanel();
    private HrTextPane jtaFormulaText;
    private JTree para_tree;
    private FTable ftable;
    private FTable ftable_view;
    private String db_type = UserContext.sql_dialect;
    private Class cur_class;
    private HashSet<String> entityName_keys = new HashSet<String>();
    private String replace_text = "";
    private List<String> keys = new ArrayList();
    private String key_name;
//    private List container_data;
    private TempFieldInfo cur_field;
    private String replace_entityName;
    private List selectedList;
    private int method = 0;

    /** Creates new form ColumnReplacePanel */
    public ColumnReplaceAdvancePanel(FTable ftable) {//, List container_data) {
//        this.container_data = container_data;
        this.ftable = ftable;
        initComponents();
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        pnlForEditor = new javax.swing.JPanel();
        pnlPara = new javax.swing.JPanel();

        jSplitPane1.setDividerLocation(150);
        jSplitPane1.setDividerSize(3);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setPreferredSize(new java.awt.Dimension(645, 500));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("½Å±¾±à¼­Çø£º"));
        jPanel3.setLayout(new java.awt.BorderLayout());
        jSplitPane1.setTopComponent(jPanel3);

        pnlForEditor.setLayout(new java.awt.BorderLayout());

        pnlPara.setBorder(javax.swing.BorderFactory.createTitledBorder("×Ö¶ÎÊôÐÔ"));
        pnlPara.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(pnlForEditor, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlPara, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlPara, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
            .addComponent(pnlForEditor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(jPanel4);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 724, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel pnlForEditor;
    private javax.swing.JPanel pnlPara;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        cur_class = ((FTableModel) ftable.getModel()).getEntityClass();
        pnlForEditor.add(pnlEditor, BorderLayout.CENTER);
        jtaFormulaText = new HrTextPane();
        jPanel3.add(jtaFormulaText);
        List<TempFieldInfo> all_infos = ftable.getAll_fields();
        ShowFieldTreeModel sftModel = new ShowFieldTreeModel(all_infos);
        para_tree = new JTree(sftModel);
        HRRendererView.getCommMap().initTree(para_tree);
        para_tree.setRootVisible(false);
        para_tree.setShowsRootHandles(true);
        pnlPara.add(new JScrollPane(para_tree), BorderLayout.CENTER);
        ftable_view = new FTable(cur_class, ftable.getFields(), false, false, false, "adv_replace_view");
        ftable_view.setOther_entitys(ftable.getOther_entitys());
        ftable_view.setOther_entity_keys(ftable.getOther_entity_keys());
        ftable_view.setAll_fields(ftable.getAll_fields(), ftable.getDefault_fields(), new ArrayList(), "adv_replace_view");
        ((FTableModel) ftable_view.getModel()).setHt_OtherTableSql(((FTableModel) ftable.getModel()).getHt_OtherTableSql());
        Hashtable<String, List> all_info_keys = new Hashtable<String, List>();
        Hashtable<String, String> k_keywords = new Hashtable<String, String>();
        Hashtable<String, List> lookups = new Hashtable<String, List>();
        Hashtable<String, String> keyword_groups = new Hashtable<String, String>();
        for (TempFieldInfo tfi : all_infos) {
            String entityCaption = tfi.getEntity_caption();
            List list = all_info_keys.get(entityCaption);
            if (list == null) {
                entityName_keys.add(tfi.getEntity_name());
                list = new ArrayList();
            }
            list.add(tfi);
            all_info_keys.put(entityCaption, list);
            keyword_groups.put("[" + entityCaption + "." + tfi.getCaption_name() + "]", entityCaption);
            k_keywords.put("[" + entityCaption + "." + tfi.getCaption_name() + "]", tfi.getField_name().replace("_code_", ""));
        }
        for (String key : all_info_keys.keySet()) {
            lookups.put(key, all_info_keys.get(key));
        }
        jtaFormulaText.revokeDocumentKeys(lookups, keyword_groups, k_keywords);
        key_name = EntityBuilder.getEntityKey(((FTableModel) ftable.getModel()).getEntityClass());
    }

    private void setupEvents() {
        jSplitPane1.addComponentListener(new ComponentAdapter() {

            @Override
            public void componentResized(ComponentEvent e) {
                int height = jSplitPane1.getHeight();
                jSplitPane1.setDividerLocation(height - 270);
            }
        });

        pnlEditor.addPickFormulaEditorListener(new IPickFormulaEditorListener() {

            @Override
            public void pickEditor(String operator) {
                //operator:¹«Ê½±à¼­Æ÷Panel·µ»ØµÄÔËËã·û,Èç£ºwhere
                int tmp = jtaFormulaText.getSelectionStart();
                jtaFormulaText.replaceSelection(operator.toLowerCase());
                jtaFormulaText.setCaretPosition(tmp + operator.length());
                jtaFormulaText.requestFocus();
            }
        });
        para_tree.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() < 2) {
                    return;
                }

                if (para_tree.getSelectionPath() == null) {
                    return;
                }

                if (para_tree.getSelectionPath().getLastPathComponent() == para_tree.getModel().getRoot()) {
                    return;
                }
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) para_tree.getSelectionPath().getLastPathComponent();
                Object obj = node.getUserObject();
                DefaultMutableTreeNode parent = (DefaultMutableTreeNode) node.getParent();
                final int tmp = jtaFormulaText.getSelectionStart();
                String operator = "";
                if (obj instanceof String) {
                    if (node.getLevel() == 0) {
                        return;
                    }
                    List<TempFieldInfo> fields = new ArrayList<TempFieldInfo>();
                    Enumeration enumt = node.children();
                    while (enumt.hasMoreElements()) {
                        DefaultMutableTreeNode child = (DefaultMutableTreeNode) enumt.nextElement();
                        fields.add((TempFieldInfo) child.getUserObject());
                    }
                    FormulaParaFieldSelectPanel pnlFpfs = new FormulaParaFieldSelectPanel(obj.toString(), fields);
                    pnlFpfs.addPickFieldSelectListener(new IPickFieldSelectListener() {

                        @Override
                        public void pickFieldString(String text) {
                            jtaFormulaText.replaceSelection(text);
                            jtaFormulaText.setCaretPosition(tmp + text.length());
                            jtaFormulaText.requestFocus();
                        }
                    });
                    ModelFrame.showModel((JFrame) JOptionPane.getFrameForComponent(para_tree), pnlFpfs, true, "ÇëÑ¡Ôñ×Ö¶Î", 800, 600);
                    return;
                }

                String entity_name = "[" + parent.getUserObject().toString() + ".";
                if ("[ÈËÔ±¹¤×ÊËùÓÐÏîÄ¿.".equals(entity_name) || "[²¿ÃÅ¹¤×ÊËùÓÐÏîÄ¿.".equals(entity_name) || "[³£Á¿²ÎÊý.".equals(entity_name)) {
                    entity_name = "[";
                }
                boolean isPara = obj.toString().startsWith("@");
                if (obj instanceof TempFieldInfo && ((TempFieldInfo) obj).getField_name().endsWith("_code_")) {
                    TempFieldInfo tfi = (TempFieldInfo) obj;
                    ObjectListHint objHint = tfi.getField().getAnnotation(ObjectListHint.class);
                    if (objHint != null && objHint.hqlForObjectList().startsWith("from Code ")) {
                        String hql = objHint.hqlForObjectList();
                        String code_type = hql.substring(hql.indexOf("=") + 1);
                        CodeSelectDialog csmDlg = new CodeSelectDialog(CodeManager.getCodeManager().getCodeListBy(code_type), code_type, null, TreeSelectMod.nodeCheckMod);
                        ContextManager.locateOnMainScreenCenter(csmDlg);
                        csmDlg.setVisible(true);
                        if (csmDlg.isClick_ok()) {
                            List<Code> codes = csmDlg.getSelectCodes(false);
                            if (codes.size() == 0) {
                                return;
                            }
                            String str = "";
                            List<String> like_str = new ArrayList<String>();
                            for (Code c : codes) {
                                if (c.isEnd_flag()) {
                                    str += "'[" + code_type + "." + c.getCode_name() + "]',";
                                } else {
                                    like_str.add("[" + code_type + "." + c.getCode_name() + "]");
                                }
                            }
                            if (!str.equals("")) {
                                str = str.substring(0, str.length() - 1);
                            }
                            for (String s : like_str) {
                                operator += " " + entity_name + tfi.getCaption_name() + "] like '" + s + "%' or ";
                            }
                            if (!str.equals("")) {
                                operator += " " + entity_name + tfi.getCaption_name() + "] in(" + str + ") or ";
                            }
                            operator = operator.substring(0, operator.length() - 3);
                        }
                    } else {
                        operator = " " + entity_name + obj.toString() + "] ";
                    }
                } else {
                    operator = " " + entity_name + obj.toString() + "] ";
                }
                if (isPara) {
                    operator = operator.replace("[", "");
                    operator = operator.replace("]", "");
                }
                jtaFormulaText.replaceSelection(operator);
                jtaFormulaText.setCaretPosition(tmp + operator.length());
                jtaFormulaText.requestFocus();
            }
        });
        int height = jSplitPane1.getHeight();
        jSplitPane1.setDividerLocation(height - 270);
    }

    private void showReplaceResult() {
        List<String> view_fields = new ArrayList<String>();
        view_fields.addAll(ftable.getFields());
        view_fields.remove(cur_field.getField_name());
        view_fields.add(0, cur_field.getField_name());
        String new_field = "#" + cur_field.getEntity_name() + "." + cur_field.getField_name();
        view_fields.add(1, "#" + cur_field.getEntity_name() + "." + cur_field.getField_name());
        ftable_view.setFields(view_fields);
        List columnList = ((FTableModel) ftable_view.getModel()).getColumnList();
        for (Object obj : columnList) {
            FTableColumnItem col = (FTableColumnItem) obj;
            if (col.getId().equals(cur_field.getField_name())) {
                col.setTitle(cur_field.getCaption_name() + "(Ìæ»»Ç°)");
                FBaseTableColumn fc = ftable_view.getColumnById(col.getId());
                fc.setTitle(cur_field.getCaption_name() + "(Ìæ»»Ç°)");
                fc.setPreferredWidth(fc.getWidth() + 20);
            } else if (col.getId().equals(new_field)) {
                col.setTitle(cur_field.getCaption_name() + "(Ìæ»»ºó)");
                FBaseTableColumn fc = ftable_view.getColumnById(col.getId());
                fc.setTitle(cur_field.getCaption_name() + "(Ìæ»»ºó)");
                fc.setPreferredWidth(fc.getWidth() + 20);
            }
        }
        Hashtable<String, HashMap> other_data = ((FTableModel) ftable_view.getModel()).getHt_OtherTable();
        List<String> paras = ColumnReplacePanel.getQueryPara(replace_text, getEntityName(), entityName_keys);
        String s_select = "select " + EntityBuilder.getEntityKey(cur_class) + "," + replace_text + " as ed";
        String hql = s_select + " from " + paras.get(0) + " where " + paras.get(1);
        int k = 0;
        Hashtable<String, Integer> dKeys = new Hashtable<String, Integer>();
        for (int i = 0; i < keys.size(); i++) {
            dKeys.put(keys.get(i), i);
        }
        List data = new ArrayList();
        data.addAll(keys);
        ftable_view.setObjects(data);
        List list = CommUtil.selectSQL(hql + " and " + replace_entityName + "." + key_name + " in", keys);
        String fieldName = cur_field.getField_name().replace("_code_", "");
        for (Object obj : list) {
            Object[] objs = (Object[]) obj;
            Object value = objs[1];
            if (cur_field.getField_name().endsWith("_code_")) {
                value = CodeManager.getCodeManager().getCodeBy(cur_field.getCode_type_name(), value == null ? "@@@" : value.toString());
            }
            HashMap hm = new HashMap();
            hm.put(fieldName, value);
            other_data.put(cur_field.getEntity_name() + "@" + dKeys.get(objs[0].toString()), hm);
            k++;
        }
        ftable_view.updateUI();

        ModalDialog.doModal(jPanel3, ftable_view, "Ìæ»»ºó½á¹ûÔ¤ÀÀ£º");
    }

    private boolean validateSQL(String sql_text, boolean show_sql) {
        String sql_msg = sql_text;
        if (db_type.equals("sqlserver")) {
            sql_text += " and 1=0";
        } else {
            sql_text += " where 1=0";
        }
        ValidateSQLResult result = CommUtil.excuteSQL(sql_text);
        boolean pass = result.getResult() == 0;
        if (!pass) {
            sql_msg += ";\n´íÎóÌáÊ¾£º\n    " + result.getMsg();
        }
        if (show_sql || !pass) {
            MsgUtil.showHRValidateMsg(sql_msg, "", pass);
        }
        return pass;
    }

    private ValidateSQLResult replace(String sql) {
        if (db_type.equals("sqlserver")) {
            return CommUtil.excuteSQLs(sql + " and " + replace_entityName + "." + key_name + " in", keys);
        } else {
            String s_start = sql.substring(0, sql.indexOf(" and 1=0)"));
            String s_end = sql.substring(sql.indexOf(" and 1=0)") + 8);
            return CommUtil.excuteSQLs(s_start + " and " + replace_entityName + "." + key_name + " in", keys, s_end);
        }
    }

    private String getEntityName() {
        String entityName = cur_field.getEntity_name();
        List<TempFieldInfo> fields = EntityBuilder.getDeclareFieldInfoListOf(cur_class, EntityBuilder.COMM_FIELD_VISIBLE);
        boolean not_exists = true;
        for (TempFieldInfo tfi : fields) {
            if (tfi.getField_name().equals(cur_field.getField_name())) {
                not_exists = false;
                break;
            }
        }
        if (not_exists) {
            entityName = cur_class.getSuperclass().getSimpleName();
        }
        replace_entityName = entityName;
        return entityName;
    }

    private String transfer_to_SQL(String tmp) {
        if (cur_field == null) {
            return null;
        }
        if (tmp == null || tmp.trim().equals("")) {
            return null;
        }
        for (String key : jtaFormulaText.getK_keywords().keySet()) {
            tmp = tmp.replace(key, jtaFormulaText.getK_keywords().get(key).replace("#", ""));
        }
        replace_text = tmp;
        String entityName = getEntityName();
        String fieldName = cur_field.getField_name().replace("_code_", "");
        if (db_type.equals("sqlserver")) {
            tmp = " update " + entityName + " set " + fieldName + "=" + tmp;
            List list = ColumnReplacePanel.getQueryPara(replace_text, entityName, entityName_keys);
            tmp = tmp + " from " + list.get(0) + " where " + list.get(1);
        } else {
            List list = ColumnReplacePanel.getQueryPara(replace_text, entityName, entityName_keys);
            tmp = " update  (select " + entityName + "." + fieldName + "," + tmp + " as ed from " + list.get(0) + " where " + list.get(1) + " and 1=0) set " + fieldName + "=ed";
        }

        return tmp;
    }

    @Override
    public void preview() {
        String sql_text = transfer_to_SQL(jtaFormulaText.getText());
        if (sql_text == null) {
            return;
        }
        if (validateSQL(sql_text, false)) {
            showReplaceResult();
        }
    }

    @Override
    public ValidateSQLResult replace() {
        String sql_text = transfer_to_SQL(jtaFormulaText.getText());
        if (sql_text == null) {
            return null;
        }
        if (JOptionPane.showConfirmDialog(JOptionPane.getFrameForComponent(jPanel3),
                "µ±Ç°Ìæ»»×Ö¶Î£º¡¾" + cur_field.getCaption_name() + "¡¿\nÌæ»»ÊÇ²»¿ÉÄæµÄ¹ý³Ì£¬È·¶¨Òª½øÐÐÌæ»»Âð", "Ñ¯ÎÊ", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE) != JOptionPane.OK_OPTION) {
            return null;
        }
        return replace(sql_text);
    }

    @Override
    public void check() {
        String sql_text = transfer_to_SQL(jtaFormulaText.getText());
        if (sql_text == null) {
            return;
        }
        validateSQL(sql_text, true);
    }

    @Override
    public void clear() {
        jtaFormulaText.setText("");
    }

    @Override
    public void changeobject(int method) {
        if (cur_field == null) {
            keys.clear();
            return;
        }
        if (method == 0) {
            ftable_view.setObjects(selectedList);
        } else if (method == 1) {
            ftable_view.setObjects(ftable.getObjects());
        } else {
//            if (container_data == null) {
//                container_data = new ArrayList();
//            }
//            ftable_top.setObjects(container_data);
        }
        key_name = EntityBuilder.getEntityKey(cur_class);
        List data = ftable_view.getAllObjects();
        ITableCellEditable it = ((FTableModel) ftable.getModel()).getiTableCellEditable();
        List list = new ArrayList();
        if (it != null) {
            for (Object obj : data) {
                int i = it.getCellEditable(obj, cur_field.getField_name());
                if (i < 0) {
                    continue;
                }
                list.add(obj);
            }
            ftable_view.setObjects(list);
        }
        list = ftable_view.getObjects();
        keys.clear();
        for (Object obj : list) {
            if (obj instanceof String) {
                keys.add(obj.toString());
            } else {
                keys.add(PublicUtil.getProperty(obj, key_name).toString());
            }
        }
//        this.method = method;
//        List list;
//        if (method == 0) {
//            list = selectedList;
//        } else if (method == 1) {
//            list = ftable.getObjects();
//        } 
////        else {
////            list = container_data;
////        }
//        keys.clear();
////        for (Object obj : list) {
////            if (obj instanceof String) {
////                keys.add(obj.toString());
////            } else {
////                keys.add(PublicUtil.getProperty(obj, key_name).toString());
////            }
////        }
    }

    @Override
    public void setReplaceField(TempFieldInfo tfi) {
        cur_field = tfi;
        changeobject(method);
    }
//
//    @Override
//    public void setContainerData(List list) {
//        container_data = list;
//    }

    @Override
    public void setSelectedObject(List list) {
        this.selectedList = list;
    }

    @Override
    public void refreshData() {
    }
}
