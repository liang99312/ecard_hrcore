/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FormulaParaFieldSelectPanel.java
 *
 * Created on 2009-8-6, 10:12:36
 */
package org.jhrcore.ui;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.swingbinding.JListBinding;
import org.jdesktop.swingbinding.SwingBindings;
import org.jhrcore.comm.CodeManager;
import org.jhrcore.entity.Code;
import org.jhrcore.entity.annotation.ObjectListHint;
import org.jhrcore.entity.base.TempFieldInfo;
import org.jhrcore.ui.action.CloseAction;
import org.jhrcore.ui.listener.IPickFieldSelectListener;
import org.jhrcore.ui.renderer.JCheckBoxListRenderer;
import org.jhrcore.ui.renderer.TableListCellRender;

/**
 *
 * @author mxliteboss
 */
public class FormulaParaFieldSelectPanel extends javax.swing.JPanel {

    private String search_text = "";
    private Set selected_nodes = new HashSet();
    private String root_text;
    private List field_list;
    private String final_text = "";
    private List<TempFieldInfo> number_list = new ArrayList<TempFieldInfo>();
    private JListBinding varchar_binding;
    private JCheckBoxList jlsNumber;
    private List<TempFieldInfo> varchar_list = new ArrayList<TempFieldInfo>();
    private List<IPickFieldSelectListener> iPickFieldSelectListeners = new ArrayList<IPickFieldSelectListener>();
    private Object cur_obj;
    private HrTextPane jtaFormulaText;

    public void addPickFieldSelectListener(IPickFieldSelectListener listener) {
        iPickFieldSelectListeners.add(listener);
    }

    public void delPickFieldSelectListener(IPickFieldSelectListener listener) {
        iPickFieldSelectListeners.remove(listener);
    }

    public String getFinal_text() {
        return final_text;
    }

    /** Creates new form FormulaParaFieldSelectPanel */
    public FormulaParaFieldSelectPanel(String root_text, List field_list) {
        initComponents();
        this.root_text = root_text;
        this.field_list = field_list;
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jtfSearch = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        pnlMain = new javax.swing.JPanel();
        pnlChar = new javax.swing.JTabbedPane();
        pnlNumber = new javax.swing.JPanel();
        pnlVarchar = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jlsVarchar = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        pnlText = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        jLabel1.setText("查找：");

        pnlNumber.setLayout(new java.awt.BorderLayout());
        pnlChar.addTab("数值型项目", pnlNumber);

        jlsVarchar.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jlsVarchar);

        javax.swing.GroupLayout pnlVarcharLayout = new javax.swing.GroupLayout(pnlVarchar);
        pnlVarchar.setLayout(pnlVarcharLayout);
        pnlVarcharLayout.setHorizontalGroup(
            pnlVarcharLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE)
        );
        pnlVarcharLayout.setVerticalGroup(
            pnlVarcharLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
        );

        pnlChar.addTab("字符型项目", pnlVarchar);

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlChar, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlChar, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
        );

        jLabel2.setText("表达式：");

        pnlText.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlText, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlText, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(104, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        btnOk.setText("确定");

        btnCancel.setText("取消");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(129, 129, 129)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jtfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(218, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(381, Short.MAX_VALUE)
                .addComponent(btnOk)
                .addGap(18, 18, 18)
                .addComponent(btnCancel)
                .addGap(27, 27, 27))
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnOk))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOk;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JList jlsVarchar;
    private javax.swing.JTextField jtfSearch;
    private javax.swing.JTabbedPane pnlChar;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlNumber;
    private javax.swing.JPanel pnlText;
    private javax.swing.JPanel pnlVarchar;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        jtaFormulaText = new HrTextPane();
        pnlText.add(jtaFormulaText);
        for (Object obj : field_list) {
            TempFieldInfo tfi = (TempFieldInfo) obj;
            String field_type = tfi.getField_type().toLowerCase();
            if (field_type.equals("string") || field_type.equals("boolean") || field_type.equals("date") || field_type.equals("code")) {
                varchar_list.add(tfi);
            } else {
                number_list.add(tfi);
            }
        }
        jlsNumber = new JCheckBoxList(number_list);
        varchar_binding = SwingBindings.createJListBinding(UpdateStrategy.READ_WRITE, varchar_list, jlsVarchar);
        varchar_binding.bind();
        boolean[] checkItems = jlsNumber.getCheckedItems();
        jlsNumber.setCellRenderer(new JCheckBoxListRenderer(checkItems));
        jlsNumber.setLayoutOrientation(JList.VERTICAL_WRAP);
        jlsNumber.setVisibleRowCount(-1);
        jlsNumber.setFixedCellHeight(27);
        pnlNumber.add(new JScrollPane(jlsNumber), BorderLayout.CENTER);
        jlsVarchar.setCellRenderer(new TableListCellRender());
        jlsVarchar.setLayoutOrientation(JList.VERTICAL_WRAP);
        jlsVarchar.setVisibleRowCount(-1);
        jlsVarchar.setFixedCellHeight(27);
    }

    private void setupEvents() {
        pnlChar.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                selected_nodes.clear();
            }
        });
        jlsVarchar.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                cur_obj = jlsVarchar.getSelectedValue();
                if (cur_obj == null) {
                    return;
                }
                if (e.getClickCount() >= 2) {
                    selectfield(cur_obj);
                }
            }
        ;
        });
        jlsNumber.getModel().addListDataListener(new ListDataListener() {

            @Override
            public void intervalAdded(ListDataEvent e) {
            }

            @Override
            public void intervalRemoved(ListDataEvent e) {
            }

            @Override
            public void contentsChanged(ListDataEvent e) {
                updateConditionText(jlsNumber.getSelectedValue(), jlsNumber.getCheckedObjects(), 0);
            }
        });
        jtfSearch.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
            }

            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == 10) {
                    searchNode();
                }
            }

            @Override
            public void keyReleased(KeyEvent e) {
            }
        });
        btnOk.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                final_text = jtaFormulaText.getText();
                for (IPickFieldSelectListener listener : iPickFieldSelectListeners) {
                    listener.pickFieldString(final_text);
                }
                ModelFrame.close();
            }
        });
        CloseAction.doCloseAction(btnCancel);
    }

    private void selectfield(Object obj) {
        int tmp = jtaFormulaText.getSelectionStart();
        String operator = "";
        String entity_name = "[" + root_text + ".";
        if ("[人员工资所有项目.".equals(entity_name) || "[部门工资所有项目.".equals(entity_name) || "[常量参数.".equals(entity_name)) {
            entity_name = "[";
        }
        if (entity_name.endsWith("所有项目.")) {
            entity_name = "[";
        }
        boolean isPara = obj.toString().startsWith("@");
        if (obj instanceof TempFieldInfo && ((TempFieldInfo) obj).getField_name().endsWith("_code_")) {
            TempFieldInfo tfi = (TempFieldInfo) obj;
            ObjectListHint objHint = tfi.getField().getAnnotation(ObjectListHint.class);
            if (objHint != null && objHint.hqlForObjectList().startsWith("from Code ")) {
                String hql = objHint.hqlForObjectList();
                String code_type = hql.substring(hql.indexOf("=") + 1);
                CodeSelectDialog csmDlg = new CodeSelectDialog(CodeManager.getCodeManager().getCodeListBy(code_type), code_type,null,TreeSelectMod.nodeCheckChildFollowMod);
                ContextManager.locateOnMainScreenCenter(csmDlg);
                csmDlg.setVisible(true);
                if (csmDlg.isClick_ok()) {
                    List<Code> codes = csmDlg.getSelectCodes(false);
                    if (codes.size() == 0) {
                        return;
                    }
                    String str = "";
                    List<String> like_str = new ArrayList<String>();
                    for (Code c : codes) {
                        if (c.isEnd_flag()) {
                            str += "'[" + code_type + "." + c.getCode_name() + "]',";
                        } else {
                            like_str.add("[" + code_type + "." + c.getCode_name() + "]");
                        }
                    }
                    if (!str.equals("")) {
                        str = str.substring(0, str.length() - 1);
                    }
                    for (String s : like_str) {
                        operator += " " + entity_name + tfi.getCaption_name() + "] like '" + s + "%' or ";
                    }
                    if (!str.equals("")) {
                        operator += " " + entity_name + tfi.getCaption_name() + "] in(" + str + ") or ";
                    }
                    operator = operator.substring(0, operator.length() - 3);
                }
            } else {
                operator = " " + entity_name + obj.toString() + "] ";
            }
        } else {
            operator = " " + entity_name + obj.toString() + "] ";
        }
        if (isPara) {
            operator = operator.replace("[", "");
            operator = operator.replace("]", "");
        }
        jtaFormulaText.replaceSelection(operator);
        jtaFormulaText.setCaretPosition(tmp + operator.length());
        jtaFormulaText.requestFocus();
    }

    /**
     * 通过用户选择来更新表达式
     * @param obj：当前选择对象
     * @param list：对于JCHECKBOX支持多选的数值型字段已经选择的LIST
     * @param tabIndex：当前卡片索引
     */
    private void updateConditionText(Object obj, List list, int tabIndex) {
        boolean isPayField = root_text.contains("工资所有项目") || root_text.contains("所有项目");
        TempFieldInfo tfi = (TempFieldInfo) obj;
        boolean selected = list.contains(obj);
        String text = jtaFormulaText.getText();
        String replace_text = "[" + tfi.getEntity_caption() + "." + tfi.getCaption_name() + "]";
        if (isPayField) {
            replace_text = "[" + tfi.getCaption_name() + "]";
        }
        if (tabIndex == 1) {
            jtaFormulaText.setText(replace_text);
            jtaFormulaText.updateUI();
            return;
        }
        if (selected) {
            if (text.replace(" ", "").equals("")) {
                text = text + replace_text;
            } else {
                text = text + " + " + replace_text;
            }
        } else {
            int ind = text.indexOf(replace_text);
            int start_ind = ind - 5 > 0 ? ind - 5 : 0;
            String temp = text.substring(start_ind, ind);
            int last_ind = temp.indexOf("]");
            if (last_ind > 0) {
                replace_text = temp.substring(last_ind + 1) + replace_text;
            } else {
                ind = ind + replace_text.length();
                start_ind = ind + 5 > text.length() ? text.length() : (ind + 5);
                temp = text.substring(ind, start_ind);
                last_ind = temp.indexOf("[");
                if (last_ind > 0) {
                    replace_text = replace_text + temp.substring(0, last_ind - 1);
                }
            }
            text = text.replace(replace_text, "");
        }
        jtaFormulaText.setText(text);
        jtaFormulaText.updateUI();
    }

    private void searchNode() {
        String val = jtfSearch.getText();
        if (val.equals("")) {
            return;
        }
        if (!search_text.equals(val.toUpperCase())) {
            selected_nodes.clear();
        }
        search_text = val.toUpperCase();
        JList jlist = jlsNumber;
        if (pnlChar.getSelectedIndex() == 1) {
            jlist = jlsVarchar;
        }
        List<TempFieldInfo> search_list = number_list;
        if (pnlChar.getSelectedIndex() == 1) {
            search_list = varchar_list;
        }
        Object select_obj = locateEmp(search_text, search_list);
        if (select_obj == null) {
            selected_nodes.clear();
            select_obj = locateEmp(search_text, search_list);
        }
        if (select_obj == null) {
            return;
        }
        jlist.setSelectedValue(select_obj, true);
    }

    public Object locateEmp(String val, List<TempFieldInfo> search_list) {
        Object result = null;
        val = val.toUpperCase();
        Pattern p = Pattern.compile(val);
        try {
            for (TempFieldInfo field : search_list) {
                String field_val = null;
                Matcher m;
                field_val = field.getCaption_name();
                if (field_val != null) {
                    m = p.matcher(field_val);
                    if (m.find()) {
                        if (selected_nodes.contains(field)) {
                            continue;
                        } else {
                            result = field;
                            selected_nodes.add(field);
                            break;
                        }
                    }
                }
                field_val = field.getPym() == null ? "" : field.getPym().toUpperCase();
                if (field_val != null) {
                    m = p.matcher(field_val);
                    if (m.find()) {
                        if (selected_nodes.contains(field)) {
                            continue;
                        } else {
                            result = field;
                            selected_nodes.add(field);
                            break;
                        }
                    }
                }
            }

        } catch (SecurityException e) {
            e.printStackTrace();
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
        }
        return result;
    }
}
