/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ShowOrderDialog.java
 *
 * Created on 2009-4-19, 22:25:26
 */
package org.jhrcore.ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.Property;
import org.jdesktop.swingbinding.JListBinding;
import org.jdesktop.swingbinding.SwingBindings;
import org.jhrcore.client.CommUtil;
import org.jhrcore.util.SysUtil;
import org.jhrcore.client.UserContext;
import org.jhrcore.util.UtilTool;
import org.jhrcore.entity.base.TempFieldInfo;
import org.jhrcore.entity.salary.ValidateSQLResult;
import org.jhrcore.entity.showstyle.ShowScheme;
import org.jhrcore.entity.showstyle.ShowSchemeOrder;
import org.jhrcore.iservice.impl.CommImpl;
import org.jhrcore.rebuild.EntityBuilder;
import org.jhrcore.ui.renderer.HRRendererView;

/**
 *
 * @author mxliteboss
 */
public class ShowOrderDialog extends javax.swing.JDialog {

    private Class<?> cur_class;
    private String module_code;
    private List list_all_field = new ArrayList();
    private String field_order = "ASC";
    private JListBinding order_binding;
    private ShowScheme curOrderScheme = null;
    private List<ShowSchemeOrder> order_list = new ArrayList<ShowSchemeOrder>();
    private List<TempFieldInfo> default_orders;
    private JTree fieldTree;
    private boolean click_ok = false;

    public boolean isClick_ok() {
        return click_ok;
    }

    public ShowScheme getCurOrderScheme() {
        return curOrderScheme;
    }

    public ShowOrderDialog(Class show_class, List<TempFieldInfo> all_fields, List<TempFieldInfo> default_orders, String module_code, ShowScheme ss) {
        this.setTitle("ÉèÖÃÅÅÐò");
        cur_class = show_class;
        this.module_code = module_code;
        this.default_orders = default_orders;
        for (TempFieldInfo tfi : all_fields) {
            Field field = tfi.getField();
            if (field.getModifiers() >= Modifier.TRANSIENT) {
                continue;
            }
            list_all_field.add(tfi);
        }
        this.curOrderScheme = ss;
        initComponents();
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        btnSave = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jlsOrder = new javax.swing.JList();
        btnAddOrder = new javax.swing.JButton();
        btnDelOrder = new javax.swing.JButton();
        jcbOrder = new javax.swing.JCheckBox();
        btnUpOrder = new javax.swing.JButton();
        btnDownOrder = new javax.swing.JButton();
        pnlField = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);

        btnSave.setText("Ó¦ÓÃ");

        btnClose.setText("¹Ø±Õ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(210, Short.MAX_VALUE)
                .addComponent(btnSave)
                .addGap(27, 27, 27)
                .addComponent(btnClose)
                .addGap(36, 36, 36))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClose)
                    .addComponent(btnSave))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.setText("×Ö¶ÎÁÐ±í£º");

        jLabel2.setText("ÅÅÐò×Ö¶Î£º");

        jlsOrder.setName("listUnSelected"); // NOI18N
        jScrollPane2.setViewportView(jlsOrder);

        btnAddOrder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/select_one.png"))); // NOI18N

        btnDelOrder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/remove_one.png"))); // NOI18N

        jcbOrder.setText("½µÐò");

        btnUpOrder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/move_up.png"))); // NOI18N

        btnDownOrder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/move_down.png"))); // NOI18N

        pnlField.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(pnlField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAddOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDelOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jcbOrder))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(btnUpOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(btnDownOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnUpOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDownOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jScrollPane2)
                                    .addGap(28, 28, 28))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btnAddOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnDelOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jcbOrder)
                                    .addGap(257, 257, 257)))
                            .addComponent(pnlField, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddOrder;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnDelOrder;
    private javax.swing.JButton btnDownOrder;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpOrder;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JCheckBox jcbOrder;
    private javax.swing.JList jlsOrder;
    private javax.swing.JPanel pnlField;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        if (list_all_field.isEmpty()) {
            List<TempFieldInfo> list = EntityBuilder.getCommFieldInfoListOf(cur_class, EntityBuilder.COMM_FIELD_VISIBLE);
            for (TempFieldInfo tfi : list) {
                list_all_field.add(tfi);
            }
        }
        ShowFieldTreeModel sftModel = new ShowFieldTreeModel(list_all_field);
        fieldTree = new JTree(sftModel);
        HRRendererView.getCommMap().initTree(fieldTree,TreeSelectMod.nodeManySelectMod);
        fieldTree.setRootVisible(false);
        fieldTree.setShowsRootHandles(true);
        pnlField.add(new JScrollPane(fieldTree));
        order_binding = SwingBindings.createJListBinding(UpdateStrategy.READ_WRITE, order_list, jlsOrder);
        Property propertySelected = ELProperty.create("${field_caption}[ ${field_order} ] ");
        order_binding.setDetailBinding(propertySelected);
        order_binding.bind();
        if (curOrderScheme == null) {
            curOrderScheme = (ShowScheme) CommUtil.fetchEntityBy("from ShowScheme ss left join fetch ss.showSchemeOrders  where ss.showScheme_key='" + UserContext.person_code + "." + module_code + "." + cur_class.getSimpleName() + ".order'");
        }
        if (curOrderScheme == null) {
            curOrderScheme = new ShowScheme();
        }
        if (curOrderScheme.getShowSchemeOrders() != null && curOrderScheme.getShowSchemeOrders().size() > 0) {
            order_list.addAll(curOrderScheme.getShowSchemeOrders());
        } else {
            for (TempFieldInfo tfi : default_orders) {
                ShowSchemeOrder sso = (ShowSchemeOrder) UtilTool.createUIDEntity(ShowSchemeOrder.class);
                sso.setField_name(tfi.getField_name());
                sso.setField_caption(tfi.getCaption_name());
                sso.setEntity_name(tfi.getEntity_name());
                sso.setField_order("ASC");
                sso.setOrder_no(tfi.getOrder_no());
                order_list.add(sso);
            }
        }
        SysUtil.sortListByInteger(order_list, "order_no");
        order_binding.unbind();
        order_binding.bind();
        SearchTreeFieldDialog.doQuickSearch("×Ö¶ÎÁÐ±í", fieldTree);
    }

    private void setupEvents() {
        jlsOrder.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    if (jlsOrder.getSelectedValue() == null) {
                        return;
                    }
                    int[] scheme_details = jlsOrder.getSelectedIndices();
                    int tmp_index = jlsOrder.getSelectedIndex();
                    boolean up_flag = false;
                    if (tmp_index == order_list.size() - 1) {
                        up_flag = true;
                    }
                    List list = new ArrayList();
                    for (int index : scheme_details) {
                        list.add(order_list.get(index));
                    }
                    order_list.removeAll(list);
                    order_binding.unbind();
                    order_binding.bind();
                    if (tmp_index >= order_list.size()) {
                        tmp_index = order_list.size() - 1;
                    }
                    if (order_list.size() > 0) {
                        if (up_flag) {
                            jlsOrder.setSelectedIndex(order_list.size() - 1);
                        } else {
                            jlsOrder.setSelectedIndex(tmp_index);
                        }
                    }
                }
            }
        });
        fieldTree.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    Object obj = fieldTree.getLastSelectedPathComponent();
                    if (obj == null) {
                        return;
                    }
                    if (obj instanceof DefaultMutableTreeNode) {
                        DefaultMutableTreeNode node = (DefaultMutableTreeNode) obj;
                        if (node.getUserObject() instanceof TempFieldInfo) {
                            addSchemeOrder((TempFieldInfo) node.getUserObject());
                            if (node.getNextSibling() != null) {
                                fieldTree.setSelectionPath(new TreePath(node.getNextSibling().getPath()));
                            } else {
                                fieldTree.setSelectionPath(new TreePath(((DefaultMutableTreeNode) node.getParent()).getPath()));
                            }
                            fieldTree.updateUI();
                        }
                    }
                }
            }
        });
        jcbOrder.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (jcbOrder.isSelected()) {
                    field_order = "DESC";
                } else {
                    field_order = "ASC";
                }
                int[] order_indexs = jlsOrder.getSelectedIndices();
                for (int index : order_indexs) {
                    ShowSchemeOrder sso = (ShowSchemeOrder) order_list.get(index);
                    sso.setField_order(field_order);
                    order_list.set(index, sso);
                }
                order_binding.unbind();
                order_binding.bind();
                jlsOrder.setSelectedIndices(order_indexs);
            }
        });
        btnUpOrder.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                upDetail(-1);
            }
        });
        btnDownOrder.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                upDetail(1);
            }
        });
        btnAddOrder.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                Object obj = fieldTree.getLastSelectedPathComponent();
                if (obj == null) {
                    return;
                }
                if (obj instanceof DefaultMutableTreeNode) {
                    DefaultMutableTreeNode node = (DefaultMutableTreeNode) obj;
                    if (node.getUserObject() instanceof TempFieldInfo) {
                        addSchemeOrder((TempFieldInfo) node.getUserObject());
                        if (node.getNextSibling() != null) {
                            fieldTree.setSelectionPath(new TreePath(node.getNextSibling().getPath()));
                        } else {
                            fieldTree.setSelectionPath(new TreePath(((DefaultMutableTreeNode) node.getParent()).getPath()));
                        }
                        fieldTree.updateUI();
                    }
                }
            }
        });
        btnDelOrder.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (jlsOrder.getSelectedValue() == null) {
                    return;
                }
                int[] scheme_details = jlsOrder.getSelectedIndices();
                int tmp_index = jlsOrder.getSelectedIndex();
                boolean up_flag = false;
                if (tmp_index == order_list.size() - 1) {
                    up_flag = true;
                }
                List list = new ArrayList();
                for (int index : scheme_details) {
                    list.add(order_list.get(index));
                }
                order_list.removeAll(list);
                order_binding.unbind();
                order_binding.bind();
                if (tmp_index >= order_list.size()) {
                    tmp_index = order_list.size() - 1;
                }
                if (order_list.size() > 0) {
                    if (up_flag) {
                        jlsOrder.setSelectedIndex(order_list.size() - 1);
                    } else {
                        jlsOrder.setSelectedIndex(tmp_index);
                    }
                }
            }
        });
        jlsOrder.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                int index = jlsOrder.getSelectedIndex();
                if (index >= 0) {
                    ShowSchemeOrder sso = (ShowSchemeOrder) order_list.get(index);
                    if (sso.getField_order().equals("DESC")) {
                        jcbOrder.setSelected(true);
                    } else {
                        jcbOrder.setSelected(false);
                    }
                }
            }
        });
        btnSave.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                saveShowScheme();
                dispose();
            }
        });

        btnClose.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                curOrderScheme = null;
                dispose();
            }
        });
        this.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosed(WindowEvent e) {
                SearchTreeFieldDialog.cancelQuickSearch();
            }
        });
    }

    private void saveShowScheme() {
        HashSet<ShowSchemeOrder> orders = new HashSet<ShowSchemeOrder>();
        int ind = 0;
        for (ShowSchemeOrder sso : order_list) {
            sso.setOrder_no(ind);
            sso.setShowScheme(curOrderScheme);
            orders.add(sso);
            ind++;
        }
        curOrderScheme.setPerson_code(UserContext.person_code);
        curOrderScheme.setEntity_name(module_code + "." + cur_class.getSimpleName() + ".order");
        curOrderScheme.setShowSchemeOrders(orders);
        if (curOrderScheme.getShowScheme_key() == null) {
            curOrderScheme.setShowScheme_key(UserContext.person_code + "." + curOrderScheme.getEntity_name());
        }
        ValidateSQLResult result = CommImpl.saveShowScheme(curOrderScheme, "order");
        if (result.getResult() != 0) {
            JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent(btnClose), "±£´æ·½°¸Ê§°Ü");
        } else {
            click_ok = true;
            curOrderScheme.setNew_flag(0);
        }
    }

    private void addSchemeOrder(TempFieldInfo tfi) {
        boolean exist_flag = false;
        for (ShowSchemeOrder sso_exist : order_list) {
            if (sso_exist.getField_name().equals(tfi.getField_name())) {
                exist_flag = true;
            }
        }
        if (exist_flag) {
            return;
        }
        ShowSchemeOrder sso = (ShowSchemeOrder) UtilTool.createUIDEntity(ShowSchemeOrder.class);
        sso.setEntity_name(tfi.getEntity_name());
        sso.setField_caption(tfi.getCaption_name());
        sso.setField_name(tfi.getField_name());
        sso.setField_order(field_order);
        sso.setOrder_no(order_list.size());
        sso.setShowScheme(curOrderScheme);
        order_list.add(sso);
        order_binding.unbind();
        order_binding.bind();
    }

    /**
     * ÏòÉÏ/ÏÂÒÆ¶¯½ÚµãË³Ðò
     * @param step£º1£¬ÏòÉÏ;-1ÏòÏÂ
     */
    private void upDetail(int step) {
        int selectIndex = jlsOrder.getSelectedIndex();
        if (selectIndex == -1) {
            return;
        }
        ShowSchemeOrder showSchemeDetail = (ShowSchemeOrder) order_list.get(selectIndex);
        order_list.remove(selectIndex);
        selectIndex = selectIndex + step;
        if (selectIndex == -1) {
            selectIndex = order_list.size();
            order_list.add(showSchemeDetail);
        } else {
            if (selectIndex > order_list.size()) {
                selectIndex = 0;
            }
            order_list.add(selectIndex, showSchemeDetail);
        }
        order_binding.unbind();
        order_binding.bind();
        jlsOrder.setSelectedIndex(selectIndex);
        jlsOrder.ensureIndexIsVisible(selectIndex);
        jlsOrder.updateUI();
    }
}
