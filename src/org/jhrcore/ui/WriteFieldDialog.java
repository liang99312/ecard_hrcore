/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * WriteFieldDialog.java
 *
 * Created on 2009-5-19, 23:48:42
 */
package org.jhrcore.ui;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.swingbinding.JListBinding;
import org.jdesktop.swingbinding.SwingBindings;
import org.jhrcore.util.UtilTool;
import org.jhrcore.entity.annotation.FieldAnnotation;
import org.jhrcore.entity.base.TempFieldInfo;
import org.jhrcore.entity.showstyle.ShowScheme;
import org.jhrcore.entity.showstyle.ShowSchemeDetail;
import org.jhrcore.rebuild.EntityBuilder;
import org.jhrcore.ui.renderer.HRRendererView;
import org.jhrcore.util.ComponentUtil;

/**
 *
 * @author mxliteboss
 */
public class WriteFieldDialog extends javax.swing.JDialog {

    private Class cur_class;
    private JListBinding listBinding_selected;
    // 所有字段
    private List<TempFieldInfo> list_all_field = new ArrayList<TempFieldInfo>();
    // 所有字段
    private List<TempFieldInfo> list_default_field = new ArrayList<TempFieldInfo>();
    private List<String> default_fields;
    // 已选字段
    private List list_Selected = new ArrayList();
    // 当前编辑的界面风格
    private ShowScheme curShowScheme = null;
    private List<String> fields = new ArrayList<String>();
    private List<String> exist_codes = new ArrayList<String>();
    private JTree fieldTree;
    private Hashtable<String, TempFieldInfo> all_field_infos = new Hashtable<String, TempFieldInfo>();
    private List<ShowSchemeDetail> select_details;

    public List<String> getFields() {
        return fields;
    }

    public List<ShowSchemeDetail> getSelect_details() {
        return select_details;
    }

    public ShowScheme getCurShowScheme() {
        return curShowScheme;
    }

    public WriteFieldDialog(Class show_class, List<TempFieldInfo> all_fields, List<String> default_fields) {
        this.setTitle("设置输入字段");
        cur_class = show_class;
        list_all_field.addAll(all_fields);
        this.default_fields = default_fields;
        initComponents();
        initOthers();
        setupEvents();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        listSelected = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnAddSchemeDetail = new javax.swing.JButton();
        btnDelSchemeDetail = new javax.swing.JButton();
        btnUp = new javax.swing.JButton();
        btnDown = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        btnClose = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        pnlField = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);

        listSelected.setName("listSelected"); // NOI18N
        jScrollPane3.setViewportView(listSelected);

        jLabel1.setText("已选字段：");

        jLabel2.setText("未选字段：");

        btnAddSchemeDetail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/select_one.png"))); // NOI18N
        btnAddSchemeDetail.setName("btnAdd"); // NOI18N
        btnAddSchemeDetail.setPreferredSize(new java.awt.Dimension(22, 22));

        btnDelSchemeDetail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/remove_one.png"))); // NOI18N
        btnDelSchemeDetail.setName("btnRemove"); // NOI18N
        btnDelSchemeDetail.setPreferredSize(new java.awt.Dimension(22, 22));

        btnUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/move_up.png"))); // NOI18N
        btnUp.setMaximumSize(new java.awt.Dimension(22, 22));
        btnUp.setMinimumSize(new java.awt.Dimension(22, 22));
        btnUp.setPreferredSize(new java.awt.Dimension(22, 22));

        btnDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/move_down.png"))); // NOI18N
        btnDown.setMaximumSize(new java.awt.Dimension(22, 22));
        btnDown.setMinimumSize(new java.awt.Dimension(22, 22));
        btnDown.setPreferredSize(new java.awt.Dimension(22, 22));

        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/remove_all.png"))); // NOI18N

        btnClose.setText("关闭");
        btnClose.setName("btnClose"); // NOI18N

        btnSave.setText("应用");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(230, Short.MAX_VALUE)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlField.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAddSchemeDetail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDelSchemeDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel2))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(btnUp, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(btnDown, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))))
                .addGap(16, 16, 16))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnDown, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnUp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(btnAddSchemeDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(btnDelSchemeDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pnlField, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddSchemeDetail;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnDelSchemeDetail;
    private javax.swing.JButton btnDown;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JList listSelected;
    private javax.swing.JPanel pnlField;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        if (list_all_field.size() == 0) {
//            ClassAnnotation cs = (ClassAnnotation) cur_class.getAnnotation(ClassAnnotation.class);
//            Class super_class = cur_class.getSuperclass();
//            if (super_class != null) {
//                List<TempFieldInfo> list = EntityBuilder.getDeclareFieldInfoListOf(super_class, EntityBuilder.COMM_FIELD_VISIBLE);
//                for (TempFieldInfo tfi : list) {
//                    Field field = tfi.getField();
//                    FieldAnnotation fa = field.getAnnotation(FieldAnnotation.class);
//                    if(!fa.isEditable()){
//                        continue;
//                    }
//                    tfi.setEntity_caption(cs.displayName());
//                    tfi.setEntity_name(cur_class.getSimpleName());
//                    list_all_field.add(tfi);
//                }
//            }
            List<TempFieldInfo> list = EntityBuilder.getCommFieldInfoListOf(cur_class, EntityBuilder.COMM_FIELD_VISIBLE_ALL);
            for (TempFieldInfo tfi : list) {
                Field field = tfi.getField();
                FieldAnnotation fa = field.getAnnotation(FieldAnnotation.class);
                if (!fa.isEditable()) {
                    continue;
                }
                list_all_field.add(tfi);
            }
        }
        for (TempFieldInfo tfi : list_all_field) {
            if (default_fields.contains(tfi.getField_name())) {
                list_default_field.add(tfi);
            }
            all_field_infos.put(tfi.getEntity_name() + "." + tfi.getField_name(), tfi);
        }
        ShowFieldTreeModel sftModel = new ShowFieldTreeModel(list_all_field);
        fieldTree = new JTree(sftModel);
        HRRendererView.getCommMap().initTree(fieldTree);
        fieldTree.setRootVisible(false);
        fieldTree.setShowsRootHandles(true);
        pnlField.add(new JScrollPane(fieldTree), BorderLayout.CENTER);
        curShowScheme = (ShowScheme) UtilTool.createUIDEntity(ShowScheme.class);
        listBinding_selected = SwingBindings.createJListBinding(UpdateStrategy.READ, list_Selected, listSelected);
        listBinding_selected.bind();
        setCurShowScheme(curShowScheme);
    }

    public void setCurShowScheme(ShowScheme curShowScheme) {
        listBinding_selected.unbind();
        list_Selected.clear();
        if (curShowScheme.getShowSchemeDetails() != null && curShowScheme.getShowSchemeDetails().size() > 0) {
            list_Selected.addAll(curShowScheme.getShowSchemeDetails());
            for (ShowSchemeDetail ssd : curShowScheme.getShowSchemeDetails()) {
                Enumeration enumt = ((DefaultMutableTreeNode) fieldTree.getModel().getRoot()).breadthFirstEnumeration();
                while (enumt.hasMoreElements()) {
                    DefaultMutableTreeNode node = (DefaultMutableTreeNode) enumt.nextElement();
                    if (node.getUserObject() instanceof TempFieldInfo) {
                        TempFieldInfo tfi = (TempFieldInfo) node.getUserObject();
                        if ((tfi.getEntity_name() + "." + tfi.getField_name()).equals(ssd.getEntity_name() + "." + ssd.getField_name())) {
                            node.removeFromParent();
                            break;
                        }
                    }
                }
            }
        } else {
            for (TempFieldInfo tfi1 : list_default_field) {
                ShowSchemeDetail ssd = (ShowSchemeDetail) UtilTool.createUIDEntity(ShowSchemeDetail.class);
                ssd.setEntity_caption(tfi1.getEntity_caption());
                ssd.setEntity_name(tfi1.getEntity_name());
                ssd.setField_caption(tfi1.getCaption_name());
                ssd.setField_name(tfi1.getField_name());
                list_Selected.add(ssd);
                Enumeration enumt = ((DefaultMutableTreeNode) fieldTree.getModel().getRoot()).breadthFirstEnumeration();
                while (enumt.hasMoreElements()) {
                    DefaultMutableTreeNode node = (DefaultMutableTreeNode) enumt.nextElement();
                    if (node.getUserObject() instanceof TempFieldInfo) {
                        TempFieldInfo tfi = (TempFieldInfo) node.getUserObject();
                        if (tfi.getField_name().equals(tfi1.getField_name())) {
                            node.removeFromParent();
                            break;
                        }
                    }
                }
            }
        }
        fieldTree.updateUI();
        listBinding_selected.bind();
    }

    private void upDetail(int selectIndex) {
        ShowSchemeDetail showSchemeDetail = (ShowSchemeDetail) list_Selected.get(selectIndex);
        list_Selected.remove(selectIndex);
        int cur_index = 0;
        if (selectIndex == 0) {
            cur_index = list_Selected.size();
            list_Selected.add(showSchemeDetail);
        } else {
            list_Selected.add(selectIndex - 1, showSchemeDetail);
            cur_index = selectIndex - 1;
        }
        listBinding_selected.unbind();
        listBinding_selected.bind();
        listSelected.setSelectedIndex(cur_index);
    }

    private void downDetail(int selectIndex) {
        int cur_index = 0;
        ShowSchemeDetail showSchemeDetail = (ShowSchemeDetail) list_Selected.get(selectIndex);
        list_Selected.remove(selectIndex);
        if (selectIndex == list_Selected.size()) {
            list_Selected.add(0, showSchemeDetail);

        } else {
            list_Selected.add(selectIndex + 1, showSchemeDetail);
            cur_index = selectIndex + 1;
        }
        listBinding_selected.unbind();
        listBinding_selected.bind();
        listSelected.setSelectedIndex(cur_index);
    }

    private void clearShowSchemeDetail() {
        if (list_Selected.size() == 0) {
            return;
        }
        exist_codes.clear();
        list_Selected.clear();
        listBinding_selected.unbind();
        listBinding_selected.bind();
        ((ShowFieldTreeModel) fieldTree.getModel()).rebuild();
        fieldTree.updateUI();
    }

    private void delShowSchemeDetail() {
        if (listSelected.getSelectedValue() == null) {
            return;
        }
        int index = listSelected.getSelectedIndex();
        for (Object obj : listSelected.getSelectedValues()) {
            ShowSchemeDetail ssd = (ShowSchemeDetail) obj;
            if (all_field_infos.get(ssd.getEntity_name() + "." + ssd.getField_name()) != null) {
                ((ShowFieldTreeModel) fieldTree.getModel()).addNode(all_field_infos.get(ssd.getEntity_name() + "." + ssd.getField_name()));
                exist_codes.remove(ssd.getEntity_name() + "." + ssd.getField_name());
            }
        }
        int[] scheme_indexs = listSelected.getSelectedIndices();
        for (int i = scheme_indexs.length - 1; i >= 0; i--) {
            list_Selected.remove(scheme_indexs[i]);
        }
        listBinding_selected.unbind();
        listBinding_selected.bind();
        if (list_Selected.size() > index) {
            listSelected.setSelectedIndex(index);
        } else {
            if (!list_Selected.isEmpty()) {
                listSelected.setSelectedIndex(list_Selected.size() - 1);
            }
        }
        fieldTree.updateUI();
    }

    private void addShowSchemeDetail() {
        TreePath[] select_path = fieldTree.getSelectionPaths();
        DefaultMutableTreeNode next_node = null;
        List<TempFieldInfo> field_infos = new ArrayList<TempFieldInfo>();
        for (TreePath tp : select_path) {
            Object[] objs = tp.getPath();
            for (Object obj : objs) {
                if (obj instanceof DefaultMutableTreeNode) {
                    DefaultMutableTreeNode node = (DefaultMutableTreeNode) obj;
                    if (node.getUserObject() instanceof TempFieldInfo) {
                        field_infos.add((TempFieldInfo) node.getUserObject());
                        next_node = ComponentUtil.getNextNode(node);
                        node.removeFromParent();
                    }
                }
            }
        }
        fieldTree.clearSelection();
        if (next_node != null && next_node.getPath() != null) {
            fieldTree.setSelectionPath(new TreePath(next_node.getPath()));
        }
        fieldTree.updateUI();
        for (TempFieldInfo tfi : field_infos) {
            if (exist_codes.contains(tfi.getEntity_name() + "." + tfi.getField_name())) {
                continue;
            }
            exist_codes.add(tfi.getEntity_name() + "." + tfi.getField_name());
            ShowSchemeDetail showSchemeDetail = (ShowSchemeDetail) UtilTool.createUIDEntity(ShowSchemeDetail.class);
            showSchemeDetail.setShowScheme(curShowScheme);
            showSchemeDetail.setOrder_no(list_Selected.size());
            showSchemeDetail.setField_name(tfi.getField_name());
            showSchemeDetail.setField_caption(tfi.getCaption_name());
            showSchemeDetail.setEntity_name(tfi.getEntity_name());
            showSchemeDetail.setEntity_caption(tfi.getEntity_caption());
            list_Selected.add(showSchemeDetail);
        }

        listBinding_selected.unbind();
        listBinding_selected.bind();
    }

    private void setupEvents() {
        btnSave.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                select_details = list_Selected;
                dispose();
            }
        });

        btnClose.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });

        btnAddSchemeDetail.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                addShowSchemeDetail();
            }
        });

        btnDelSchemeDetail.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                delShowSchemeDetail();
            }
        });
        listSelected.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    delShowSchemeDetail();
                }
            }
        });

        btnUp.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                int select_index = listSelected.getSelectedIndex();
                if (select_index != -1) {
                    upDetail(select_index);
                }

            }
        });
        btnDown.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                int select_index = listSelected.getSelectedIndex();
                if (select_index != -1) {
                    downDetail(select_index);
                }
            }
        });
        btnClear.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                clearShowSchemeDetail();
            }
        });
        fieldTree.expandRow(0);
        fieldTree.setSelectionRow(0);
    }
}
