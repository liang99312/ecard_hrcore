/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CodeSelectPanel2.java
 *
 * Created on 2009-1-5, 10:02:12
 */
package org.jhrcore.ui;

import org.jhrcore.ui.listener.IPickCodeSelectListener;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import org.jhrcore.entity.Code;
import org.jhrcore.ui.action.CloseAction;
import org.jhrcore.ui.renderer.HRRendererView;
import org.jhrcore.util.ComponentUtil;
import org.jhrcore.util.ImageUtil;

/**
 *
 * @author DB2INST3
 */
public class CodeSelectDialog extends javax.swing.JDialog {

    private List codes = new ArrayList();
    private JTree tree;
    private List<IPickCodeSelectListener> iPickCodeSelectListeners = new ArrayList<IPickCodeSelectListener>();
    private CheckTreeNode cur_node;
    private Object cur_code;
    private int selectMod = 0;//当前树节点选择模式
    private boolean leafSelect = false;
    private boolean multiSelect = false;
    private String parent_name = "所有编码";
    private boolean click_ok = false;

    public boolean isClick_ok() {
        return click_ok;
    }

    public CheckTreeNode getCur_node() {
        return cur_node;
    }

    public Object getSelectObj() {
        if (cur_node == null || cur_node.getUserObject() == null) {
            return null;
        }
        return cur_node.getUserObject();
    }

    public void addPickCodeSelectListener(IPickCodeSelectListener listener) {
        iPickCodeSelectListeners.add(listener);
    }

    public void delPickCodeSelectListener(IPickCodeSelectListener listener) {
        iPickCodeSelectListeners.remove(listener);
    }

    public CodeSelectDialog(List<Code> codes) {
        this(codes, (codes == null || codes.isEmpty()) ? null : codes.get(0).getCode_type());
    }

    public CodeSelectDialog(List codes, String parent_name) {
        this(codes, parent_name, null);
    }

    public CodeSelectDialog(List codes, String parent_name, Object select_code) {
        this(codes, parent_name, select_code, TreeSelectMod.leafSelectMod);
    }

    public CodeSelectDialog(List codes, String parent_name, Object select_code, int selectMod) {
        super();
        this.codes = codes;
        this.cur_code = select_code;
        this.parent_name = parent_name == null ? this.parent_name : parent_name;
        this.selectMod = selectMod;
        this.leafSelect = selectMod == TreeSelectMod.leafSelectMod || selectMod == TreeSelectMod.leafCheckMod;
        this.multiSelect = selectMod > TreeSelectMod.nodeSelectMod;
        initComponents();
        initOthers();
        setupEvents();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMain = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txfSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);

        pnlMain.setLayout(new java.awt.BorderLayout());

        btnOk.setText("确定");

        btnCancel.setText("取消");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(btnOk)
                .addGap(39, 39, 39)
                .addComponent(btnCancel)
                .addContainerGap(123, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOk)
                    .addComponent(btnCancel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.setText("查找：");

        txfSearch.setMaximumSize(new java.awt.Dimension(100, 2147483647));
        txfSearch.setPreferredSize(new java.awt.Dimension(6, 22));

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/search.png"))); // NOI18N
        btnSearch.setFocusable(false);
        btnSearch.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSearch.setMaximumSize(new java.awt.Dimension(22, 22));
        btnSearch.setPreferredSize(new java.awt.Dimension(22, 22));
        btnSearch.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel1)
                .addComponent(txfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(123, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel1))
                    .addComponent(txfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOk;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JTextField txfSearch;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        tree = new JTree(new CodeSelectTreeModel(codes, parent_name));
        HRRendererView.getCommMap().initTree(tree, selectMod);
        tree.setExpandsSelectedPaths(true);
        pnlMain.add(new JScrollPane(tree), BorderLayout.CENTER);
    }

    private void setupEvents() {
        tree.addTreeSelectionListener(new TreeSelectionListener() {

            @Override
            public void valueChanged(TreeSelectionEvent e) {
                cur_node = (CheckTreeNode) tree.getLastSelectedPathComponent();
            }
        });
        tree.addKeyListener(new KeyAdapter() {

            @Override
            public void keyPressed(KeyEvent arg0) {
                if (arg0.getKeyCode() == KeyEvent.VK_ENTER) {
                    selectNode();
                } else if (arg0.getKeyCode() == KeyEvent.VK_SPACE) {
                    selectNode();
                    if (!click_ok) {
                        CodeSelectDialog.this.dispose();
                    }
                }
            }
        });
        tree.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() != 2) {
                    return;
                }
                if (leafSelect && !cur_node.isLeaf()) {
                    return;
                }
                selectNode();
            }
        });

        btnOk.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                click_ok = true;
                if (multiSelect) {
                    dispose();
                }
                if (leafSelect && !cur_node.isLeaf()) {
                    return;
                }
                selectNode();
            }
        });
        btnSearch.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                SearchTreeFieldDialog.getSearchFieldDialog().Locate(1, txfSearch.getText());
            }
        });

        CloseAction.doCloseAction(btnCancel);
        txfSearch.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
            }

            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == 10) {
                    SearchTreeFieldDialog.getSearchFieldDialog().Locate(1, txfSearch.getText());
                } else if (e.getKeyCode() == KeyEvent.VK_SPACE) {
                    selectNode();
                    if (!click_ok) {
                        CodeSelectDialog.this.dispose();
                    }
                }
            }

            @Override
            public void keyReleased(KeyEvent e) {
            }
        });
        txfSearch.requestFocus();
        SearchTreeFieldDialog.doQuickSearch("编码", tree, 1);
        CheckTreeNode select_node = null;
        if (cur_code != null) {
            CheckTreeNode root = (CheckTreeNode) tree.getModel().getRoot();
            Enumeration enumt = root.breadthFirstEnumeration();
            if (cur_code instanceof Code) {
                Code code = (Code) cur_code;
                while (enumt.hasMoreElements()) {
                    CheckTreeNode node = (CheckTreeNode) enumt.nextElement();
                    if (node == root) {
                        continue;
                    }
                    Code c = (Code) node.getUserObject();
                    if ((c.getCode_id() != null) && c.getCode_id().equals(code.getCode_id())) {
                        if (selectMod > TreeSelectMod.nodeSelectMod) {
                            node.setSelected(true);
                        }
                        select_node = node;
                        break;
                    }
                }
            } else if (cur_code instanceof List) {
                if (selectMod > TreeSelectMod.nodeSelectMod) {
                    List list = (List) cur_code;
                    while (enumt.hasMoreElements()) {
                        CheckTreeNode node = (CheckTreeNode) enumt.nextElement();
                        if (node == root) {
                            continue;
                        }
                        Code c = (Code) node.getUserObject();
                        if (list.contains(c)) {
                            node.setSelected(true);
                        }
                    }
                }
            } else {
                while (enumt.hasMoreElements()) {
                    CheckTreeNode node = (CheckTreeNode) enumt.nextElement();
                    if (node == root) {
                        continue;
                    }
                    Code c = (Code) node.getUserObject();
                    if (c.getCode_name().equals(cur_code.toString())) {
                        select_node = node;
                        break;
                    }
                }
            }
        }
        ComponentUtil.initTreeSelection(tree, select_node);
    }

    public List<Code> getSelectCodes(boolean onlyChild) {
        List list = ComponentUtil.getCheckedObjs(tree);
        List<Code> result = new ArrayList<Code>();
        for (Object obj : list) {
            if (obj instanceof Code) {
                Code c = (Code) obj;
                if (onlyChild) {
                    if (c.isEnd_flag()) {
                        result.add(c);
                    }
                } else {
                    result.add(c);
                }
            }
        }
        return result;
    }

    private void selectNode() {
        if (cur_node == null) {
            return;
        }
        if (leafSelect && !cur_node.isLeaf()) {
            return;
        }
        for (IPickCodeSelectListener listener : iPickCodeSelectListeners) {
            listener.pickCode(cur_node);
        }
        click_ok = true;
        dispose();
    }

    public JTree getCodeTree() {
        return tree;
    }
}
