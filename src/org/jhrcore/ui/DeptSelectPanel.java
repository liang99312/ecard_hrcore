/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DeptSelectPanel.java
 *
 * Created on 2009-11-1, 15:11:00
 */
package org.jhrcore.ui;

import org.jhrcore.ui.renderer.HRCommTreeEditor;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import org.jhrcore.entity.DeptCode;
import org.jhrcore.ui.listener.IPickDeptListener;
import org.jhrcore.ui.renderer.HRRendererView;
import org.jhrcore.util.ComponentUtil;
import org.jhrcore.util.MsgUtil;

/**
 *
 * @author mxliteboss
 */
public class DeptSelectPanel extends javax.swing.JPanel {

    private String search_text = "";
    private List<DeptCode> selectDepts = new ArrayList();
    public DeptCode cur_dept = null;
    private Set<CheckTreeNode> selected_nodes = new HashSet<CheckTreeNode>();
    private List<DeptCode> depts;
    private List<IPickDeptListener> listeners = new ArrayList<IPickDeptListener>();
    private int selectMod = TreeSelectMod.nodeSelectMod;
    private CheckTreeNode rootNode;
    private JTree dept_tree;

    public void addPickDeptListener(IPickDeptListener listener) {
        listeners.add(listener);
    }

    public void delPickDeptListener(IPickDeptListener listener) {
        listeners.remove(listener);
    }

    /** Creates new form DeptSelectPanel */
    public DeptSelectPanel(List<DeptCode> depts) {
        this(depts, null, 1);
    }

    public DeptSelectPanel(List<DeptCode> depts, DeptCode selectDept) {
        this(depts, selectDept, TreeSelectMod.nodeSelectMod);
    }

    public DeptSelectPanel(List<DeptCode> depts, Object selectDept, int selectMod) {
        this.depts = depts;
        this.selectMod = selectMod;
        if (selectDept != null) {
            if (selectDept instanceof DeptCode) {
                selectDepts.add((DeptCode) selectDept);
            } else if (selectDept instanceof List) {
                selectDepts.addAll((List) selectDept);
            }
        }
        initComponents();
        initOthers();
        setupEvents();
    }

    public JTree getDept_tree() {
        return dept_tree;
    }

    public DeptCode getCur_dept() {
        return cur_dept;
    }

    public List<CheckTreeNode> getSelectNodes() {
        return ComponentUtil.getCheckedNodes(dept_tree);
    }

    public List<DeptCode> getSelectDepts() {
        List list = ComponentUtil.getCheckedObjs(dept_tree);
        List<DeptCode> result = new ArrayList();
        for (Object obj : list) {
            if (obj instanceof DeptCode) {
                result.add((DeptCode) obj);
            }
        }
        return result;
    }

    public List<DeptCode> getSelectParentDepts() {
        List<DeptCode> result = new ArrayList<DeptCode>();
        Enumeration enumt = rootNode.breadthFirstEnumeration();
        while (enumt.hasMoreElements()) {
            CheckTreeNode node = (CheckTreeNode) enumt.nextElement();
            if (node == rootNode) {
                continue;
            }
            if (node.isSelected() && node.getUserObject() instanceof DeptCode) {
                DeptCode dc = (DeptCode) node.getUserObject();
                boolean parent_selected = false;
                CheckTreeNode tmpNode = node;
                while (tmpNode.getParent() != rootNode) {
                    tmpNode = (CheckTreeNode) tmpNode.getParent();
                    if (tmpNode.isSelected()) {
                        parent_selected = true;
                        break;
                    }
                }
                if (parent_selected) {
                    continue;
                }
                result.add(dc);
            }
        }
        return result;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jtfSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jcbChild = new javax.swing.JCheckBox();

        jPanel2.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("查找：");
        jPanel3.add(jLabel1);

        jtfSearch.setMaximumSize(new java.awt.Dimension(100, 2147483647));
        jtfSearch.setMinimumSize(new java.awt.Dimension(100, 21));
        jtfSearch.setPreferredSize(new java.awt.Dimension(100, 22));
        jPanel3.add(jtfSearch);

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/search.png"))); // NOI18N
        btnSearch.setMaximumSize(new java.awt.Dimension(22, 22));
        btnSearch.setPreferredSize(new java.awt.Dimension(22, 22));
        jPanel3.add(btnSearch);

        jcbChild.setText("包含子部门");
        jPanel3.add(jcbChild);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JCheckBox jcbChild;
    private javax.swing.JTextField jtfSearch;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        rootNode = new CheckTreeNode("所有部门");
        rootNode.removeAllChildren();
        CheckTreeNode cur_node = rootNode;
        if (depts != null) {
            for (Object obj : depts) {
                DeptCode code = (DeptCode) obj;
                while (cur_node != rootNode && !code.getParent_code().equals(((DeptCode) cur_node.getUserObject()).getDept_code())) {
                    cur_node = (CheckTreeNode) cur_node.getParent();
                }
                CheckTreeNode node = new CheckTreeNode(code);
                cur_node.add(node);
                cur_node = node;
            }
        }
        dept_tree = new JTree(rootNode);
        HRRendererView.getCommMap().initTree(dept_tree, selectMod);
        jcbChild.setSelected(selectMod == TreeSelectMod.nodeCheckChildFollowMod);
        jcbChild.setVisible(selectMod > TreeSelectMod.nodeSelectMod);
        dept_tree.setRootVisible(false);
        dept_tree.setShowsRootHandles(true);
        dept_tree.setExpandsSelectedPaths(true);
        jPanel2.add(new JScrollPane(dept_tree), BorderLayout.CENTER);
        if (selectDepts.size() > 0) {
            CheckTreeNode select_node = null;
            Enumeration enumt = ((CheckTreeNode) dept_tree.getModel().getRoot()).depthFirstEnumeration();
            if (selectMod > TreeSelectMod.nodeSelectMod) {
                while (enumt.hasMoreElements()) {
                    CheckTreeNode node = (CheckTreeNode) enumt.nextElement();
                    if (node.getUserObject() instanceof DeptCode) {
                        DeptCode dept = (DeptCode) node.getUserObject();
                        if (selectDepts.contains(dept)) {
                            node.setSelected(true);
                        }
                    }
                }
            } else {
                while (enumt.hasMoreElements()) {
                    CheckTreeNode node = (CheckTreeNode) enumt.nextElement();
                    if (node.getUserObject() instanceof DeptCode) {
                        DeptCode dept = (DeptCode) node.getUserObject();
                        if (selectDepts.contains(dept)) {
                            select_node = node;
                            break;
                        }
                    }
                }
            }
            ComponentUtil.initTreeSelection(dept_tree, select_node);
        } else {
            DeptPanel.initDeptTreeSelection(dept_tree);
        }
        Object obj = dept_tree.getLastSelectedPathComponent();
        if (obj != null) {
            CheckTreeNode node = (CheckTreeNode) obj;
            if (node.getUserObject() instanceof DeptCode) {
                cur_dept = (DeptCode) (node).getUserObject();
            }
        }
    }

    private void setupEvents() {
        jcbChild.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                ((HRCommTreeEditor) dept_tree.getCellEditor()).selectChild(jcbChild.isSelected());
            }
        });
        ActionListener alSearch = new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                searchNode();
            }
        };
        btnSearch.addActionListener(alSearch);
        jtfSearch.addActionListener(alSearch);
        dept_tree.addTreeSelectionListener(new TreeSelectionListener() {

            @Override
            public void valueChanged(TreeSelectionEvent e) {
                Object obj = e.getPath().getLastPathComponent();
                if (obj instanceof CheckTreeNode) {
                    CheckTreeNode node = (CheckTreeNode) obj;
                    if (node.getUserObject() instanceof DeptCode) {
                        cur_dept = (DeptCode) node.getUserObject();
                    }
                }
            }
        });

        dept_tree.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                if (selectMod > TreeSelectMod.nodeSelectMod) {
                    return;
                }
                if (e.getClickCount() >= 2) {
                    if (cur_dept == null) {
                        return;
                    }
                    if (selectMod == TreeSelectMod.leafSelectMod && !((CheckTreeNode) dept_tree.getLastSelectedPathComponent()).isLeaf()) {
                        MsgUtil.showInfoMsg("请选择末级部门");
                        return;
                    }
                    for (IPickDeptListener listener : listeners) {
                        listener.pickDept(cur_dept);
                    }
                }
            }
        });

    }

    public JTextField getJtfSearch() {
        return jtfSearch;
    }

    public void searchNode() {
        String val = jtfSearch.getText();
        if (val.equals("")) {
            return;
        }
        if (!search_text.equals(val)) {
            selected_nodes.clear();
        }
        search_text = val;
        CheckTreeNode node = locateEmp(search_text);
        if (node == null) {
            selected_nodes.clear();
            node = locateEmp(search_text);
        }
        if (node == null) {
            return;
        }
        ComponentUtil.initTreeSelection(dept_tree, node);
        cur_dept = (DeptCode) node.getUserObject();
    }

    public CheckTreeNode locateEmp(String val) {
        CheckTreeNode node = (CheckTreeNode) dept_tree.getModel().getRoot();
        CheckTreeNode resultNode = null;
        Enumeration deptEnum = node.depthFirstEnumeration();

        Pattern p = Pattern.compile(val);
        try {
            while (deptEnum.hasMoreElements()) {
                CheckTreeNode tmpNode = (CheckTreeNode) deptEnum.nextElement();
                if (!(tmpNode.getUserObject() instanceof DeptCode)) {
                    continue;
                }
                DeptCode dept1 = (DeptCode) tmpNode.getUserObject();
                String field_val = null;
                Matcher m;
                field_val = dept1.getContent();
                if (field_val != null) {
                    m = p.matcher(field_val);
                    if (m.find()) {
                        if (selected_nodes.contains(tmpNode)) {
                            continue;
                        } else {
                            resultNode = tmpNode;
                            selected_nodes.add(resultNode);
                            break;
                        }
                    }
                }
                field_val = dept1.getDept_code();
                if (field_val != null) {
                    p = Pattern.compile(val);
                    m = p.matcher(field_val);
                    if (m.find()) {
                        if (selected_nodes.contains(tmpNode)) {
                            continue;
                        } else {
                            resultNode = tmpNode;
                            selected_nodes.add(resultNode);
                            break;
                        }
                    }
                }
            }

        } catch (SecurityException e) {
            e.printStackTrace();
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
        }
        return resultNode;
    }
}
