/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PersonClassSelectDlg.java
 *
 * Created on 2011-1-10, 10:49:18
 */
package org.jhrcore.ui;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JList;
import org.jhrcore.util.SysUtil;
import org.jhrcore.entity.base.EntityDef;

/**
 *
 * @author Administrator
 */
public class PersonClassSelectDlg extends javax.swing.JDialog {

    private JCheckBoxList cb_list;
    private boolean flag;
    private String result = "";
    private String str = "";
    private List<EntityDef> list, list2,list_defs;
    private boolean exist_all = false; 
    private boolean singleFlag = false;
    /** Creates new form PersonClassSelectDlg */
    public PersonClassSelectDlg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public PersonClassSelectDlg() {
        initComponents();
        initOthers();
        setupEvents();
    }

    public PersonClassSelectDlg(boolean singleFlag) {
        this.singleFlag = singleFlag;
        initComponents();
        initOthers();
        setupEvents();
    }
    public PersonClassSelectDlg(List<EntityDef> list_defs,boolean exist_all){
        initComponents();
        this.list_defs = list_defs;
        this.exist_all=exist_all;
        initOthers();
        setupEvents();
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelMain = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);

        panelMain.setBorder(javax.swing.BorderFactory.createTitledBorder("人员类别"));
        panelMain.setLayout(new java.awt.BorderLayout());

        btnOk.setText("确定");

        btnCancel.setText("取消");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(133, Short.MAX_VALUE)
                .addComponent(btnOk)
                .addGap(37, 37, 37)
                .addComponent(btnCancel)
                .addGap(22, 22, 22))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnOk))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelMain, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(panelMain, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOk;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel panelMain;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        list = SysUtil.getPersonClass();
        list2 = new ArrayList<EntityDef>();
        for (Object obj : list) {
            EntityDef def = (EntityDef) obj;
            if (def.getEntityName().toUpperCase().equals("A01") || "所有人员".equals(def.getEntityCaption())) {
                continue;
             }
            list2.add(def);
        }
        cb_list = new JCheckBoxList(list2);
        cb_list.setSingleFlag(singleFlag);
        if(exist_all&&list_defs!=null&&!list_defs.isEmpty()){ 
            for(EntityDef def1:list_defs){
                int check=0;
                for(EntityDef def2:list2){
                    if(def1.getEntityName().equals(def2.getEntityName())){
                        cb_list.CheckedItem(check);
                    }
                    check++;
                }
            }
        cb_list.setLayoutOrientation(JList.VERTICAL_WRAP);
        cb_list.setVisibleRowCount(-1);
        cb_list.setFixedCellHeight(25);
        }
        panelMain.add(cb_list, BorderLayout.CENTER);
    }

    private void setupEvents() {
        btnOk.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                getResult();
                flag = true;
                dispose();
            }
        });
        btnCancel.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });
    }

    private void getResult() {
        result = "";
        for (Object obj : cb_list.getCheckedObjects()) {
            result += ",'" + obj.toString() + "'";
        }
        if (!"".equals(result)) {
            result = result.substring(1);
        }
        System.out.println(result);
    }

    public String GetPerson_calss_str() {
        return result;
    }

    /*
     * 获取人员类别key    
     */
    public String GetPerson_calss_key() {
        String keys = "";
        for (Object obj : cb_list.getCheckedObjects()) {
            EntityDef ed = (EntityDef) obj;
            keys += ",'" + ed.getEntity_key() + "'";
        }
        return keys.length()>0?keys.substring(1):keys;
    }
    
    /*
     * 获取人员类别    
     */
    public ArrayList<EntityDef> GetPerson_calss_list() {
        ArrayList<EntityDef> eds = new ArrayList<EntityDef>();
        for (Object obj : cb_list.getCheckedObjects()) {
            EntityDef ed = (EntityDef) obj;
            eds.add(ed);
        }
        return eds;
    }
    
    public boolean isClick_ok() {
        return flag;
    }

    public void checkedPerson_calss(String str) {
        this.str = str;
        if(str == null || str.trim().length() == 0) return;
        String str1[] = str.split(",");
        int num = 0;
        int count = 0;
        for (Object obj : list2) {
            EntityDef def = (EntityDef) obj;
            for (String st : str1) {
                if(st.length() < 2) continue;
                String str2 = st.substring(1, st.length() - 1);
                if (def.getEntity_key().equals(str2) || (def.getEntityCaption() != null && def.getEntityCaption().equals(str2))) {
                    cb_list.CheckedItem(count);
                    num++;
                }
            }
            if (num == str1.length) {
                break;
            }
            count++;
        }
    }
}
