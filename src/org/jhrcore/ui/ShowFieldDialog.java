/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ShowFieldDlg.java
 *
 * Created on 2009-4-14, 15:40:44
 */
package org.jhrcore.ui;

import java.awt.event.MouseEvent;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.List;
import java.util.Set;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import org.jhrcore.client.CommUtil;
import org.jhrcore.util.SysUtil;
import org.jhrcore.client.UserContext;
import org.jhrcore.util.UtilTool;
import org.jhrcore.entity.base.TempFieldInfo;
import org.jhrcore.entity.salary.ValidateSQLResult;
import org.jhrcore.entity.showstyle.ShowFieldGroup;
import org.jhrcore.entity.showstyle.ShowScheme;
import org.jhrcore.entity.showstyle.ShowSchemeDetail;
import org.jhrcore.iservice.impl.CommImpl;
import org.jhrcore.rebuild.EntityBuilder;
import org.jhrcore.ui.listener.IPickCloseSearchPanelListener;
import org.jhrcore.ui.renderer.HRRendererView;

/**
 *
 * @author mxliteboss
 */
public class ShowFieldDialog extends javax.swing.JDialog {

    private Class cur_class;
    private String module_code;
    // 所有字段
    private List<TempFieldInfo> list_all_field = new ArrayList<TempFieldInfo>();
    // 默认字段
    private List<TempFieldInfo> list_default_field = new ArrayList<TempFieldInfo>();
    // 当前编辑的界面风格
    private ShowScheme curShowScheme = null;
    private List<String> fields = new ArrayList<String>();
    private JTree fieldTree;
    private Hashtable<String, TempFieldInfo> all_field_infos = new Hashtable<String, TempFieldInfo>();
    private ShowFieldTreeModel fieldModel;
    private JTree showTree;
    private JMenuItem searchField = new JMenuItem("查找");
    private int search_type = 0;
    private JPopupMenu popupMenu = new JPopupMenu();
    private String entity_name;
    private DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode("字段列表");
    private SearchFieldsPanel leftSearchPanel;
    private SearchFieldsPanel rightSearchPanel;
    private boolean click_ok = false;
    private boolean save_flag = true;

    public boolean isClick_ok() {
        return click_ok;
    }

    public List<String> getFields() {
        return fields;
    }

    public ShowScheme getCurShowScheme() {
        return curShowScheme;
    }

    public ShowFieldDialog(java.awt.Frame parent, Class show_class, List<TempFieldInfo> all_fields, List<TempFieldInfo> default_fields, String module_code) {
        this(parent, show_class, all_fields, default_fields, module_code, null, true);
    }

    public ShowFieldDialog(java.awt.Frame parent, Class show_class, List<TempFieldInfo> all_fields, List<TempFieldInfo> default_fields, String module_code, ShowScheme showScheme, boolean save_flag) {
        super(parent);
        this.setTitle("设置显示字段");
        cur_class = show_class;
        this.module_code = module_code;
        list_all_field.addAll(all_fields);
        list_default_field.addAll(default_fields);
        this.curShowScheme = showScheme;
        this.save_flag = save_flag;
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        initComponents();
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnAddSchemeDetail = new javax.swing.JButton();
        btnUp = new javax.swing.JButton();
        btnDown = new javax.swing.JButton();
        btnDelSchemeDetail = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        btnClose = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        jcbGroup = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        pnlField = new javax.swing.JPanel();
        btnClear = new javax.swing.JButton();
        pnlRight = new javax.swing.JPanel();
        toolbar = new javax.swing.JToolBar();
        btnFieldGroup = new javax.swing.JButton();
        btnAddall = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);

        jLabel1.setText("已选字段：");

        jLabel2.setText("未选字段：");

        btnAddSchemeDetail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/select_one.png"))); // NOI18N
        btnAddSchemeDetail.setName("btnRemove"); // NOI18N
        btnAddSchemeDetail.setPreferredSize(new java.awt.Dimension(22, 22));

        btnUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/move_up.png"))); // NOI18N
        btnUp.setMaximumSize(new java.awt.Dimension(22, 22));
        btnUp.setMinimumSize(new java.awt.Dimension(22, 22));
        btnUp.setPreferredSize(new java.awt.Dimension(22, 22));

        btnDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/move_down.png"))); // NOI18N
        btnDown.setMaximumSize(new java.awt.Dimension(22, 22));
        btnDown.setMinimumSize(new java.awt.Dimension(22, 22));
        btnDown.setPreferredSize(new java.awt.Dimension(22, 22));

        btnDelSchemeDetail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/remove_one.png"))); // NOI18N

        btnClose.setText("关闭");
        btnClose.setName("btnClose"); // NOI18N

        btnSave.setText("应用");

        jcbGroup.setText("启用分组");

        jLabel3.setText("说明：未分组字段的默认组名为【未分组】");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                .addComponent(jcbGroup)
                .addGap(29, 29, 29)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jcbGroup))
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlField.setLayout(new java.awt.BorderLayout());

        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/remove_all.png"))); // NOI18N

        pnlRight.setLayout(new java.awt.BorderLayout());

        toolbar.setFloatable(false);
        toolbar.setRollover(true);

        btnFieldGroup.setText("字段分组");
        btnFieldGroup.setFocusable(false);
        btnFieldGroup.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnFieldGroup.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolbar.add(btnFieldGroup);

        btnAddall.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/select_all.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlField, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAddall, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(btnDelSchemeDetail, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                                .addComponent(btnClear, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, Short.MAX_VALUE))
                            .addComponent(btnAddSchemeDetail, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnUp, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDown, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(169, 169, 169))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(pnlRight, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                        .addContainerGap())))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 502, Short.MAX_VALUE)
            .addComponent(toolbar, javax.swing.GroupLayout.DEFAULT_SIZE, 502, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(toolbar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlField, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(btnAddall, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAddSchemeDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDelSchemeDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlRight, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnUp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initOthers() {
        if (list_all_field.isEmpty()) {
            List<TempFieldInfo> list = EntityBuilder.getCommFieldInfoListOf(cur_class, EntityBuilder.COMM_FIELD_VISIBLE);
            for (TempFieldInfo tfi : list) {
                list_all_field.add(tfi);
            }
        }
        int i = 0;
        for (TempFieldInfo tfi : list_all_field) {
            i++;
            tfi.setOrder_no(i);
            all_field_infos.put(tfi.getEntity_name() + "." + tfi.getField_name(), tfi);
        }
        fieldModel = new ShowFieldTreeModel(list_all_field);
        fieldTree = new JTree(fieldModel);
        HRRendererView.getCommMap().initTree(fieldTree);
        fieldTree.setRootVisible(false);
        fieldTree.setShowsRootHandles(true);
        pnlField.add(new JScrollPane(fieldTree), BorderLayout.CENTER);
        entity_name = module_code + "." + cur_class.getSimpleName();
        if (curShowScheme == null) {
            curShowScheme = (ShowScheme) CommUtil.fetchEntityBy("from ShowScheme ss left join fetch ss.showSchemeDetails ssd left join fetch ss.showSchemeOrders where ss.entity_name='" + entity_name + "' and ss.person_code='" + UserContext.person_code + "' ");
        }
        if (curShowScheme == null) {
            curShowScheme = new ShowScheme();
            curShowScheme.setShowScheme_key(entity_name + "_" + UserContext.person_code);
            curShowScheme.setGroup_flag(false);
        }
        showTree = new JTree(rootNode);
        HRRendererView.getCommMap().initTree(showTree);
        showTree.setRootVisible(false);
        showTree.expandRow(0);
        showTree.setShowsRootHandles(true);
        pnlRight.add(new JScrollPane(showTree), BorderLayout.CENTER);
        setCurShowScheme(curShowScheme);
        popupMenu.add(searchField);
        leftSearchPanel = new SearchFieldsPanel(fieldTree);
        rightSearchPanel = new SearchFieldsPanel(showTree);
    }
    //设置当前方案，并根据该方案改变左右字段树显示

    private void setCurShowScheme(ShowScheme curShowScheme) {
        List<TempFieldInfo> list_Selected = new ArrayList<TempFieldInfo>();
        jcbGroup.setSelected(curShowScheme.isGroup_flag());
        List group_list = CommUtil.fetchEntities("from ShowFieldGroup sfg where sfg.entity_name='" + entity_name + "' and person_code in('sa','" + UserContext.person_code + "')");
        HashSet<String> group_name_list = new HashSet<String>();
        for (Object obj : group_list) {
            ShowFieldGroup sfg = (ShowFieldGroup) obj;
            if (UserContext.person_code.equals(sfg.getPerson_code())) {
                group_name_list.add(sfg.getGroup_name());
            }
        }
        if (group_name_list.isEmpty()) {
            for (Object obj : group_list) {
                ShowFieldGroup sfg = (ShowFieldGroup) obj;
                if (UserContext.sysManName.equals(sfg.getPerson_code())) {
                    group_name_list.add(sfg.getGroup_name());
                }
            }
        }
        if (curShowScheme.getShowSchemeDetails() != null && curShowScheme.getShowSchemeDetails().size() > 0) {
            for (ShowSchemeDetail ssd : curShowScheme.getShowSchemeDetails()) {
//                exist_details.put(ssd.getField_name(), ssd);
                Enumeration enumt = ((DefaultMutableTreeNode) fieldModel.getRoot()).breadthFirstEnumeration();
                while (enumt.hasMoreElements()) {
                    DefaultMutableTreeNode node = (DefaultMutableTreeNode) enumt.nextElement();
                    if (node.getUserObject() instanceof TempFieldInfo) {
                        TempFieldInfo tfi = (TempFieldInfo) node.getUserObject();
                        if ((tfi.getEntity_name() + "." + tfi.getField_name()).equals(ssd.getEntity_name() + "." + ssd.getField_name())) {
                            node.removeFromParent();
                            String group_name = ssd.getField_group();
                            if (group_name != null && !group_name.trim().equals("")) {
                                if (group_name_list.contains(group_name)) {
                                    tfi.setGroup_name(group_name);
                                } else {
                                    tfi.setGroup_name("");
                                    ssd.setField_group("");
                                }
                            } else {
                                tfi.setGroup_name(group_name);
                            }
                            list_Selected.add(tfi);
                            break;
                        }
                    }
                }
            }
        } else {
            for (TempFieldInfo tfi1 : list_default_field) {
                list_Selected.add(tfi1);
                Enumeration enumt = ((DefaultMutableTreeNode) fieldModel.getRoot()).breadthFirstEnumeration();
                while (enumt.hasMoreElements()) {
                    DefaultMutableTreeNode node = (DefaultMutableTreeNode) enumt.nextElement();
                    if (node.getUserObject() instanceof TempFieldInfo) {
                        TempFieldInfo tfi = (TempFieldInfo) node.getUserObject();
                        if (tfi.getField_name().equals(tfi1.getField_name())) {
                            node.removeFromParent();
                            break;
                        }
                    }
                }
            }
        }
        refreshShowTree(list_Selected);
        fieldTree.updateUI();
    }

    private void refreshShowTree(List<TempFieldInfo> select_fields) {
        rootNode.removeAllChildren();
        for (TempFieldInfo tfi : select_fields) {
            DefaultMutableTreeNode node = new DefaultMutableTreeNode(tfi);
            rootNode.add(node);
        }
        showTree.updateUI();
    }

    /**
     * 删除已选字段
     * @param all_flag：为True时表示将所有已选字段移除
     */
    private void delShowSchemeDetail(boolean all_flag) {
        List<TempFieldInfo> field_infos = new ArrayList<TempFieldInfo>();
        DefaultMutableTreeNode last_node = null;
        HashSet<DefaultMutableTreeNode> remove_nodes = new HashSet<DefaultMutableTreeNode>();
        if (all_flag) {
            Enumeration enumt = rootNode.breadthFirstEnumeration();
            while (enumt.hasMoreElements()) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) enumt.nextElement();
                if (node == rootNode) {
                    continue;
                }
                remove_nodes.add(node);
            }
        } else {
            TreePath[] select_path = showTree.getSelectionPaths();
            if (select_path == null || select_path.length == 0) {
                return;
            }
            for (TreePath tp : select_path) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) tp.getLastPathComponent();
                Object obj = node.getUserObject();
                if (obj instanceof String) {
                    Enumeration enumt = node.children();
                    while (enumt.hasMoreElements()) {
                        DefaultMutableTreeNode child = (DefaultMutableTreeNode) enumt.nextElement();
                        if (!remove_nodes.contains(child)) {
                            remove_nodes.add(child);
                        }
                    }
                    remove_nodes.add(node);
                } else if (obj instanceof TempFieldInfo) {
                    if (remove_nodes.contains(node)) {
                        continue;
                    }
                    remove_nodes.add(node);
                }
            }
        }
        List<DefaultMutableTreeNode> nodes = new ArrayList<DefaultMutableTreeNode>();
        for (DefaultMutableTreeNode node : remove_nodes) {
            Object obj = node.getUserObject();
            if (obj instanceof TempFieldInfo) {
                last_node = node.getNextSibling();
                if (last_node == null) {
                    last_node = node.getPreviousSibling();
                }
                if (last_node == null) {
                    last_node = (DefaultMutableTreeNode) node.getParent();
                }
                nodes.add(node);
                field_infos.add((TempFieldInfo) obj);
                node.removeFromParent();
            }
        }
        remove_nodes.removeAll(nodes);
        for (DefaultMutableTreeNode node : remove_nodes) {
            last_node = node.getPreviousSibling();
            if (last_node == null) {
                last_node = node.getNextSibling();
            }
            node.removeFromParent();
        }
        if (last_node != null) {
            showTree.clearSelection();
            showTree.addSelectionPath(new TreePath(last_node.getPath()));
        }
        showTree.updateUI();
        for (TempFieldInfo tfi : field_infos) {
            last_node = fieldModel.addNode(tfi);
        }
        if (last_node != null) {
            fieldTree.clearSelection();
            fieldTree.addSelectionPath(new TreePath(last_node.getPath()));
        }
        fieldTree.updateUI();
    }

    /**
     * 该方法用于增加显示字段
     * @param all_flag：是否将全部字段作为显示字段
     */
    private void addShowSchemeDetail(boolean all_flag) {
        List<TempFieldInfo> field_infos = new ArrayList<TempFieldInfo>();
        DefaultMutableTreeNode next_node = null;
        if (all_flag) {
            Enumeration enumt = ((DefaultMutableTreeNode) fieldModel.getRoot()).breadthFirstEnumeration();
            List<DefaultMutableTreeNode> nodes = new ArrayList<DefaultMutableTreeNode>();
            while (enumt.hasMoreElements()) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) enumt.nextElement();
                Object obj = node.getUserObject();
                if (obj instanceof String) {
                    continue;
                }
                TempFieldInfo tfi = (TempFieldInfo) obj;
                field_infos.add(tfi);
                nodes.add(node);
            }
            for (DefaultMutableTreeNode node : nodes) {
                next_node = node.getNextSibling();
                if (next_node == null) {
                    next_node = (DefaultMutableTreeNode) node.getParent();
                }
                node.removeFromParent();
            }
        } else {
            TreePath[] select_path = fieldTree.getSelectionPaths();
            Hashtable<String, TreePath> tree_path_keys = new Hashtable<String, TreePath>();
            for (TreePath tp : select_path) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) tp.getLastPathComponent();
                if (!(node.getUserObject() instanceof TempFieldInfo)) {
                    Enumeration enumt = node.children();
                    while (enumt.hasMoreElements()) {
                        DefaultMutableTreeNode child = (DefaultMutableTreeNode) enumt.nextElement();
                        TempFieldInfo tfi = (TempFieldInfo) child.getUserObject();
                        if (tree_path_keys.get(tfi.getField_name()) == null) {
                            tree_path_keys.put(tfi.getField_name(), new TreePath(child.getPath()));
                        }
                    }
                } else {
                    tree_path_keys.put(((TempFieldInfo) node.getUserObject()).getField_name(), tp);
                }
            }
            for (TreePath tp : tree_path_keys.values()) {
                Object[] objs = tp.getPath();
                for (Object obj : objs) {
                    if (obj instanceof DefaultMutableTreeNode) {
                        DefaultMutableTreeNode node = (DefaultMutableTreeNode) obj;
                        next_node = node.getNextSibling();
                        if (next_node == null) {
                            next_node = (DefaultMutableTreeNode) node.getParent();
                        }
                        if (node.getUserObject() instanceof TempFieldInfo) {
                            field_infos.add((TempFieldInfo) node.getUserObject());
                            node.removeFromParent();
                        }
                    }
                }
            }
        }
        SysUtil.sortListByInteger(field_infos, "order_no");
        fieldTree.clearSelection();
        if (next_node != null && next_node.getPath() != null) {
            fieldTree.addSelectionPath(new TreePath(next_node.getPath()));
        }
        fieldTree.updateUI();
        DefaultMutableTreeNode child_node = null;
        if (showTree.getSelectionPath() != null && showTree.getSelectionPath().getLastPathComponent() != showTree.getModel().getRoot()) {
            child_node = (DefaultMutableTreeNode) showTree.getLastSelectedPathComponent();
        }
        for (TempFieldInfo tfi : field_infos) {
            next_node = new DefaultMutableTreeNode(tfi);
            if (child_node == null) {
                rootNode.add(next_node);
            } else {
                rootNode.insert(next_node, showTree.getRowForPath(new TreePath(child_node.getPath())) + 1);
                child_node = next_node;
            }
        }
        if (next_node != null) {
            TreeNode[] nodes = next_node.getPath();
            TreePath path = new TreePath(nodes);
            showTree.expandPath(path);
            showTree.setSelectionPath(path);
            showTree.scrollPathToVisible(path);
        }
        showTree.updateUI();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddSchemeDetail;
    private javax.swing.JButton btnAddall;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnDelSchemeDetail;
    private javax.swing.JButton btnDown;
    private javax.swing.JButton btnFieldGroup;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JCheckBox jcbGroup;
    private javax.swing.JPanel pnlField;
    private javax.swing.JPanel pnlRight;
    private javax.swing.JToolBar toolbar;
    // End of variables declaration//GEN-END:variables

    private void setupEvents() {
        showTree.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    delShowSchemeDetail(false);
                }
            }
        });
        leftSearchPanel.addPickCloseSearchPanelListener(new IPickCloseSearchPanelListener() {

            @Override
            public void closeSearchPanel() {
                pnlField.removeAll();
                pnlField.add(new JScrollPane(fieldTree), BorderLayout.CENTER);
                pnlField.updateUI();
            }
        });
        rightSearchPanel.addPickCloseSearchPanelListener(new IPickCloseSearchPanelListener() {

            @Override
            public void closeSearchPanel() {
                pnlRight.removeAll();
                pnlRight.add(new JScrollPane(showTree), BorderLayout.CENTER);
                pnlRight.updateUI();
            }
        });
        btnFieldGroup.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                List<TempFieldInfo> select_fields = new ArrayList<TempFieldInfo>();
                Enumeration enumt = rootNode.children();
                while (enumt.hasMoreElements()) {
                    select_fields.add((TempFieldInfo) ((DefaultMutableTreeNode) enumt.nextElement()).getUserObject());
                }
                ShowFieldGroupSetDlg sfgsDlg = new ShowFieldGroupSetDlg(JOptionPane.getFrameForComponent(btnFieldGroup), entity_name, list_all_field, select_fields);
                ContextManager.locateOnMainScreenCenter(sfgsDlg);
                sfgsDlg.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                sfgsDlg.setVisible(true);
                if (sfgsDlg.isClick_ok()) {
                    showTree.updateUI();
                }
            }
        });
        fieldTree.addMouseListener(new MouseAdapter() {

            @Override
            public void mousePressed(MouseEvent e) {
                if (e.getButton() == 3) {
                    search_type = 0;
                    popupMenu.show(fieldTree, e.getX(), e.getY());
                }
            }

            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    if (fieldTree.getSelectionPath() == null) {
                        return;
                    }
                    Object obj = ((DefaultMutableTreeNode) fieldTree.getSelectionPath().getLastPathComponent()).getUserObject();
                    if (obj instanceof TempFieldInfo) {
                        addShowSchemeDetail(false);
                    }
                }
            }
        });
        showTree.addMouseListener(new MouseAdapter() {

            @Override
            public void mousePressed(MouseEvent e) {
                if (e.getButton() == 3) {
                    search_type = 1;
                    popupMenu.show(showTree, e.getX(), e.getY());
                }
            }
        });
        searchField.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (search_type == 0) {
                    if (pnlField.getComponentCount() == 1) {
                        pnlField.removeAll();
                        pnlField.add(new JScrollPane(fieldTree), BorderLayout.CENTER);
                        pnlField.add(leftSearchPanel, BorderLayout.SOUTH);
                        pnlField.updateUI();
                    }
                } else if (pnlRight.getComponentCount() == 1) {
                    pnlRight.removeAll();
                    pnlRight.add(new JScrollPane(showTree), BorderLayout.CENTER);
                    pnlRight.add(rightSearchPanel, BorderLayout.SOUTH);
                    pnlRight.updateUI();
                }

            }
        });
        btnSave.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                saveShowScheme();
            }
        });
        btnClose.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                click_ok = false;
                dispose();
            }
        });
        btnAddSchemeDetail.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                addShowSchemeDetail(false);
            }
        });

        btnAddall.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                addShowSchemeDetail(true);
            }
        });

        btnDelSchemeDetail.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                delShowSchemeDetail(false);
            }
        });

        btnUp.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                updetail(-1);
            }
        });
        btnDown.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                updetail(1);
            }
        });
        btnClear.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                delShowSchemeDetail(true);
            }
        });
    }

    /**
     * 向上/下移动节点顺序
     * @param step：1，向上;-1向下
     */
    private void updetail(int step) {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) showTree.getLastSelectedPathComponent();
        if (node == null) {
            return;
        }
        Object obj = node.getUserObject();
        if (obj instanceof String) {
            return;
        }
        DefaultMutableTreeNode parent_node = (DefaultMutableTreeNode) node.getParent();
        int child_count = parent_node.getChildCount();
        if (child_count <= 1) {
            return;
        }
        int ind = parent_node.getIndex(node);
        ind = ind + step;
        node.removeFromParent();
        if (ind == -1) {
            parent_node.add(node);
        } else {
            if (ind >= child_count) {
                ind = 0;
            }
            parent_node.insert(node, ind);
        }
        showTree.clearSelection();
        showTree.addSelectionPath(new TreePath(node.getPath()));
        showTree.updateUI();
    }
    //保存方案

    private void saveShowScheme() {
        boolean grouped = jcbGroup.isSelected();
        Enumeration enumt = rootNode.breadthFirstEnumeration();
        List<TempFieldInfo> selected_fields = new ArrayList<TempFieldInfo>();
        fields.clear();
        while (enumt.hasMoreElements()) {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) enumt.nextElement();
            Object obj = node.getUserObject();
            if (obj instanceof TempFieldInfo) {
                TempFieldInfo tfi = (TempFieldInfo) obj;
                selected_fields.add(tfi);
                fields.add(tfi.getField_name());
            }
        }
        if (selected_fields.isEmpty()) {
            JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent(btnSave), "未选择任何字段");
            return;
        }
        curShowScheme.setEntity_name(module_code + "." + cur_class.getSimpleName());
        curShowScheme.setPerson_code(UserContext.person_code);
        curShowScheme.setUsed_flag(true);
        curShowScheme.setGroup_flag(grouped);
        Set<ShowSchemeDetail> fields1 = new HashSet<ShowSchemeDetail>();
        int len = selected_fields.size();
        for (int i = 0; i < len; i++) {
            TempFieldInfo tfi = (TempFieldInfo) selected_fields.get(i);
            ShowSchemeDetail ssd = (ShowSchemeDetail) UtilTool.createUIDEntity(ShowSchemeDetail.class);
            ssd.setShowScheme(curShowScheme);
            ssd.setField_caption(tfi.getCaption_name());
            ssd.setField_name(tfi.getField_name());
            ssd.setOrder_no(i);
            ssd.setEntity_name(tfi.getEntity_name());
            ssd.setEntity_caption(tfi.getEntity_caption());
            ssd.setField_group(tfi.getGroup_name());
            fields1.add(ssd);
        }
        curShowScheme.setShowSchemeDetails(fields1);
        if (save_flag) {
            ValidateSQLResult result = null;
            result = CommImpl.saveShowScheme(curShowScheme, "detail");
            if (result != null && result.getResult() != 0) {
                curShowScheme = (ShowScheme) CommUtil.fetchEntityBy("from ShowScheme ss left join fetch ss.showSchemeDetails ssd left join fetch ss.showSchemeOrders where ss.entity_name='" + entity_name + "' and ss.person_code='" + UserContext.person_code + "' ");
                JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent(btnClose), "保存方案失败");
            }
            curShowScheme.setNew_flag(0);
        }
        click_ok = true;
        dispose();
    }
}
