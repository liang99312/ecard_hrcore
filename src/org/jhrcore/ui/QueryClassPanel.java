/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * QueryClassPanel.java
 *
 * Created on 2011-4-7, 14:49:50
 */
package org.jhrcore.ui;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import org.apache.log4j.Logger;
import org.jhrcore.client.CommUtil;
import org.jhrcore.client.UserContext;
import org.jhrcore.entity.A01;
import org.jhrcore.entity.A01Chg;
import org.jhrcore.entity.annotation.ClassAnnotation;
import org.jhrcore.entity.query.QueryScheme;
import org.jhrcore.entity.salary.ValidateSQLResult;
import org.jhrcore.query3.QuerySchemePanel;
import org.jhrcore.rebuild.EntityBuilder;
import org.jhrcore.ui.action.CloseAction;
import org.jhrcore.ui.listener.IPickWindowCloseListener;

/**
 *
 * @author Administrator
 */
public class QueryClassPanel extends javax.swing.JPanel {

    private static Logger log = Logger.getLogger(QueryClassPanel.class.getName());
    private QuerySchemePanel querySchemePanel;
    private Class<?> entity_class;
    private QueryScheme queryScheme = null;
    private int save_flag = 1;
    private List<IPickWindowCloseListener> listeners = new ArrayList<IPickWindowCloseListener>();

    public void addIPickWindowCloseListener(IPickWindowCloseListener listener) {
        listeners.add(listener);
    }

    public void delIPickWindowCloseListener(IPickWindowCloseListener listener) {
        listeners.remove(listener);
    }

    /**
     * Creates new form QueryClassPanel
     */
    public QueryClassPanel(QueryScheme queryScheme, Class<?> entity_class) {
        this.queryScheme = queryScheme;
        this.entity_class = entity_class;
        initComponents();
        initOthers();
        setupEvents();
    }

    public QueryClassPanel(QueryScheme queryScheme, Class<?> entity_class, int save_flag) {
        this.save_flag = save_flag;
        this.queryScheme = queryScheme;
        this.entity_class = entity_class;
        initComponents();
        initOthers();
        setupEvents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlQuery = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        pnlQuery.setBorder(javax.swing.BorderFactory.createTitledBorder("条件设置"));
        pnlQuery.setLayout(new java.awt.BorderLayout());

        btnOk.setText("确定");

        btnCancel.setText("取消");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(287, Short.MAX_VALUE)
                .addComponent(btnOk)
                .addGap(60, 60, 60)
                .addComponent(btnCancel)
                .addGap(96, 96, 96))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnOk))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlQuery, javax.swing.GroupLayout.DEFAULT_SIZE, 557, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(pnlQuery, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOk;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel pnlQuery;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        querySchemePanel = new QuerySchemePanel(entity_class);
        if (entity_class.getSuperclass().getName().equals("org.jhrcore.entity.salary.Pay")) {
            List<String> list_subclass = EntityBuilder.getHt_subclasses().get(entity_class.getSuperclass().getName());
            for (String subclass_name : list_subclass) {
                Class sub_class;
                try {
                    sub_class = Class.forName(subclass_name);
                    if (sub_class.getSimpleName().equals(entity_class.getSimpleName())) {
                        continue;
                    }

                    ClassAnnotation ca0 = (ClassAnnotation) sub_class.getAnnotation(ClassAnnotation.class);
                    querySchemePanel.addQueryEntity(sub_class, ca0 == null ? sub_class.getName() : ca0.displayName(), sub_class.getSimpleName(), "4");
                } catch (ClassNotFoundException ex) {
                    log.error(ex);
                }
            }
        }
        if (entity_class.getSuperclass().getSimpleName().equals("Pay")) {
            querySchemePanel.addQueryEntity(A01.class, "人员信息", "A01", "5");
        } else if (entity_class.getSimpleName().equals("HT01")) {
            querySchemePanel.addQueryEntity(A01.class, "人员信息", "A01", "5");
        } else if (entity_class.getSimpleName().equals("BasePersonChange") || (entity_class.getSuperclass() != null && entity_class.getSuperclass().getSimpleName().equals("BasePersonChange"))) {
            querySchemePanel.addQueryEntity(A01Chg.class, "变动附表", "A01Chg", "3");
        }
        pnlQuery.add(querySchemePanel, BorderLayout.CENTER);
        querySchemePanel.setQueryScheme(queryScheme);
    }

    public void AddEntity(Class c, String entityCaption, String entityName, String type) {
        querySchemePanel.addQueryEntity(c, entityCaption, entityName, type);
    }

    private void setupEvents() {
        btnOk.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                saveScheme();
            }
        });

        CloseAction.doCloseAction(btnCancel);
    }

    private void saveScheme() {
        queryScheme = querySchemePanel.getQueryScheme();
//        if (queryScheme.getConditions().isEmpty()) {
//            JOptionPane.showMessageDialog(null, "未选择任何条件!", "错误", JOptionPane.ERROR_MESSAGE);
//            return;
//        }
        queryScheme.setPerson_code(UserContext.person_code);
        queryScheme.setCondition_expression(querySchemePanel.getQueryText());
        if (save_flag == 1) {
            ValidateSQLResult result = CommUtil.saveQueryScheme(queryScheme);
            if (result.getResult() == 0) {
                for (IPickWindowCloseListener listener : listeners) {
                    listener.pickClose();
                }
                JOptionPane.showMessageDialog(null, "保存成功");
                ModelFrame.close();
            } else {
                JOptionPane.showMessageDialog(null, "保存失败", "错误", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            for (IPickWindowCloseListener listener : listeners) {
                listener.pickClose();
            }
            ModelFrame.close();
        }
    }
}
