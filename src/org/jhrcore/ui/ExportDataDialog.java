/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ExportDataDialog.java
 *
 * Created on 2010-2-10, 11:56:49
 */
package org.jhrcore.ui;

import com.foundercy.pf.control.table.FTable;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import jxl.Workbook;
import jxl.format.Border;
import jxl.format.BorderLineStyle;
import jxl.format.Colour;
import jxl.format.UnderlineStyle;
import jxl.write.Alignment;
import jxl.write.Label;
import jxl.write.WritableCellFeatures;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import org.apache.log4j.Logger;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.swingbinding.JListBinding;
import org.jdesktop.swingbinding.SwingBindings;
import org.jhrcore.entity.base.TempFieldInfo;
import org.jhrcore.msg.CommMsg;
import org.jhrcore.ui.renderer.HRRendererView;
import org.jhrcore.util.FileChooserUtil;

/**
 *
 * @author mxliteboss
 */
public class ExportDataDialog extends javax.swing.JDialog {

    private List fields;
    private Hashtable<String, List<String>> field_keys;
    private JList jlsRight = new JList();
    private List<TempFieldInfo> right_list = new ArrayList<TempFieldInfo>();
    private JListBinding right_binding;
    private FTable fTable;
    private List<TempFieldInfo> all_fields = new ArrayList<TempFieldInfo>();
    private JTree fieldTree;
    //110615钟 当存在多个合并表头时，field_name无法区别，采用entity_name+field_name的方式区别,采用toString()方法,showEntity=true
    private HashSet<String> exist_fields = new HashSet<String>();
    private ShowFieldTreeModel model;
    private Logger log = Logger.getLogger(ExportDataDialog.class.getName());
    private String defaultName = "";

    /** Creates new form ExportDataDialog */
    public ExportDataDialog(java.awt.Frame parent, FTable ftable) {
        super(parent);
        this.setTitle("选择输出列");
        this.fTable = ftable;
        this.fields = ftable.getFields();
        this.field_keys = ftable.getField_keys();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        initComponents();
        initOthers();
        setupEvents();
    }
    
    public ExportDataDialog(java.awt.Frame parent, FTable ftable, String title, String defaultName)
  {
    super(parent);
    setTitle("选择输出列");
    this.fTable = ftable;
    this.fields = ftable.getFields();
    this.field_keys = ftable.getField_keys();
    setDefaultCloseOperation(2);
    initComponents();
    initOthers();
    setupEvents();
    System.out.println(title);
    this.jtfTitle.setText(title);
    this.defaultName = defaultName;
  }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlLeft = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jcbOpen = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        pnlRight = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnRemoveAll = new javax.swing.JButton();
        btnUp = new javax.swing.JButton();
        btnDown = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jtfTitle = new javax.swing.JTextField();
        btnAddall = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);

        pnlLeft.setLayout(new java.awt.BorderLayout());

        btnOk.setText("确定");

        btnCancel.setText("取消");

        jcbOpen.setText("导出直接打开");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(191, 191, 191)
                .addComponent(jcbOpen)
                .addGap(18, 18, 18)
                .addComponent(btnOk, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOk)
                    .addComponent(btnCancel)
                    .addComponent(jcbOpen))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setText("未选列：");

        jLabel3.setText("已选列：");

        pnlRight.setLayout(new java.awt.BorderLayout());

        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/select_one.png"))); // NOI18N

        btnRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/remove_one.png"))); // NOI18N

        btnRemoveAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/remove_all.png"))); // NOI18N

        btnUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/move_up.png"))); // NOI18N

        btnDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/move_down.png"))); // NOI18N

        jLabel4.setText("标题：");

        btnAddall.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/select_all.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAddall, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnRemoveAll, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel2))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(btnUp, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDown, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3)
                    .addComponent(pnlRight, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtfTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(btnAddall, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRemoveAll, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(pnlLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(pnlRight, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(btnDown, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnUp, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAddall;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDown;
    private javax.swing.JButton btnOk;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnRemoveAll;
    private javax.swing.JButton btnUp;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JCheckBox jcbOpen;
    private javax.swing.JTextField jtfTitle;
    private javax.swing.JPanel pnlLeft;
    private javax.swing.JPanel pnlRight;
    // End of variables declaration//GEN-END:variables

    private TempFieldInfo createShowField(String entityName, String fieldName, int order_no) {
        TempFieldInfo tfi = new TempFieldInfo();
        tfi.setCaption_name(fieldName);
        tfi.setField_type("String");
        tfi.setField_name(fieldName);
        tfi.setEntity_caption(entityName);
        tfi.setEntity_name(entityName);
        tfi.setOrder_no(order_no);
        return tfi;
    }

    private void initOthers() {
        int i = 0;
        if (field_keys == null) {
            for (Object field : fields) {
                all_fields.add(createShowField("", field.toString(), i));
                i++;
            }
        } else {
            for (Object f : fields) {
                String group_key = f.toString();
                List<String> group_fields = field_keys.get(group_key);
                if (group_fields == null || group_fields.size() == 0) {
                    all_fields.add(createShowField("", group_key, i));
                    i++;
                } else {
                    for (String field : group_fields) {
                        TempFieldInfo tfi = createShowField(group_key, field, i);
                        tfi.setShowEntity(true);
                        all_fields.add(tfi);
                        i++;
                    }
                }
            }
        }
        right_binding = SwingBindings.createJListBinding(UpdateStrategy.READ_WRITE, right_list, jlsRight);
        right_binding.bind();
        model = new ShowFieldTreeModel(all_fields);
        fieldTree = new JTree(model);
        HRRendererView.getCommMap().initTree(fieldTree);
        fieldTree.setRootVisible(false);
        fieldTree.setShowsRootHandles(true);
        pnlLeft.add(new JScrollPane(fieldTree), BorderLayout.CENTER);
        pnlRight.add(new JScrollPane(jlsRight), BorderLayout.CENTER);
        SearchTreeFieldDialog.doQuickSearch("未选字段树", fieldTree);
        SearchListFieldDialog.doQuickSearch("已选字段", jlsRight);

    }

    private void setupEvents() {
        btnOk.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                ExportDataDialog.this.exportExcel(ExportDataDialog.this.defaultName);
            }
        });
        btnCancel.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });
        btnAdd.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                addDetail(false);
            }
        });
        btnAddall.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                addDetail(true);
            }
        });
        btnRemove.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                delDetail(false);
            }
        });
        btnRemoveAll.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                delDetail(true);
            }
        });
        btnUp.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                int select_index = jlsRight.getSelectedIndex();
                if (select_index != -1) {
                    upDetail(select_index);
                }
            }
        });
        btnDown.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                int select_index = jlsRight.getSelectedIndex();
                if (select_index != -1) {
                    downDetail(select_index);
                }
            }
        });
    }
    
    private void exportExcel(String defaultName)
  {
    File file = FileChooserUtil.getXLSExportFile(CommMsg.SELECTXLSFILE_MESSAGE, defaultName);
    if (file == null) {
      return;
    }
    WritableCellFormat textFormart = new WritableCellFormat();
    try
    {
      textFormart.setBorder(Border.ALL, BorderLineStyle.THIN, Colour.BLACK);
    }
    catch (WriteException ex)
    {
      this.log.error(ex);
    }
    Hashtable<String, Integer> mergeCell_keys = new Hashtable();
    for (TempFieldInfo tfi : this.right_list) {
      if (!tfi.getEntity_name().equals(""))
      {
        Integer i = (Integer)mergeCell_keys.get(tfi.getEntity_name());
        if (i == null) {
          i = Integer.valueOf(0);
        }
        Integer localInteger1 = i;Integer localInteger2 = i = Integer.valueOf(i.intValue() + 1);
        mergeCell_keys.put(tfi.getEntity_name(), i);
      }
    }
    int len = 0;
    for (TempFieldInfo tfi : this.right_list) {
      if (tfi.getEntity_name().equals("")) {
        len++;
      }
    }
    for (Integer key_len : mergeCell_keys.values()) {
      len += key_len.intValue();
    }
    try
    {
      WritableWorkbook workbook = Workbook.createWorkbook(file);
      WritableSheet sheet = workbook.createSheet("First Sheet", 0);
      WritableFont wfc = new WritableFont(WritableFont.ARIAL, 20, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);
      
      WritableCellFormat wcfFc = new WritableCellFormat(wfc);
      wcfFc.setAlignment(Alignment.CENTRE);
      wcfFc.setBorder(Border.ALL, BorderLineStyle.THIN, Colour.BLACK);
      Label label = new Label(0, 0, this.jtfTitle.getText(), wcfFc);
      WritableCellFeatures cellFeatures = new WritableCellFeatures();
      label.setCellFeatures(cellFeatures);
      sheet.addCell(label);
      sheet.mergeCells(0, 0, Math.max(len - 1, 0), 0);
      
      int j = 0;
      wfc = new WritableFont(WritableFont.ARIAL, 12, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);
      
      wcfFc = new WritableCellFormat(wfc);
      wcfFc.setAlignment(Alignment.CENTRE);
      wcfFc.setBorder(Border.ALL, BorderLineStyle.THIN, Colour.BLACK);
      int height = 1;
      if (mergeCell_keys.size() > 0) {
        height = 2;
      }
      for (TempFieldInfo tfi : this.right_list)
      {
        if (tfi.getEntity_name().equals(""))
        {
          label = new Label(j, 1, tfi.getCaption_name(), wcfFc);
          cellFeatures = new WritableCellFeatures();
          label.setCellFeatures(cellFeatures);
          sheet.addCell(label);
          sheet.mergeCells(j, 1, j, height);
        }
        else
        {
          Integer key_len = (Integer)mergeCell_keys.get(tfi.getEntity_name());
          if (key_len != null)
          {
            label = new Label(j, 1, tfi.getEntity_caption(), wcfFc);
            cellFeatures = new WritableCellFeatures();
            label.setCellFeatures(cellFeatures);
            sheet.addCell(label);
            sheet.mergeCells(j, 1, j + ((Integer)mergeCell_keys.get(tfi.getEntity_name())).intValue() - 1, 1);
            mergeCell_keys.remove(tfi.getEntity_name());
          }
          label = new Label(j, 2, tfi.getCaption_name(), wcfFc);
          cellFeatures = new WritableCellFeatures();
          label.setCellFeatures(cellFeatures);
          sheet.addCell(label);
        }
        j++;
      }
      int i = height + 1;
      for (Object obj : this.fTable.getObjects())
      {
        int col = 0;
        Object[] objs = (Object[])obj;
        for (TempFieldInfo exportDetail : this.right_list)
        {
          Object tmp_obj = objs[exportDetail.getOrder_no()];
          label = new Label(col, i, tmp_obj == null ? "" : tmp_obj.toString(), textFormart);
          sheet.addCell(label);
          col++;
        }
        i++;
      }
      workbook.write();
      workbook.close();
      dispose();
      if (this.jcbOpen.isSelected()) {
        Runtime.getRuntime().exec("cmd /c \"" + file.getPath() + "\"");
      }
    }
    catch (WriteException ex)
    {
      this.log.error(ex);
    }
    catch (IOException ex)
    {
      this.log.error(ex);
    }
  }

    private void exportExcel() {
        File file = FileChooserUtil.getXLSExportFile(CommMsg.SELECTXLSFILE_MESSAGE);
        if(file==null)
            return;
        WritableWorkbook workbook;
        WritableCellFormat textFormart = new WritableCellFormat();
        try {
            textFormart.setBorder(Border.ALL, BorderLineStyle.THIN, Colour.BLACK);
        } catch (WriteException ex) {
            log.error(ex);
        }
        Hashtable<String, Integer> mergeCell_keys = new Hashtable<String, Integer>();
        for (TempFieldInfo tfi : right_list) {
            if (tfi.getEntity_name().equals("")) {
                continue;
            }
            Integer i = mergeCell_keys.get(tfi.getEntity_name());
            if (i == null) {
                i = 0;
            }
            i++;
            mergeCell_keys.put(tfi.getEntity_name(), i);
        }
        int len = 0;
        for (TempFieldInfo tfi : right_list) {
            if (tfi.getEntity_name().equals("")) {
                len++;
            }
        }
        for (Integer key_len : mergeCell_keys.values()) {
            len = len + key_len;
        }
        try {
            workbook = Workbook.createWorkbook(file);
            WritableSheet sheet = workbook.createSheet("First Sheet", 0);
            jxl.write.WritableFont wfc = new jxl.write.WritableFont(WritableFont.ARIAL, 20,
                    WritableFont.BOLD, false,
                    UnderlineStyle.NO_UNDERLINE, jxl.format.Colour.BLACK);
            jxl.write.WritableCellFormat wcfFc = new jxl.write.WritableCellFormat(wfc);
            wcfFc.setAlignment(Alignment.CENTRE);
            wcfFc.setBorder(Border.ALL, BorderLineStyle.THIN, Colour.BLACK);
            Label label = new Label(0, 0, jtfTitle.getText(), wcfFc);
            WritableCellFeatures cellFeatures = new WritableCellFeatures();
            label.setCellFeatures(cellFeatures);
            sheet.addCell(label);
            sheet.mergeCells(0, 0, Math.max(len - 1, 0), 0);

            int j = 0;
            wfc = new jxl.write.WritableFont(WritableFont.ARIAL, 12,
                    WritableFont.BOLD, false,
                    UnderlineStyle.NO_UNDERLINE, jxl.format.Colour.BLACK);
            wcfFc = new jxl.write.WritableCellFormat(wfc);
            wcfFc.setAlignment(Alignment.CENTRE);
            wcfFc.setBorder(Border.ALL, BorderLineStyle.THIN, Colour.BLACK);
            int height = 1;
            if (mergeCell_keys.size() > 0) {
                height = 2;
            }
            for (TempFieldInfo tfi : right_list) {
                if (tfi.getEntity_name().equals("")) {
                    label = new Label(j, 1, tfi.getCaption_name(), wcfFc);
                    cellFeatures = new WritableCellFeatures();
                    label.setCellFeatures(cellFeatures);
                    sheet.addCell(label);
                    sheet.mergeCells(j, 1, j, height);
                } else {
                    Integer key_len = mergeCell_keys.get(tfi.getEntity_name());
                    if (key_len != null) {
                        label = new Label(j, 1, tfi.getEntity_caption(), wcfFc);
                        cellFeatures = new WritableCellFeatures();
                        label.setCellFeatures(cellFeatures);
                        sheet.addCell(label);
                        sheet.mergeCells(j, 1, j + mergeCell_keys.get(tfi.getEntity_name()) - 1, 1);
                        mergeCell_keys.remove(tfi.getEntity_name());
                    }
                    label = new Label(j, 2, tfi.getCaption_name(), wcfFc);
                    cellFeatures = new WritableCellFeatures();
                    label.setCellFeatures(cellFeatures);
                    sheet.addCell(label);
                }
                j++;
            }
            int i = height + 1;
            for (Object obj : fTable.getObjects()) {
                int col = 0;
                Object[] objs = (Object[]) obj;
                for (TempFieldInfo exportDetail : right_list) {
                    Object tmp_obj = objs[exportDetail.getOrder_no()];
                    label = new Label(col, i, tmp_obj == null ? "" : tmp_obj.toString(), textFormart);
                    sheet.addCell(label);
                    col++;
                }
                i++;
            }
            workbook.write();
            workbook.close();
            dispose();
            if (jcbOpen.isSelected()) {
                Runtime.getRuntime().exec("cmd /c \"" + file.getPath() + "\"");
            }
        } catch (WriteException ex) {
            log.error(ex);
        } catch (IOException ex) {
            log.error(ex);
        }
    }

    private void upDetail(int selectIndex) {
        TempFieldInfo tfi = (TempFieldInfo) right_list.get(selectIndex);
        right_list.remove(selectIndex);
        int cur_index = 0;
        if (selectIndex == 0) {
            cur_index = right_list.size();
            right_list.add(tfi);
        } else {
            right_list.add(selectIndex - 1, tfi);
            cur_index = selectIndex - 1;
        }
        right_binding.unbind();
        right_binding.bind();
        jlsRight.setSelectedIndex(cur_index);
    }

    private void downDetail(int selectIndex) {
        int cur_index = 0;
        TempFieldInfo tfi = (TempFieldInfo) right_list.get(selectIndex);
        right_list.remove(selectIndex);
        if (selectIndex == right_list.size()) {
            right_list.add(0, tfi);

        } else {
            right_list.add(selectIndex + 1, tfi);
            cur_index = selectIndex + 1;
        }
        right_binding.unbind();
        right_binding.bind();
        jlsRight.setSelectedIndex(cur_index);
    }

    private void addDetail(boolean all_flag) {
        List<TempFieldInfo> field_infos = new ArrayList<TempFieldInfo>();
        DefaultMutableTreeNode next_node = null;
        if (all_flag) {
            Enumeration enumt = ((DefaultMutableTreeNode) model.getRoot()).breadthFirstEnumeration();
            List<DefaultMutableTreeNode> nodes = new ArrayList<DefaultMutableTreeNode>();
            while (enumt.hasMoreElements()) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) enumt.nextElement();
                Object obj = node.getUserObject();
                if (obj instanceof TempFieldInfo) {
                    TempFieldInfo tfi = (TempFieldInfo) obj;
                    field_infos.add(tfi);
                    nodes.add(node);
                }
            }
            for (DefaultMutableTreeNode node : nodes) {
                next_node = node.getNextSibling();
                if (next_node == null) {
                    next_node = (DefaultMutableTreeNode) node.getParent();
                }
                node.removeFromParent();
            }
        } else {
            TreePath[] select_path = fieldTree.getSelectionPaths();
            Hashtable<String, TreePath> tree_path_keys = new Hashtable<String, TreePath>();
            for (TreePath tp : select_path) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) tp.getLastPathComponent();
                if (!(node.getUserObject() instanceof TempFieldInfo)) {
                    Enumeration enumt = node.children();
                    while (enumt.hasMoreElements()) {
                        DefaultMutableTreeNode child = (DefaultMutableTreeNode) enumt.nextElement();
                        TempFieldInfo tfi = (TempFieldInfo) child.getUserObject();
                        if (tree_path_keys.get(tfi.getField_name()) == null) {
                            tree_path_keys.put(tfi.getField_name(), new TreePath(child.getPath()));
                        }
                    }
                } else {
                    tree_path_keys.put(((TempFieldInfo) node.getUserObject()).getField_name(), tp);
                }
            }
            for (TreePath tp : tree_path_keys.values()) {
                Object[] objs = tp.getPath();
                for (Object obj : objs) {
                    if (obj instanceof DefaultMutableTreeNode) {
                        DefaultMutableTreeNode node = (DefaultMutableTreeNode) obj;
                        next_node = node.getNextSibling();
                        if (next_node == null) {
                            next_node = (DefaultMutableTreeNode) node.getParent();
                        }
                        if (node.getUserObject() instanceof TempFieldInfo) {
                            field_infos.add((TempFieldInfo) node.getUserObject());
                            node.removeFromParent();
                        }
                    }
                }
            }
        }
        fieldTree.clearSelection();
        fieldTree.addSelectionPath(new TreePath(next_node.getPath()));
        fieldTree.updateUI();
        Object select_obj = null;
        for (TempFieldInfo tfi : field_infos) {
            if (exist_fields.contains(tfi.toString())) {
                continue;
            }
            right_list.add(tfi);
            select_obj = tfi;
            exist_fields.add(tfi.toString());
        }
        right_binding.unbind();
        right_binding.bind();
        if (select_obj != null) {
            jlsRight.setSelectedValue(select_obj, true);
        }
    }

    private void delDetail(boolean all_flag) {
        if (jlsRight.getSelectedValue() == null && !all_flag) {
            return;
        }
        DefaultMutableTreeNode last_node = null;
        int[] scheme_indexs = jlsRight.getSelectedIndices();
        int last_index = 0;
        if (all_flag) {
            if (right_list.isEmpty()) {
                return;
            }
            exist_fields.clear();
            right_list.clear();
            ((ShowFieldTreeModel) fieldTree.getModel()).rebuild();
        } else {
            for (int cur_index : scheme_indexs) {
                TempFieldInfo tfi = right_list.get(cur_index);
                exist_fields.remove(tfi.toString());
                last_node = ((ShowFieldTreeModel) fieldTree.getModel()).addNode(tfi);
            }
            for (int i = scheme_indexs.length - 1; i >= 0; i--) {
                last_index = scheme_indexs[i];
                right_list.remove(scheme_indexs[i]);
            }
        }
        if (last_node == null) {
            last_node = (DefaultMutableTreeNode) ((DefaultMutableTreeNode) fieldTree.getModel().getRoot()).getFirstChild();
        }
        if (last_node == null) {
            last_node = (DefaultMutableTreeNode) fieldTree.getModel().getRoot();
        }
        fieldTree.clearSelection();
        TreePath path = new TreePath(last_node.getPath());
        fieldTree.expandPath(path);
        fieldTree.scrollPathToVisible(path);
        fieldTree.addSelectionPath(path);
        fieldTree.updateUI();
        last_index = last_index - 1;
        if (last_index < 0) {
            last_index = 0;
        }
        right_binding.unbind();
        right_binding.bind();
        if (right_list.size() > 0) {
            jlsRight.setSelectedIndex(last_index);
        }
        jlsRight.updateUI();
    }
}
