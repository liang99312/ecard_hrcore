/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * QueryParamDialog.java
 *
 * Created on 2009-2-28, 23:03:07
 */
package org.jhrcore.query3;

import com.fr.view.core.DateUtil;
import com.jgoodies.forms.builder.PanelBuilder;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Date;
import java.util.Hashtable;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTree;
import javax.swing.tree.TreeNode;
import org.jhrcore.entity.Code;
import org.jhrcore.comm.CodeManager;
import org.jhrcore.entity.DeptCode;
import org.jhrcore.entity.annotation.FieldAnnotation;
import org.jhrcore.entity.annotation.ObjectListHint;
import org.jhrcore.entity.query.Condition;
import org.jhrcore.entity.query.QueryScheme;
import org.jhrcore.ui.CheckTreeNode;
import org.jhrcore.ui.CodeEditor2;
import org.jhrcore.ui.ContextManager;
import org.jhrcore.ui.EditorFactory;

/**
 *
 * @author Administrator
 */
public class QueryParamDialog extends javax.swing.JDialog {

    private QueryScheme queryScheme;
    private boolean clickOk = false;
    private Hashtable<String, Object> tmp_HashTable = new Hashtable<String, Object>();
    private Hashtable<String, Component> editor_HashTable = new Hashtable<String, Component>();

    public boolean isClickOk() {
        return clickOk;
    }

    /** Creates new form QueryParamDialog */
    public QueryParamDialog(java.awt.Frame parent, QueryScheme queryScheme) {
        super(parent, true);
        this.queryScheme = queryScheme;
        initComponents();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        initUI();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        pnlEditor = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnOk.setText("确定");

        btnCancel.setText("取消");

        pnlEditor.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(386, Short.MAX_VALUE)
                .addComponent(btnOk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancel)
                .addContainerGap())
            .addComponent(pnlEditor, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(pnlEditor, javax.swing.GroupLayout.DEFAULT_SIZE, 497, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnOk))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOk;
    private javax.swing.JPanel pnlEditor;
    // End of variables declaration//GEN-END:variables

    public static boolean ShowQueryParamDialog(java.awt.Component fromcom, QueryScheme queryScheme) {
        boolean has_param = false;
        if (queryScheme == null) {
            return false;
        }
        for (Condition condition : queryScheme.getConditions()) {
            if (condition.getPara() != 0) {
                has_param = true;
                break;
            }
        }
        if (!has_param) {
            return true;
        }

        QueryParamDialog dlg = new QueryParamDialog(JOptionPane.getFrameForComponent(fromcom), queryScheme);
        ContextManager.locateOnScreenCenter(dlg);
        dlg.setVisible(true);

        return dlg.isClickOk();
    }

    private Object getBeanBy(Class<?> the_class, int order_no) {
        String map = the_class.getName() + "_" + order_no;
        Object obj = tmp_HashTable.get(map);
        if (obj == null) {
            try {
                obj = the_class.newInstance();
                tmp_HashTable.put(map, obj);
            } catch (InstantiationException ex) {
                Logger.getLogger(QueryParamDialog.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(QueryParamDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return obj;
    }

    private void setConditionValue(Condition condition) {
        Component com = editor_HashTable.get("" + condition.getOrder_no());
        if (com == null || !(com instanceof JScrollPane)) {
            return;
        }

        JScrollPane sp = (JScrollPane) com;
        String[] vals = new String[0];
        com = sp.getViewport().getComponent(0);
        if (com instanceof JTextArea) {
            String val = ((JTextArea) com).getText();
            vals = val.split(",");
        } else if (com instanceof JTree) {
            JTree tree = (JTree) com;
            CheckTreeNode rootNode = (CheckTreeNode) tree.getModel().getRoot();
            List<CheckTreeNode> list = new ArrayList<CheckTreeNode>();
            getAllNodeOf(rootNode, list);
            vals = new String[list.size()];
            if (condition.getBindName().toLowerCase().endsWith("deptcode.dept_code")) {
                for (int i = 0; i < list.size(); i++) {
                    DeptCode dept = (DeptCode) list.get(i).getUserObject();
                    vals[i] = dept.getDept_code();
                }
            } else if (condition.getBindName().toLowerCase().endsWith("deptcode.content")) {
                for (int i = 0; i < list.size(); i++) {
                    DeptCode dept = (DeptCode) list.get(i).getUserObject();
                    vals[i] = dept.getContent();
                }
            } else if (condition.getBindName().toLowerCase().endsWith("_code_")) {
                for (int i = 0; i < list.size(); i++) {
                    Code code = (Code) list.get(i).getUserObject();
                    vals[i] = code.getCode_id();
                }
            }
        } else if (com instanceof JPanel) {
            JPanel pnl_tmp = (JPanel) com;
            int num = 0;
            for (int i = 0; i < pnl_tmp.getComponentCount(); i++) {
                JCheckBox ch_box = (JCheckBox) pnl_tmp.getComponent(i);
                if (ch_box.isSelected()) {
                    num++;
                }
            }
            vals = new String[num];
            int ind = 0;
            for (int i = 0; i < pnl_tmp.getComponentCount(); i++) {
                JCheckBox ch_box = (JCheckBox) pnl_tmp.getComponent(i);
                if (ch_box.isSelected()) {
                    vals[ind++] = "" + (1 - i);
                }
            }
        }

        String tmp_operator = condition.getOperator();
        String tmp = tmp_operator.replaceAll("%", "").replaceAll("\\*", "");
        String val = "";
        for (int i = 0; i < vals.length; i++) {
            String s = vals[i];//"'" +vals[i] + "'";
            if (i == 0) {
                // val = "'" + tmp_operator.replaceAll(tmp, s) + "'";
                val = "'" + tmp_operator.replaceAll(tmp, s) + "'";
            } else {
                val = val + condition.getFieldName().replace("_code_", "") + " " + tmp + " '" + tmp_operator.replaceAll(tmp, s) + "'";
            }
            if (i != vals.length - 1) {
                val = val + " or ";
            }
        }
        condition.setFieldValue(val);
        //condition.setTmp_value((vals != null && vals.length > 0) ? vals : null);
    }

    public void getAllNodeOf(TreeNode rootNode, List<CheckTreeNode> list) {
        for (int i = 0; i < rootNode.getChildCount(); i++) {
            CheckTreeNode node = (CheckTreeNode) rootNode.getChildAt(i);
            if (node.isSelected()) {
                list.add(node);
            }
            if (!node.isLeaf()) {
                getAllNodeOf(node, list);
            }
        }
    }
    // 当条件是单参数，并且比较符是like的时候，保存对应的CodeEditor2，CodeEditor2允许用户直接输入编号或者名称
    // 索引为条件的主键condition_key
    private Hashtable<String, CodeEditor2> tab_CodeEditor2 = new Hashtable<String, CodeEditor2>();

    private void initUI() {
        String scol = "r:p, 3dlu, 180dlu";
        String srow = "";
        int param_count = 0;
        for (Condition condition : queryScheme.getConditions()) {
            if (condition.getPara() > 0) {
                param_count++;
                if (!srow.equals("")) {
                    srow = srow + ",";
                }
                srow = srow + "3dlu, t:p";
            }
        }
        FormLayout layout = new FormLayout(scol, srow);
        PanelBuilder builder = new PanelBuilder(layout);
        builder.setDefaultDialogBorder();
        CellConstraints cc = new CellConstraints();


        int row = 1;
        for (Condition condition : queryScheme.getConditions()) {
            if (condition.getPara() == 1) {
                builder.add(new JLabel(condition.getDisplayName().substring(condition.getDisplayName().lastIndexOf(".") + 1) + " " + condition.getOperator()), cc.xy(1, row * 2));
                try {
                    Class aclass = Class.forName(condition.getEntityFullName());
                    if (condition.getFieldName().contains("_code_") && condition.getOperator().contains("like")) {
                        CodeEditor2 ce =(CodeEditor2) EditorFactory.createEditorOf(getBeanBy(aclass, condition.getOrder_no()), condition.getFieldName());// createCodeEditor2(getBeanBy(aclass, condition.getOrder_no()), condition.getFieldName(), condition);
                        ce.textfield.setEditable(true);
                        tab_CodeEditor2.put(condition.getCondition_key(), ce);
                        builder.add(ce, cc.xy(3, row * 2));
                    } else {
                        builder.add(EditorFactory.createEditorOf(getBeanBy(aclass, condition.getOrder_no()), condition.getFieldName()), cc.xy(3, row * 2));
                    }
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(QueryParamDialog.class.getName()).log(Level.SEVERE, null, ex);
                }
                row++;
            } else if (condition.getPara() == 2) {
                builder.add(new JLabel(condition.getDisplayName().substring(condition.getDisplayName().lastIndexOf(".") + 1) + " " + condition.getOperator()), cc.xy(1, row * 2));
                try {
                    Class aclass = Class.forName(condition.getEntityFullName());
                    Component editorOf2 = EditorFactory.createParaEditorOf(getBeanBy(aclass, condition.getOrder_no()), condition.getFieldName());
                    editor_HashTable.put("" + condition.getOrder_no(), editorOf2);
                    builder.add(editorOf2, cc.xy(3, row * 2));
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(QueryParamDialog.class.getName()).log(Level.SEVERE, null, ex);
                }
                row++;
            }
        }

        JPanel pnl_tmp = builder.getPanel();
        pnlEditor.add(new JScrollPane(pnl_tmp), BorderLayout.CENTER);
        pnlEditor.updateUI();

        this.setPreferredSize(new Dimension(Math.min(this.getPreferredSize().width, pnl_tmp.getPreferredSize().width + 36), Math.min(pnl_tmp.getPreferredSize().height + 80, this.getPreferredSize().height)));
        this.setSize(this.getPreferredSize());
        btnOk.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                clickOk();
            }
        });
        btnCancel.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                clickOk = false;
                QueryParamDialog.this.dispose();
            }
        });
    }

    private void clickOk() {
        for (Condition condition3 : queryScheme.getConditions()) {
            if (condition3.getPara() == 2) {
                setConditionValue(condition3);
            } else if (condition3.getPara() == 1) {
                try {
                    Class aclass2 = Class.forName(condition3.getEntityFullName());
                    Object obj = EditorFactory.getValueBy(getBeanBy(aclass2, condition3.getOrder_no()), condition3.getFieldName());
                    if (condition3.getFieldName().contains("_code_") && condition3.getOperator().contains("like")) {
                        condition3.setFieldValue("'" + tab_CodeEditor2.get(condition3.getCondition_key()).textfield.getText() + "'");
                        continue;
                    }
                    condition3.setFieldValue("'" + (obj == null ? "GFEDCBA" : obj.toString()) + "'");
                    condition3.setTmp_value(obj);
                    if (obj == null) {
                        continue;
                    }
                    if (obj.getClass().getSimpleName().toLowerCase().equals("boolean")) {
                        Boolean bl = (Boolean) obj;
                        if (bl) {
                            condition3.setFieldValue("1");
                            condition3.setDisplayValue("是");
                        } else {
                            condition3.setFieldValue("0");
                            condition3.setDisplayValue("否");
                        }
                        condition3.setFieldType("Boolean");
                    } else if (obj.getClass().getSimpleName().equals("Date")) {
                        List<String> tmp_list = new ArrayList<String>();
                        String fieldName = condition3.getFieldName();
                        Field field = null;
                        int start_ind = 0;
                        for (int i = 0; i < fieldName.length(); i++) {
                            if (fieldName.charAt(i) == '.') {
                                tmp_list.add(fieldName.substring(start_ind, i));
                                start_ind = i + 1;
                            } else if (i == fieldName.length() - 1) {
                                tmp_list.add(fieldName.substring(start_ind));
                            }
                        }
                        for (int i = 0; i < tmp_list.size(); i++) {
                            String field_name = tmp_list.get(i);
                            try {
                                field = aclass2.getField(field_name);
                                aclass2 = field.getType();
                            } catch (NoSuchFieldException ex) {
                                Logger.getLogger(EditorFactory.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (SecurityException ex) {
                                Logger.getLogger(EditorFactory.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (IllegalArgumentException e) {
                                e.printStackTrace();
                            }
                        }
                        FieldAnnotation anno = field.getAnnotation(FieldAnnotation.class);
                        String format = (anno == null || anno.format() == null) ? "yyyy-MM-dd" : anno.format();
                        condition3.setFieldValue(DateUtil.DateToStr((Date) obj, format));
                    } else if (obj.getClass().getSimpleName().equals("Code")) {
                        // 如果按编码查询
                        //condition3.setFieldName(condition3.getBindName().replace("_code_", ""));
                        String field_name = "code_id";
                        Class aclass = obj.getClass();
                        try {
                            Method method = aclass.getMethod("get" + field_name.substring(0, 1).toUpperCase() + field_name.substring(1), new Class[]{});
                            obj = method.invoke(obj, new Object[]{});
                            if (obj != null) {
                                condition3.setFieldValue("'" + obj.toString() + "'");
                            }
                        } catch (IllegalArgumentException e1) {
                            e1.printStackTrace();
                        } catch (IllegalAccessException e1) {
                            e1.printStackTrace();
                        } catch (SecurityException e1) {
                            e1.printStackTrace();
                        } catch (NoSuchMethodException e1) {
                            e1.printStackTrace();
                        } catch (InvocationTargetException e1) {
                            e1.printStackTrace();
                        }
                    } else if (obj.getClass().getName().contains("entity")) {
                        // 如果按对象查询
                        String field_name = obj.getClass().getSimpleName().substring(0, 1).toLowerCase() + obj.getClass().getSimpleName().substring(1) + "_key";
                        //condition3.setFieldName(curTempField.getBindName() + "." + field_name);

                        Class aclass = obj.getClass();
                        try {
                            Method method = aclass.getMethod("get" + field_name.substring(0, 1).toUpperCase() + field_name.substring(1), new Class[]{});
                            obj = method.invoke(obj, new Object[]{});
                            if (obj != null) {
                                condition3.setFieldValue("'" + obj.toString() + "'");
                            }
                        } catch (IllegalArgumentException e1) {
                            e1.printStackTrace();
                        } catch (IllegalAccessException e1) {
                            e1.printStackTrace();
                        } catch (SecurityException e1) {
                            e1.printStackTrace();
                        } catch (NoSuchMethodException e1) {
                            e1.printStackTrace();
                        } catch (InvocationTargetException e1) {
                            e1.printStackTrace();
                        }
                    }
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(QueryParamDialog.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        clickOk = true;
        QueryParamDialog.this.dispose();
    }
}
