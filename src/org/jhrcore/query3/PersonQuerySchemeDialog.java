/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PaySendPersonDialog.java
 *
 * Created on 2008-12-17, 15:22:18
 */
package org.jhrcore.query3;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import org.jhrcore.client.CommUtil;
import org.jhrcore.entity.A01;
import org.jhrcore.util.UtilTool;
import org.jhrcore.entity.query.QueryScheme;
import org.jhrcore.entity.salary.ValidateSQLResult;
import org.jhrcore.ui.action.CloseAction;
import org.jhrcore.util.MsgUtil;

/**
 *
这是人员查询方案的编辑对话框，包括通用条件编辑和直接挑选，传入的参数为查询方案的类型
 * 
 *
 */
public class PersonQuerySchemeDialog extends javax.swing.JDialog {

    //private PaySystem cur_pay_system;
    private String scheme_type;
    private List scheme_list = new ArrayList();//当前体系对应人员方案
    private QueryScheme queryScheme;
    private int tabIndex = 0;
    private JComboBoxBinding scheme_binding;
    private QuerySchemePanel querySchemePanel;
    private List<IPickQuerySchemeListner> listeners = new ArrayList<IPickQuerySchemeListner>();

    public void addIPicQuerySchemeListner(IPickQuerySchemeListner listener) {
        listeners.add(listener);
    }

    public void delIPicQuerySchemeListner(IPickQuerySchemeListner listener) {
        listeners.remove(listener);
    }

    public QuerySchemePanel getQuerySchemePanel() {
        return querySchemePanel;
    }
    private QuerySchemePanel2 querySchemePanel2;

    public QueryScheme getQueryScheme() {
        return queryScheme;
    }

    public PersonQuerySchemeDialog(String scheme_type) {
        super();
        this.setTitle("常用查询");
        this.scheme_type = scheme_type;
        initComponents();
        initOthers();
        setupEvents();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        tabPaneMain = new javax.swing.JTabbedPane();
        pnlQuery = new javax.swing.JPanel();
        pnlQuery2 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jcbbSchema = new javax.swing.JComboBox();
        btnSave = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);

        pnlQuery.setLayout(new java.awt.BorderLayout());
        tabPaneMain.addTab("普通条件", pnlQuery);

        pnlQuery2.setLayout(new java.awt.BorderLayout());
        tabPaneMain.addTab("直观挑选", pnlQuery2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabPaneMain, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabPaneMain, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE)
        );

        jLabel1.setText("方案名：");

        btnSave.setText("保存");

        btnDel.setText("删除");

        btnCancel.setText("关闭");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbbSchema, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(btnSave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancel)
                .addContainerGap(151, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbbSchema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(btnSave)
                    .addComponent(btnDel)
                    .addComponent(btnCancel))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JComboBox jcbbSchema;
    private javax.swing.JPanel pnlQuery;
    private javax.swing.JPanel pnlQuery2;
    private javax.swing.JTabbedPane tabPaneMain;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        String hql = "from QueryScheme qs left join fetch qs.conditions where qs.queryEntity = 'A01' and qs.scheme_type='" + scheme_type + "' order by qs.queryScheme_key";
        scheme_list.addAll(CommUtil.fetchEntities(hql));
        QueryScheme tmp_queryScheme = (QueryScheme) UtilTool.createUIDEntity(QueryScheme.class);
        tmp_queryScheme.setQueryEntity("A01");
        tmp_queryScheme.setQuery_type(0);
        tmp_queryScheme.setScheme_type(scheme_type);
        scheme_list.add(0, tmp_queryScheme);
        querySchemePanel = new QuerySchemePanel(A01.class);
        pnlQuery.add(querySchemePanel, BorderLayout.CENTER);
        scheme_binding = SwingBindings.createJComboBoxBinding(UpdateStrategy.READ_WRITE, scheme_list, jcbbSchema);
        scheme_binding.bind();
        querySchemePanel2 = new QuerySchemePanel2();
        pnlQuery2.add(querySchemePanel2, BorderLayout.CENTER);
    }

    private void setupEvents() {
        btnSave.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                save(tabIndex);
            }
        });
        btnDel.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (queryScheme.getQueryScheme_key() == null) {
                    return;
                }

                if (JOptionPane.showConfirmDialog(PersonQuerySchemeDialog.this,
                        "确定要删除方案[" + queryScheme + "]吗?", "询问", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE) != JOptionPane.OK_OPTION) {
                    return;
                }
                String hql = "delete from condition where queryscheme_key='" + queryScheme.getQueryScheme_key() + "';";
                hql += " delete from queryscheme where queryscheme_key='" + queryScheme.getQueryScheme_key() + "'";
                ValidateSQLResult result = CommUtil.excuteSQLs(hql, ";");
                if (result.getResult() == 0) {
                    scheme_list.remove(jcbbSchema.getSelectedIndex());
                    scheme_binding.unbind();
                    scheme_binding.bind();
                    if (scheme_list.size() > 0) {
                        jcbbSchema.setSelectedIndex(scheme_list.size() - 1);
                    }
                } else {
                    MsgUtil.showHRDelErrorMsg(result);
                }

            }
        });
        CloseAction.doCloseAction(btnCancel);
        tabPaneMain.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                tabIndex = tabPaneMain.getSelectedIndex();
                if (tabIndex == 0) {
                    querySchemePanel.setQueryScheme(queryScheme);
                } else {
                    querySchemePanel2.setQueryScheme(queryScheme);
                }
            }
        });
        jcbbSchema.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                Object obj = jcbbSchema.getSelectedItem();
                if (obj == null) {
                    return;
                }
                queryScheme = (QueryScheme) obj;
                if (tabIndex == 0) {
                    querySchemePanel.setQueryScheme(queryScheme);
                } else {
                    querySchemePanel2.setQueryScheme(queryScheme);
                }
            }
        });
        jcbbSchema.setSelectedIndex(0);
    }

    private void save(int tabIndex) {
        if (tabIndex == 0) {
            if (queryScheme.getConditions().size() == 0) {
                JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent(btnSave), "未选择任何条件!", "错误", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        String schemeName = "";
        if (queryScheme.getNew_flag() == 1) {
            schemeName = JOptionPane.showInputDialog("请输入方案名:");
        } else {
            schemeName = queryScheme.getQueryScheme_name();
        }
        if (schemeName == null || schemeName.equals("")) {
            return;
        }
        queryScheme.setQueryScheme_name(schemeName);
        ValidateSQLResult result = CommUtil.saveQueryScheme(queryScheme);
        if (result.getResult() == 0) {
            scheme_list.set(jcbbSchema.getSelectedIndex(), queryScheme);
            scheme_binding.unbind();
            scheme_binding.bind();
            for (IPickQuerySchemeListner listener : listeners) {
                listener.addPickQueryScheme(queryScheme);
            }
        } else {
            MsgUtil.showHRSaveErrorMsg(result);
        }

    }
}
