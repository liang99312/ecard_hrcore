/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * QueryDeptPanel.java
 *
 * Created on 2009-3-21, 16:38:01
 */
package org.jhrcore.query3;

import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.tree.TreePath;
import org.jhrcore.client.CommUtil;
import org.jhrcore.client.UserContext;
import org.jhrcore.entity.DeptCode;
import org.jhrcore.entity.query.QueryScheme;
import org.jhrcore.ui.CheckTreeNode;
import org.jhrcore.ui.TreeSelectMod;
import org.jhrcore.ui.renderer.RenderderMap;

/**
 *
 * @author mxliteboss
 */
public class QueryDeptPanel extends javax.swing.JPanel {

    private QueryScheme queryScheme;
    private JTree dept_tree;
    private List<String> deptKeyList = new ArrayList<String>();
    public List<CheckTreeNode> getCheckedNodes() {
        List<CheckTreeNode> nodes = new ArrayList<CheckTreeNode>();
        CheckTreeNode parent = (CheckTreeNode) dept_tree.getModel().getRoot();
        Enumeration enumt = parent.breadthFirstEnumeration();
        while (enumt.hasMoreElements()) {
            CheckTreeNode node = (CheckTreeNode) enumt.nextElement();
            if (node.isSelected()) {
                nodes.add(node);
            }
        }
        return nodes;
    }

    public List<DeptCode> getCheckedDepts() {
        List<DeptCode> nodes = new ArrayList<DeptCode>();
        CheckTreeNode parent = (CheckTreeNode) dept_tree.getModel().getRoot();
        Enumeration enumt = parent.breadthFirstEnumeration();
        while (enumt.hasMoreElements()) {
            CheckTreeNode node = (CheckTreeNode) enumt.nextElement();
            if (node.isSelected()) {
                nodes.add((DeptCode) node.getUserObject());
            }
        }
        return nodes;
    }

    public String getCheckedDeptString() {
        StringBuffer result = new StringBuffer();
        CheckTreeNode parent = (CheckTreeNode) dept_tree.getModel().getRoot();
        Enumeration enumt = parent.breadthFirstEnumeration();
        while (enumt.hasMoreElements()) {
            CheckTreeNode node = (CheckTreeNode) enumt.nextElement();
            if (node.isSelected()) {
                result.append("'");
                result.append(((DeptCode) node.getUserObject()).getDeptCode_key());
                result.append("',");
            }
        }
        result.append("'-1'");
        return result.toString();
    }

    public QueryScheme getQueryScheme() {
        return queryScheme;
    }

    public void setQueryScheme(QueryScheme queryScheme) {
        this.queryScheme = queryScheme;
        List list = CommUtil.fetchEntities("select deptCode_key from DeptCode where deptCode_key in(" + (queryScheme.getQuery_text() == null ? "''" : queryScheme.getQuery_text()) + ")");
        setCheckNodes(list);
    }

    public void setCheckNodes(List list) {
        if (list != null) {
            Set<String> select_keys = new HashSet<String>();
            for (Object obj : list) {
                select_keys.add(obj.toString());
            }
            CheckTreeNode select_node = null;
            Enumeration enumt = ((CheckTreeNode) dept_tree.getModel().getRoot()).breadthFirstEnumeration();
            while (enumt.hasMoreElements()) {
                CheckTreeNode cNode = (CheckTreeNode) enumt.nextElement();
                Object obj = cNode.getUserObject();
                if (obj instanceof DeptCode) {
                    if (select_keys.contains(((DeptCode) obj).getDeptCode_key())) {
                        cNode.setSelected(true);
                        select_node = cNode;
                    } else {
                        cNode.setSelected(false);
                    }
                }
            }
            if (select_node != null) {
                dept_tree.addSelectionPath(new TreePath(select_node.getPath()));
                dept_tree.expandPath(new TreePath(select_node.getPath()));
            }
        }
        dept_tree.updateUI();
    }

    /** Creates new form QueryDeptPanel */
    public QueryDeptPanel() {
        initComponents();
        initOthers();
    }
    public QueryDeptPanel(List<String> deptKeyList) {
        this.deptKeyList.clear();
        if(deptKeyList != null){
            this.deptKeyList.addAll(deptKeyList);
        }
        initComponents();
        initOthers();
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    private void initOthers() {
        CheckTreeNode parent_node = new CheckTreeNode("所有部门");
        List<DeptCode> list = UserContext.getDepts(false);
        CheckTreeNode tmp = parent_node;
        boolean k_flag = deptKeyList.isEmpty();
        for (Object obj1 : list) {
            DeptCode dept = (DeptCode) obj1;
            if (!k_flag) {
                if (!deptKeyList.contains(dept.getDeptCode_key())) {
                    continue;
                }
            }
            while (tmp != parent_node && !((DeptCode) tmp.getUserObject()).getDept_code().equals(
                    dept.getParent_code())) {
                tmp = (CheckTreeNode) tmp.getParent();
            }
            CheckTreeNode cur = new CheckTreeNode(dept);
            tmp.add(cur);
            tmp = cur;
        }
        dept_tree = new JTree(parent_node);
        new RenderderMap().initTree(dept_tree, TreeSelectMod.nodeCheckMod);
        dept_tree.setRootVisible(false);
        dept_tree.setShowsRootHandles(true);
        dept_tree.setExpandsSelectedPaths(true);
        this.add(new JScrollPane(dept_tree), BorderLayout.CENTER);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
