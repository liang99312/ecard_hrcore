/*
 * PickFieldComparePanel.java
 *
 * Created on 2008年11月10日, 下午1:59
 */
package org.jhrcore.query3;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Date;
import java.util.Hashtable;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.apache.log4j.Logger;
import org.jdesktop.beansbinding.AutoBinding;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.BindingGroup;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.JListBinding;
import org.jdesktop.swingbinding.SwingBindings;
import org.jhrcore.util.DateUtil;
import org.jhrcore.comm.CodeManager;
import org.jhrcore.entity.A01;
import org.jhrcore.util.UtilTool;
import org.jhrcore.entity.annotation.FieldAnnotation;
import org.jhrcore.entity.annotation.ObjectListHint;
import org.jhrcore.entity.query.Condition;
import org.jhrcore.entity.query.QueryScheme;
import org.jhrcore.mutil.QueryUtil;
import org.jhrcore.ui.CodeEditor2;
import org.jhrcore.ui.ContextManager;
import org.jhrcore.ui.EditorFactory;
import org.jhrcore.ui.SearchListFieldDialog;

/**
 *
 * @author  Owner
 */
public class QuerySchemePanel extends JPanel {

    private static Logger log = Logger.getLogger(QuerySchemePanel.class.getName());
    private QueryScheme queryScheme;
    private BindingGroup bindingGroup = null;
    private Class<?> entity_class;
    private TempField curTempField = null;
    private Binding binding_condition;
    private Hashtable<String, Object> tmp_HashTable = new Hashtable<String, Object>();
    private String cur_exp = "";
    private List<TempEntity> listTempEntity = new ArrayList<TempEntity>();
    // 是否包含集合类型字段
    private boolean include_set_field = true;
    private JListBinding jListBinding_Field = null;
    private JComboBoxBinding jcomboBoxBindingEntity;
    private CodeEditor2 codeEditor2 = null;
    private boolean no_para = false;
    private boolean single = false;//是否单表查询

    public QueryScheme getQueryScheme() {
        return queryScheme;
    }

    public String getQueryText() {
        return txtQueryExp.getText().replace(" ", "");
    }

    public void setQueryScheme(QueryScheme queryScheme) {
        this.queryScheme = queryScheme;
        if (bindingGroup != null) {
            bindingGroup.unbind();
        }
        bindingGroup = new BindingGroup();
        BeanProperty beanP = BeanProperty.create("condition_expression");
        BeanProperty textP = BeanProperty.create("text_ON_ACTION_OR_FOCUS_LOST");
        Binding binding = Bindings.createAutoBinding(AutoBinding.UpdateStrategy.READ_WRITE, this.queryScheme,
                beanP, txtQueryExp, textP, "condition_expression");
        bindingGroup.addBinding(binding);
        binding_condition = SwingBindings.createJListBinding(AutoBinding.UpdateStrategy.READ_WRITE, this.queryScheme.getConditions(), selected_JList);
        bindingGroup.addBinding(binding_condition);
        bindingGroup.bind();
    }

    private Object getBeanBy(Class<?> the_class) {
        Object obj = tmp_HashTable.get(the_class.getName());
        if (obj == null) {
            try {
                obj = the_class.newInstance();
                tmp_HashTable.put(the_class.getName(), obj);
            } catch (InstantiationException ex) {
                log.error(ex);
            } catch (IllegalAccessException ex) {
                log.error(ex);
            }
        }
        return obj;
    }

    /** Creates new form PickFieldComparePanel */
    public QuerySchemePanel(Class<?> the_class) {
        this(the_class, false);
    }

    public QuerySchemePanel(Class<?> the_class, boolean single) {
        this.single = single;
        this.entity_class = the_class;
        initComponents();
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        pnlProp = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1_Fields = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbQueryCompare = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        btnInsert = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        panel1 = new javax.swing.JPanel();
        pnlEditor = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        selected_JList = new javax.swing.JList();
        jPanel4 = new javax.swing.JPanel();
        txtQueryExp = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        rb_fixValue = new javax.swing.JRadioButton();
        rb_single_param = new javax.swing.JRadioButton();
        rb_multi_param = new javax.swing.JRadioButton();
        cb_Entities = new javax.swing.JComboBox();
        btnAdvance = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();

        pnlProp.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setViewportView(jList1_Fields);

        pnlProp.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jLabel1.setText("属性列表:");

        jLabel2.setText("比较字符");

        jLabel3.setText("比较值");

        btnInsert.setText("增加");

        btnRemove.setText("删除");

        pnlEditor.setPreferredSize(new java.awt.Dimension(192, 25));
        pnlEditor.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlEditor, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                .addContainerGap())
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addComponent(pnlEditor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(selected_JList);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("逻辑表达方式："));

        jLabel4.setText("注：加号( + )表示并且关系，逗号( ,)表示或者关系");

        jLabel5.setText("    用( )可以确保优先关系，如：1+(2,3)");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(txtQueryExp, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(txtQueryExp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        buttonGroup1.add(rb_fixValue);
        rb_fixValue.setSelected(true);
        rb_fixValue.setText("固定值");

        buttonGroup1.add(rb_single_param);
        rb_single_param.setText("参数");

        buttonGroup1.add(rb_multi_param);
        rb_multi_param.setText("多参数");

        btnAdvance.setText("高级");

        btnEdit.setText("修改");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(112, 112, 112)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 187, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rb_fixValue)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rb_single_param)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rb_multi_param))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cb_Entities, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnlProp, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cmbQueryCompare, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnInsert)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnEdit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRemove)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAdvance)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(rb_fixValue)
                    .addComponent(rb_single_param)
                    .addComponent(rb_multi_param))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAdvance)
                            .addComponent(btnRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnInsert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnEdit))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbQueryCompare, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                            .addComponent(cb_Entities, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pnlProp, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdvance;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnRemove;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cb_Entities;
    private javax.swing.JComboBox cmbQueryCompare;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JList jList1_Fields;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel panel1;
    private javax.swing.JPanel pnlEditor;
    private javax.swing.JPanel pnlProp;
    private javax.swing.JRadioButton rb_fixValue;
    private javax.swing.JRadioButton rb_multi_param;
    private javax.swing.JRadioButton rb_single_param;
    private javax.swing.JList selected_JList;
    private javax.swing.JTextField txtQueryExp;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        //绑定操作符
        String compare[] = {"=", "<", "<=", ">", ">=", "<>", "like%", "not like%", "%like", "%not like", "%like%", "%not like%", "is null", "is not null"};
        List listCom = new ArrayList();
        for (String str : compare) {
            listCom.add(str);
        }
        JComboBoxBinding jcomboBoxBindingCom = SwingBindings.createJComboBoxBinding(UpdateStrategy.READ_WRITE, listCom, this.cmbQueryCompare);
        jcomboBoxBindingCom.bind();
        QueryUtil.createEntityFieldList(entity_class, "", "", entity_class.getSimpleName(), "", 1, single, include_set_field, entity_class, listTempEntity);
        jcomboBoxBindingEntity = SwingBindings.createJComboBoxBinding(UpdateStrategy.READ_WRITE, listTempEntity, cb_Entities);
        jcomboBoxBindingEntity.bind();
        List<Object[]> entities = QueryUtil.createEntities(entity_class);
        for (Object[] entity : entities) {
            addQueryEntity((Class) entity[0], entity[1].toString(), entity[2].toString(), entity[3].toString());
        }
    }
    // 增加额外的查询表，其中the_class2为要增加的表对应的类，entityDisplayName要增加的表对应的中文名称，entityName表示表名，fieldClassType表示增加的表和查询的表之间的关系。
    // 比如查询实体为A01，要增加的表为C21，addQueryEntity(C21.class, "工资主表", "C21", "4"); 其中4表示C21包含A01的主键
    // 比如查询实体为C21，要增加的表为A01，addQueryEntity(A01.class, "人员信息", "A01", "5"); 其中5表示查询表包含增加的表的主键
    // 比如查询实体为Dept，要增加的表为C21，addQueryEntity(C21.class, "工资主表", "A01;C21", "3;4"); 其中4表示增加的表包含A01的主键，3表示A01包含一个Dept的属性

    public void addQueryEntity(Class the_class2, String entityDisplayName, String entityName, String fieldClassType) {
        //String entityName = the_class2.getSimpleName();
        int level = 100;

        // 为了在查询工资其他表的时候可以看到部门信息，设置level=99，这样可以在查询条件中看到部门信息（通过C21的部门属性）
        if (entity_class.getSuperclass().getSimpleName().equals("Pay") && the_class2.getSimpleName().equals("C21")) {
            level = 99;
        }
        QueryUtil.createEntityFieldList(the_class2, entityName, entityDisplayName, entity_class.getSimpleName() + ";" + entityName, fieldClassType, level, single, include_set_field, entity_class, listTempEntity);
//        createEntityFieldList(the_class2, entityName, entityDisplayName, entity_class.getSimpleName() + ";" + entityName, fieldClassType, level);
        jcomboBoxBindingEntity.unbind();
        jcomboBoxBindingEntity.bind();
    }

    private void setupEvents() {
        selected_JList.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() != 2) {
                    return;
                }
                if (selected_JList.getSelectedValue() == null) {
                    return;
                }
                Condition condition3 = (Condition) selected_JList.getSelectedValue();
                editAdvanceCondition(condition3);
            }
        });
        btnAdvance.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                Condition condition3 = (Condition) UtilTool.createUIDEntity(Condition.class);
                condition3.setDisplayName("高级条件");
                condition3.setBindName("高级条件");
                condition3.setOperator(" ");
                editAdvanceCondition(condition3);
            }
        });
        btnEdit.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (selected_JList.getSelectedValue() == null) {
                    return;
                }
                Condition condition3 = (Condition) selected_JList.getSelectedValue();
                editCommCondition(condition3);
                editAdvanceCondition(condition3);
            }
        });
        cmbQueryCompare.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (cmbQueryCompare.getSelectedItem().equals("is null") || cmbQueryCompare.getSelectedItem().equals("is not null")) {
                    rb_fixValue.setSelected(true);
                    rb_fixValue.setEnabled(false);
                    rb_single_param.setEnabled(false);
                    rb_multi_param.setEnabled(false);
                } else {
                    rb_fixValue.setEnabled(true);
                    rb_single_param.setEnabled(true && !no_para);
                    rb_multi_param.setEnabled(true && !no_para);
                }
            }
        });
        ActionListener al = new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (cb_Entities.getSelectedItem() == null) {
                    return;
                }
                TempEntity te = (TempEntity) cb_Entities.getSelectedItem();
                if (jListBinding_Field != null) {
                    jListBinding_Field.unbind();
                }
                jListBinding_Field = SwingBindings.createJListBinding(UpdateStrategy.READ, te.getTempFields(), jList1_Fields);
                jListBinding_Field.bind();
            }
        };
        cb_Entities.addActionListener(al);
        jList1_Fields.addListSelectionListener(new ListSelectionListener() {

            private TempField sel_obj;

            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (jList1_Fields.getSelectedValue() == sel_obj) {
                    return;
                }
                sel_obj = (TempField) jList1_Fields.getSelectedValue();
                if (sel_obj == null) {
                    curTempField = null;
                    pnlEditor.removeAll();
                    pnlEditor.updateUI();
                    return;
                }
                curTempField = sel_obj;

                pnlEditor.removeAll();
                if (curTempField.getField_name().endsWith("_code_")) {
                    codeEditor2 = createCodeEditor2(getBeanBy(curTempField.getEntityClass()), curTempField.getField_name());
                    codeEditor2.textfield.setEditable(true);
                    pnlEditor.add(codeEditor2, BorderLayout.CENTER);
                } else {
                    codeEditor2 = null;
                    JComponent com = EditorFactory.createEditorOf(getBeanBy(curTempField.getEntityClass()), curTempField.getField_name());
                    pnlEditor.add(com, BorderLayout.CENTER);

                    if (curTempField.getField_name().equals("a0191")) {
                        Object obj = getBeanBy(curTempField.getEntityClass());
                        JComboBox cmBox = (JComboBox) com;
                        if (cmBox.getSelectedItem() != null) {
                            if (obj instanceof A01) {
                                ((A01) obj).setA0191(cmBox.getSelectedItem().toString());
                            }
                        }
                    }
                }
                pnlEditor.updateUI();
            }
        });
        SearchListFieldDialog.doQuickSearch("字段列表", jList1_Fields);
        btnInsert.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                // 修改查询类型为普通条件查询>>>>>>
                queryScheme.setQuery_type(0);
                //queryScheme.setQuery_text("");
                // 修改查询类型为普通条件查询<<<<<<

                Condition condition3 = (Condition) UtilTool.createUIDEntity(Condition.class);
                editCommCondition(condition3);
            }
        });
        btnRemove.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                Object obj = selected_JList.getSelectedValue();
                if (obj == null) {
                    return;
                }
                refreshConditonExp(0, false);
                queryScheme.setCondition_expression(cur_exp);
                bindingGroup.unbind();
                bindingGroup.bind();
                binding_condition.unbind();
                queryScheme.getConditions().remove((Condition) obj);
                for (int i = 0; i < queryScheme.getConditions().size(); i++) {
                    Condition condition3 = queryScheme.getConditions().get(i);
                    condition3.setOrder_no(i + 1);
                }
                binding_condition.bind();
            }
        });
        al.actionPerformed(null);
    }

    private void editCommCondition(Condition condition3) {
        if ("高级条件".equals(condition3.getDisplayName())) {
            return;
        }
        if (curTempField == null) {
            return;
        }
        Object obj = EditorFactory.getValueBy(getBeanBy(curTempField.getEntityClass()), curTempField.getField_name());
        if (curTempField.getField_name().endsWith("_code_")) {
            obj = codeEditor2.textfield.getText();
        }
        if ((obj == null || obj.toString().equals("")) && !rb_single_param.isSelected() && !rb_multi_param.isSelected()) {
            if (!cmbQueryCompare.getSelectedItem().equals("is null") && !cmbQueryCompare.getSelectedItem().equals("is not null")) {
                return;
            }
        }
        if (rb_fixValue.isSelected()) {
            condition3.setPara(0);
        }
        if (rb_single_param.isSelected()) {
            condition3.setPara(1);
        }
        if (rb_multi_param.isSelected()) {
            condition3.setPara(2);
        }
        condition3.setEntityFullName(curTempField.getEntityClass().getName());
        condition3.setEntityName(curTempField.getEntityClass().getSimpleName());
        condition3.setQueryScheme(queryScheme);
        condition3.setOperator(cmbQueryCompare.getSelectedItem().toString());
        condition3.setFieldType(curTempField.getFieldType());

        condition3.setDisplayName(curTempField.getDisplayBindName());
        condition3.setBindName(curTempField.getBindName());
        condition3.setFieldName(curTempField.getField_name());//(curTempField.getBindName());

        if (condition3.getPara() == 0) {
            condition3.setDisplayValue(obj == null ? "" : obj.toString());
            if (obj instanceof Date) {
                String format = curTempField.getFormat();
                condition3.setDisplayValue(DateUtil.DateToStr((Date) obj, format == null ? "yyyy-MM-dd" : format));
            }
        } else if (condition3.getPara() == 1) {
            condition3.setDisplayValue("?");
        } else {
            condition3.setDisplayValue("??");
        }
        if (condition3.getPara() == 0) {
            String tmp_value = (obj == null ? "" : obj.toString());
            String tmp_operator = condition3.getOperator();
            String tmp = tmp_operator.replaceAll("\\*", "");//.replace("%", "");
            tmp_value = "'" + tmp_operator.replace(tmp, tmp_value) + "'";

            //tmp_value = "'" + tmp_value + "'";
            condition3.setFieldValue(tmp_value);
            if (obj instanceof Date) {
                String format = curTempField.getFormat();
                condition3.setFieldValue(DateUtil.DateToStr((Date) obj, format == null ? "yyyy-MM-dd" : format));
                condition3.setTmp_value(obj);
            }
        }
        condition3.setEntityNames(curTempField.getEntityNames());
        condition3.setFieldClasses(curTempField.getFieldClasses());

        if (condition3.getPara() == 0 && obj != null) {
            if (obj.getClass().getSimpleName().toLowerCase().equals("float") || obj.getClass().getSimpleName().toLowerCase().equals("bigdecimal")) {
                condition3.setFieldValue(obj.toString());
                condition3.setFieldType("Float");
            } else if (obj.getClass().getSimpleName().toLowerCase().equals("integer")) {
                condition3.setFieldValue(obj.toString());
                condition3.setFieldType("Integer");
            } else if (obj.getClass().getSimpleName().toLowerCase().equals("boolean")) {
                Boolean bl = (Boolean) obj;
                if (bl) {
                    condition3.setFieldValue("1");
                    condition3.setDisplayValue("是");
                } else {
                    condition3.setFieldValue("0");
                    condition3.setDisplayValue("否");
                }
                condition3.setFieldType("Boolean");
            } else if (obj.getClass().getSimpleName().equals("Code")) {
                // 如果按编码查询
                condition3.setFieldName(curTempField.getBindName().replace("_code_", ""));
                String field_name = "code_id";
                Class aclass = obj.getClass();
                try {
                    Method method = aclass.getMethod("get" + field_name.substring(0, 1).toUpperCase() + field_name.substring(1), new Class[]{});
                    obj = method.invoke(obj, new Object[]{});
                    if (obj != null) {
                        condition3.setFieldValue("'" + obj.toString() + "'");
                    }
                } catch (IllegalArgumentException e1) {
                    e1.printStackTrace();
                } catch (IllegalAccessException e1) {
                    e1.printStackTrace();
                } catch (SecurityException e1) {
                    e1.printStackTrace();
                } catch (NoSuchMethodException e1) {
                    e1.printStackTrace();
                } catch (InvocationTargetException e1) {
                    e1.printStackTrace();
                }
            } else if (obj.getClass().getName().contains("entity")) {
                // 如果按对象查询
                String field_name = obj.getClass().getSimpleName().substring(0, 1).toLowerCase() + obj.getClass().getSimpleName().substring(1) + "_key";
                //condition3.setFieldName(curTempField.getBindName() + "." + field_name);

                Class aclass = obj.getClass();
                try {
                    Method method = aclass.getMethod("get" + field_name.substring(0, 1).toUpperCase() + field_name.substring(1), new Class[]{});
                    obj = method.invoke(obj, new Object[]{});
                    if (obj != null) {
                        condition3.setFieldValue("'" + obj.toString() + "'");
                    }
                } catch (IllegalArgumentException e1) {
                    e1.printStackTrace();
                } catch (IllegalAccessException e1) {
                    e1.printStackTrace();
                } catch (SecurityException e1) {
                    e1.printStackTrace();
                } catch (NoSuchMethodException e1) {
                    e1.printStackTrace();
                } catch (InvocationTargetException e1) {
                    e1.printStackTrace();
                }
            }
        }
        if (cmbQueryCompare.getSelectedItem().equals("is null") || cmbQueryCompare.getSelectedItem().equals("is not null")) {
            condition3.setFieldValue("");
            condition3.setDisplayValue("");
        }
        if (condition3.getNew_flag() == 1) {
            condition3.setOrder_no(queryScheme.getConditions().size() + 1);
            refreshConditonExp(condition3.getOrder_no(), true);
            queryScheme.setCondition_expression(cur_exp);
            bindingGroup.unbind();
            bindingGroup.bind();
            binding_condition.unbind();
            queryScheme.getConditions().add(condition3);
            binding_condition.bind();
            condition3.setNew_flag(0);
        } else {
            binding_condition.unbind();
            binding_condition.bind();
        }
    }

    private void editAdvanceCondition(Condition condition3) {
        if (!"高级条件".equals(condition3.getDisplayName())) {
            return;
        }
        AdvanceConditionDlg dlg = new AdvanceConditionDlg(JOptionPane.getFrameForComponent(btnAdvance), listTempEntity);
        dlg.setQueryEntity(queryScheme.getQueryEntity());
        dlg.setConditionDisplay(condition3.getDisplayValue());
        ContextManager.locateOnScreenCenter(dlg);
        dlg.setVisible(true);
        if (!dlg.isClick_ok()) {
            return;
        }
        condition3.setQueryScheme(queryScheme);
        condition3.setDisplayValue(dlg.getConditionDisplay());
        condition3.setFieldValue(dlg.convertHQL());
        condition3.setBindName(dlg.convertSQL());
        if (condition3.getNew_flag() == 1) {
            condition3.setOrder_no(queryScheme.getConditions().size() + 1);
            refreshConditonExp(condition3.getOrder_no(), true);
            queryScheme.setCondition_expression(cur_exp);
            queryScheme.getConditions().add(condition3);
            bindingGroup.unbind();
            bindingGroup.bind();
            condition3.setNew_flag(0);
        }
        binding_condition.unbind();
        binding_condition.bind();
    }

    public void setNoPara() {
        no_para = true;
        rb_single_param.setEnabled(false);
        rb_multi_param.setEnabled(false);
    }

    private void refreshConditonExp(int order_no, boolean add_flag) {
        if (cur_exp == null || cur_exp.equals("")) {
            correctExp(queryScheme);
        }
        if (add_flag) {
            if (order_no == 1) {
                cur_exp = "1";
            } else {
                cur_exp += "+" + order_no;
            }
        } else {
            if (cur_exp.length() > 2) {
                cur_exp = cur_exp.substring(0, cur_exp.length() - 2);
            } else {
                cur_exp = "";
            }
        }
    }

    private void correctExp(QueryScheme queryScheme) {
        boolean isDelete = false;
        cur_exp = queryScheme.getCondition_expression();
        if (cur_exp == null || cur_exp.equals("")) {
            for (int i = 0; i < queryScheme.getConditions().size(); i++) {
                cur_exp = (i + 1) + "+";
                isDelete = true;
            }
        }
        if (cur_exp == null) {
            cur_exp = "";
        }
        if (isDelete) {
            cur_exp = cur_exp.substring(0, cur_exp.length() - 1);
        }
    }

    private CodeEditor2 createCodeEditor2(Object beanBy, String field_name) {
        Field field = null;
        Class aclass = beanBy.getClass();
        try {
            field = aclass.getField(field_name);
        } catch (NoSuchFieldException ex) {
            log.error(ex);
        } catch (SecurityException ex) {
            log.error(ex);
        } catch (IllegalArgumentException e) {
            log.error(e);
        }
        FieldAnnotation fieldAnnotation = field.getAnnotation(FieldAnnotation.class);
        ObjectListHint objHint = field.getAnnotation(ObjectListHint.class);
        String hql = objHint.hqlForObjectList();
        String code_type2 = hql.substring(hql.indexOf("=") + 1);
        final List codes = CodeManager.getCodeManager().getCodeListBy(code_type2);
        return new CodeEditor2(beanBy, fieldAnnotation, hql, field_name, codes);
    }
}
