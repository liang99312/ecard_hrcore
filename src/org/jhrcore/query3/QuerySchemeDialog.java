/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewJDialog.java
 *
 * Created on 2009-2-5, 21:45:25
 */
package org.jhrcore.query3;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.apache.log4j.Logger;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import org.jhrcore.client.CommUtil;
import org.jhrcore.client.UserContext;
import org.jhrcore.util.UtilTool;
import org.jhrcore.entity.query.QueryScheme;
import org.jhrcore.entity.salary.ValidateSQLResult;
import org.jhrcore.ui.BeanPanel;
import org.jhrcore.ui.ValidateEntity;
import org.jhrcore.util.MsgUtil;

/**
 *
 * @author Administrator
 */
public class QuerySchemeDialog extends javax.swing.JDialog {

    private static Logger log = Logger.getLogger(QuerySchemePanel.class.getName());
    private QuerySchemePanel querySchemePanel;
    private Class<?> entity_class;
    private String scheme_type;
    private List<QueryScheme> listQueryScheme2 = new ArrayList<QueryScheme>();
    private JComboBoxBinding jcomboBoxBindingCom;
    private QueryScheme queryScheme = null;
    private List<IPickQuerySchemeListner> listeners = new ArrayList<IPickQuerySchemeListner>();

    public void addIPicQuerySchemeListner(IPickQuerySchemeListner listener) {
        listeners.add(listener);
    }

    public void delIPicQuerySchemeListner(IPickQuerySchemeListner listener) {
        listeners.remove(listener);
    }

    public QueryScheme getQueryScheme() {
        return queryScheme;
    }

    public QuerySchemePanel getQuerySchemePanel() {
        return querySchemePanel;
    }

    /** Creates new form NewJDialog */
    public QuerySchemeDialog(java.awt.Frame parent, Class<?> entity_class, String scheme_type) {
        super(parent, true);
        this.setTitle("自定义查询");
        this.entity_class = entity_class;
        this.scheme_type = scheme_type;
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        initComponents();
        initOther();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        btnSave = new javax.swing.JButton();
        btnSaveOther = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        tapMain = new javax.swing.JTabbedPane();
        pnlQuery = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        cmbScheme = new javax.swing.JComboBox();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        btnSave.setText("  保 存  ");
        btnSave.setFocusable(false);
        btnSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btnSave);

        btnSaveOther.setText("改方案名");
        btnSaveOther.setFocusable(false);
        btnSaveOther.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSaveOther.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btnSaveOther);

        btnDel.setText("  删 除  ");
        btnDel.setFocusable(false);
        btnDel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btnDel);

        pnlQuery.setLayout(new java.awt.BorderLayout());
        tapMain.addTab("条件查询", pnlQuery);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tapMain, javax.swing.GroupLayout.DEFAULT_SIZE, 617, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tapMain, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)
        );

        jLabel6.setText("查询方案：");

        cmbScheme.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnOk.setText("确 定");

        btnCancel.setText("取 消");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbScheme, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 243, Short.MAX_VALUE)
                .addComponent(btnOk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancel)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnOk, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cmbScheme, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 617, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnOk;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSaveOther;
    private javax.swing.JComboBox cmbScheme;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JPanel pnlQuery;
    private javax.swing.JTabbedPane tapMain;
    // End of variables declaration//GEN-END:variables

    private void initOther() {
        querySchemePanel = new QuerySchemePanel(entity_class);
//        if (entity_class.getSuperclass().getName().equals("org.jhrcore.entity.salary.Pay")) {
//            List<String> list_subclass = EntityBuilder.getHt_subclasses().get(entity_class.getSuperclass().getName());
//            for (String subclass_name : list_subclass) {
//                Class sub_class;
//                try {
//                    sub_class = Class.forName(subclass_name);
//                    if (sub_class.getSimpleName().equals(entity_class.getSimpleName())) {
//                        continue;
//                    }
//
//                    ClassAnnotation ca0 = (ClassAnnotation) sub_class.getAnnotation(ClassAnnotation.class);
//                    querySchemePanel.addQueryEntity(sub_class, ca0 == null ? sub_class.getName() : ca0.displayName(), sub_class.getSimpleName(), "5");
//                } catch (ClassNotFoundException ex) {
//                    log.error(ex);
//                }
//            }
//        }
//        if (entity_class.getSuperclass().getSimpleName().equals("Pay")) {
//            querySchemePanel.addQueryEntity(A01.class, "人员信息表", "A01", "5");
//            querySchemePanel.addQueryEntity(DeptCode.class, "部门信息表", "DeptCode", "5");
//            querySchemePanel.addQueryEntity(PayDeptBack.class, "历史部门表", "PayDeptBack", "5");
//        }else if (entity_class.getSimpleName().equals("HT01")) {
//            querySchemePanel.addQueryEntity(A01.class, "人员信息", "A01", "5");
//        }else if(entity_class.getSimpleName().equals("BasePersonChange")||(entity_class.getSuperclass()!=null&&entity_class.getSuperclass().getSimpleName().equals("BasePersonChange"))) {
//            querySchemePanel.addQueryEntity(A01Chg.class, "变动附表", "A01Chg", "3");
//        }else if(entity_class.getSimpleName().equals("K_card")) {
//            querySchemePanel.addQueryEntity(K_kqj.class, "考勤机表", "K_kqj", "5");
//        }else if(entity_class.getSimpleName().equals("In_info")){
//            querySchemePanel.addQueryEntity(A01.class, "人员信息", "A01", "5");
//        }else if(entity_class.getSuperclass()!=null&&"In_account".equals(entity_class.getSuperclass().getSimpleName())){
//            querySchemePanel.addQueryEntity(A01.class, "人员信息", "A01", "5");
//        }
        pnlQuery.add(querySchemePanel, BorderLayout.CENTER);
        refreshQueryScheme();
        cmbScheme.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (cmbScheme.getSelectedItem() == null) {
                    return;
                }
                querySchemePanel.setQueryScheme((QueryScheme) cmbScheme.getSelectedItem());
            }
        });

        jcomboBoxBindingCom = SwingBindings.createJComboBoxBinding(UpdateStrategy.READ_WRITE, listQueryScheme2, this.cmbScheme);
        jcomboBoxBindingCom.bind();
    }

    private void setupEvents() {
        btnCancel.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                queryScheme = null;
                QuerySchemeDialog.this.dispose();
            }
        });
        btnSave.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                saveScheme(false);
            }
        });
        btnDel.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                queryScheme = querySchemePanel.getQueryScheme();
                if (queryScheme == null || queryScheme.getNew_flag() == 1) {
                    return;
                }
                if (JOptionPane.showConfirmDialog(null, "你确定要删除方案【" + queryScheme.getQueryScheme_name() + "】吗?", "系统提示信息", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    String hql = "delete from condition where queryscheme_key='" + queryScheme.getQueryScheme_key() + "';";
                    hql += " delete from queryscheme where queryscheme_key='" + queryScheme.getQueryScheme_key() + "'";
                    ValidateSQLResult result = CommUtil.excuteSQLs(hql, ";");
                    if (result.getResult() == 0) {
                        listQueryScheme2.remove(cmbScheme.getSelectedIndex());
                        jcomboBoxBindingCom.unbind();
                        jcomboBoxBindingCom.bind();
                        cmbScheme.setSelectedIndex(0);
                    } else {
                        JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent(btnDel), "删除方案失败");
                    }
                }
            }
        });
        btnSaveOther.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                saveScheme(true);
            }
        });
        btnOk.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                queryScheme = querySchemePanel.getQueryScheme();
                QuerySchemeDialog.this.dispose();
            }
        });
    }

    private void refreshQueryScheme() {
        listQueryScheme2.clear();
        String hql = "from QueryScheme qs join fetch qs.conditions where qs.queryEntity = '" + entity_class.getSimpleName() + "' and scheme_type='" + scheme_type + "'";
        hql = hql + " and person_code='" + UserContext.person_code + "'";
        hql += " order by qs.make_date desc";
        listQueryScheme2.addAll((List<QueryScheme>) CommUtil.fetchEntities(hql));
        QueryScheme tmp_queryScheme = (QueryScheme) UtilTool.createUIDEntity(QueryScheme.class);
        tmp_queryScheme.setQueryEntity(entity_class.getSimpleName());
        tmp_queryScheme.setScheme_type(scheme_type);
        listQueryScheme2.add(0, tmp_queryScheme);
    }

    private void saveScheme(boolean save_flag) {
        queryScheme = querySchemePanel.getQueryScheme();
        if (queryScheme.getConditions().isEmpty()) {
            JOptionPane.showMessageDialog(null, "未选择任何条件!", "错误", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (save_flag || queryScheme.getNew_flag() == 1) {
            List<String> fields = new ArrayList<String>();
            ValidateEntity ve = new ValidateEntity() {

                @Override
                public boolean isEntityValidate(Object obj) {
                    QueryScheme qs = (QueryScheme) obj;
                    if (qs.getQueryScheme_name() == null || qs.getQueryScheme_name().trim().equals("")) {
                        JOptionPane.showMessageDialog(null, "方案名不可为空", "错误", JOptionPane.ERROR_MESSAGE);
                        return false;
                    }
                    return true;
                }
            };
            fields.add("queryScheme_name");
            QueryScheme qs = new QueryScheme();
            if (!BeanPanel.edit(qs, fields, "请输入方案名", ve)) {
                return;
            }
            queryScheme.setQueryScheme_name(qs.getQueryScheme_name());
        }
        queryScheme.setPerson_code(UserContext.person_code);
        queryScheme.setCondition_expression(querySchemePanel.getQueryText());
        ValidateSQLResult result = CommUtil.saveQueryScheme(queryScheme);
        if (result.getResult() == 0) {
            MsgUtil.showHRSaveSuccessMsg(btnOk);
            if (queryScheme.getNew_flag() == 1) {
                for (IPickQuerySchemeListner listener : listeners) {
                    listener.addPickQueryScheme(queryScheme);
                }
            }
            queryScheme.setNew_flag(0);
            refreshQueryScheme();
            jcomboBoxBindingCom.unbind();
            jcomboBoxBindingCom.bind();
            cmbScheme.setSelectedItem(queryScheme);
        } else {
            JOptionPane.showMessageDialog(null, "保存失败", "错误", JOptionPane.ERROR_MESSAGE);
        }
    }
}
