/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * QuerySchemePanel2.java
 *
 * Created on 2009-2-7, 21:33:47
 */
package org.jhrcore.query3;

import com.foundercy.pf.control.table.FTable;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JTextField;
import org.jhrcore.client.CommUtil;
import org.jhrcore.util.SysUtil;
import org.jhrcore.client.UserContext;
import org.jhrcore.util.PublicUtil;
import com.foundercy.pf.control.listener.IPickFieldOrderListener;
import com.foundercy.pf.control.listener.IPickQueryExListener;
import org.jhrcore.util.DbUtil;
import org.jhrcore.entity.query.QueryScheme;
import org.jhrcore.entity.A01;
import org.jhrcore.entity.DeptCode;
import org.jhrcore.entity.base.TempFieldInfo;
import org.jhrcore.entity.showstyle.ShowScheme;
import org.jhrcore.rebuild.EntityBuilder;
import org.jhrcore.ui.DeptPersonPanel;
import org.jhrcore.ui.listener.IPickDeptListener;
import org.jhrcore.ui.listener.IPickPersonClassListener;
import org.jhrcore.util.ComponentUtil;
import org.jhrcore.util.ImageUtil;

/**
 *
 * @author DB2INST3
 */
public class QuerySchemePanel2 extends javax.swing.JPanel {

    private QueryScheme queryScheme;
    private DeptPersonPanel deptPersonPanel;
    private FTable ftable;//当前部门人员
    private FTable ftable2;//已选择人员
    private Set<String> exist_person = new HashSet<String>();
    private boolean init_flag = false;
    private List<TempFieldInfo> all_fields = new ArrayList<TempFieldInfo>();
    private String query_order_sql = "A01.a0190";
    private String module_code = "QuerySchemePanel2";
    private JButton btnSearch = new JButton("", ImageUtil.getSearchIcon());
    private JTextField cbBoxSearch = new JTextField();
    private JCheckBox chbCurColumn = new JCheckBox("当前列", false);
    private JButton btnIn = new JButton("", ImageUtil.getIcon("move_down.png"));
    private JButton btnOut = new JButton("", ImageUtil.getIcon("move_up.png"));
    private StringBuffer strBuf;

    public QueryScheme getQueryScheme() {
        return queryScheme;
    }

    public void setQueryScheme(QueryScheme queryScheme) {
        this.queryScheme = queryScheme;
        ftable2.deleteAllRows();
        exist_person.clear();
        if (queryScheme.getQuery_text() != null && !queryScheme.getQuery_text().equals("")) {
            List list = CommUtil.fetchEntities("from A01 A01 join fetch A01.deptCode where A01.a0193=0 and A01.a01_key in (" + queryScheme.getQuery_text() + ")");
            if (list != null) {
                ftable2.setObjects(list);
                for (Object obj : list) {
                    A01 bp = (A01) obj;
                    exist_person.add(bp.getA01_key());
                }
                refleshStr();
            }

        }
    }

    /** Creates new form QuerySchemePanel2 */
    public QuerySchemePanel2() {
        initComponents();
        initOthers();
        setupEvents();
    }

    public void init() {
        if (!init_flag) {
            pickPerson(null, null);
        }
        init_flag = true;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        pnlPersonSelect = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        pnlDept = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        pnlTable = new javax.swing.JPanel();
        toolbar = new javax.swing.JToolBar();
        pnlPerson = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        pnlSelectTable = new javax.swing.JPanel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jSplitPane1.setDividerLocation(200);

        pnlDept.setLayout(new java.awt.BorderLayout());
        jSplitPane1.setLeftComponent(pnlDept);

        jSplitPane2.setDividerLocation(250);
        jSplitPane2.setDividerSize(3);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        toolbar.setFloatable(false);
        toolbar.setRollover(true);

        pnlPerson.setBorder(javax.swing.BorderFactory.createTitledBorder("当前人员："));

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout pnlPersonLayout = new javax.swing.GroupLayout(pnlPerson);
        pnlPerson.setLayout(pnlPersonLayout);
        pnlPersonLayout.setHorizontalGroup(
            pnlPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
        );
        pnlPersonLayout.setVerticalGroup(
            pnlPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pnlTableLayout = new javax.swing.GroupLayout(pnlTable);
        pnlTable.setLayout(pnlTableLayout);
        pnlTableLayout.setHorizontalGroup(
            pnlTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolbar, javax.swing.GroupLayout.DEFAULT_SIZE, 546, Short.MAX_VALUE)
            .addComponent(pnlPerson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlTableLayout.setVerticalGroup(
            pnlTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTableLayout.createSequentialGroup()
                .addComponent(toolbar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlPerson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane2.setTopComponent(pnlTable);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("已选人员："));

        pnlSelectTable.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlSelectTable.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlSelectTable, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlSelectTable, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
        );

        jSplitPane2.setRightComponent(jPanel11);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 527, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(jPanel9);

        javax.swing.GroupLayout pnlPersonSelectLayout = new javax.swing.GroupLayout(pnlPersonSelect);
        pnlPersonSelect.setLayout(pnlPersonSelectLayout);
        pnlPersonSelectLayout.setHorizontalGroup(
            pnlPersonSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 754, Short.MAX_VALUE)
        );
        pnlPersonSelectLayout.setVerticalGroup(
            pnlPersonSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 754, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(pnlPersonSelect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 529, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(pnlPersonSelect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JPanel pnlDept;
    private javax.swing.JPanel pnlPerson;
    private javax.swing.JPanel pnlPersonSelect;
    private javax.swing.JPanel pnlSelectTable;
    private javax.swing.JPanel pnlTable;
    private javax.swing.JToolBar toolbar;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        initToolBar();
        deptPersonPanel = new DeptPersonPanel(false, UserContext.getDepts(false));
        deptPersonPanel.setQuery_tab_flag(false);
        deptPersonPanel.setData_table_init_flag(false);
        deptPersonPanel.init();
        pnlDept.add(deptPersonPanel, BorderLayout.CENTER);
        List<TempFieldInfo> default_fields = new ArrayList<TempFieldInfo>();
        EntityBuilder.buildInfo(A01.class, all_fields, default_fields, "");
        EntityBuilder.buildInfo(DeptCode.class, all_fields, default_fields, "deptCode");
        ftable = new FTable(A01.class, false, false, false);
        ftable.setAll_fields(all_fields, default_fields, module_code);
        ftable.setRight_allow_flag(true);
        ftable.removeReplaceItem();
        jPanel2.add(ftable, BorderLayout.CENTER);
        ftable2 = new FTable(A01.class, false, false);
        ftable2.setAll_fields(all_fields, default_fields, module_code);
        pnlSelectTable.add(ftable2, BorderLayout.CENTER);
        refleshStr();
    }

    private void initToolBar() {
        toolbar.add(new JLabel("查找："));
        toolbar.add(cbBoxSearch);
        toolbar.add(btnSearch);
        toolbar.add(chbCurColumn);
        toolbar.add(btnIn);
        toolbar.add(btnOut);
        cbBoxSearch.setEditable(true);
        ComponentUtil.setSize(cbBoxSearch, 125, 22);
        ComponentUtil.setSize(btnIn, 22, 22);
        ComponentUtil.setSize(btnOut, 22, 22);
    }

    private void setupEvents() {
        ActionListener al = new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                String text = cbBoxSearch.getText();
                if (text.trim().equals("")) {
                    return;
                }
                locateEmp(text.toUpperCase());
            }
        };
        cbBoxSearch.addActionListener(al);
        btnSearch.addActionListener(al);
        ftable.addPickFieldOrderListener(new IPickFieldOrderListener() {

            @Override
            public void pickOrder(ShowScheme showScheme) {
                query_order_sql = SysUtil.getSQLOrderString(showScheme, query_order_sql, all_fields);
                pickPerson(null, ftable.getCur_query_scheme());
            }
        });
        ftable.addPickQueryExListener(new IPickQueryExListener() {

            @Override
            public void pickQuery(QueryScheme qs) {
                pickPerson(null, qs);
            }
        });
        btnIn.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                addPerson();
                refreshQueryScheme();
            }
        });
        btnOut.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                removePerson();
                refreshQueryScheme();
            }
        });
        deptPersonPanel.addPickDeptListener(new IPickDeptListener() {

            @Override
            public void pickDept(Object dept) {
                pickPerson(null, null);
            }
        });
        deptPersonPanel.addPickPersonClassListner(new IPickPersonClassListener() {

            @Override
            public void pickPersonClass(Class personClass) {
                pickPerson(null, null);
            }
        });
        pickPerson(null, null);
    }

    public List getSelectObjects() {
        return ftable2.getAllObjects();
    }

    private void locateEmp(String text) {
        String val = SysUtil.getQuickSearchText(text);
        String hql = "";
        if (chbCurColumn.isSelected()) {
            hql += "and (" + ftable.getQuickSearchSQL("A01", val) + ")";
        } else {
            hql += " and (upper(A01.pydm) like '" + val + "' or upper(A01.a0101) like '" + val + "' or upper(A01.a0177) like '" + val + "' or upper(A01.a0190) like '" + val + "' )";
        }
        pickPerson(hql, null);
    }

    private void pickPerson(String s_where, QueryScheme qs) {
        ftable.setCur_query_scheme(qs);
        Class person_class = deptPersonPanel.getPersonClass();
        DeptCode dept = (DeptCode) deptPersonPanel.getCurDept();
        String hql = "select A01.a01_key from A01,DeptCode where A01.deptCode_key=DeptCode.deptCode_key and A01.a0193=0";
        if (dept.isVirtual()) {
            hql += " and exists (select 1 from VirtualDeptPerson vdp,DEPTCODE d where vdp.A01_KEY=A01.A01_KEY AND vdp.deptcode_key=d.deptcode_key and d.dept_code like '" + dept.getDept_code() + "%')";
        } else {
            hql += " and DeptCode.dept_code like '" + dept.getDept_code() + "%'";
        }
        hql += " and (" + UserContext.getDept_right_rea_str("DeptCode") + ")";
        hql += " and (" + UserContext.getPerson_class_right_str(person_class, "A01") + ")";
        if (s_where != null) {
            hql += s_where;
        }
        if (qs != null) {
            hql += " and A01.a01_key in(" + qs.buildSql() + ")";
        }
        hql += " order by " + query_order_sql;
        PublicUtil.getProps_value().setProperty(A01.class.getName(), "from " + person_class.getSimpleName() + " bp join fetch bp.deptCode where bp.a01_key in");
        PublicUtil.getProps_value().setProperty(person_class.getName(), "from " + person_class.getSimpleName() + " bp join fetch bp.deptCode where bp.a01_key in");
        List list = CommUtil.selectSQL(DbUtil.tranSQL(hql));
        list.removeAll(exist_person);
        ftable.setObjects(list);
    }

    public void refreshQueryScheme() {
        String con_sql = "'-1'";
        for (String person_key : exist_person) {
            con_sql += ",'" + person_key + "'";
        }
        queryScheme.setQuery_text(con_sql);
    }

    /**
     * 添加人员
     * @param all_flag:全部添加/添加选中人员
     */
    private void addPerson() {
        // 修改查询类型为普通条件查询>>>>>>
        queryScheme.setQuery_type(2);
        //queryScheme.getConditions().clear();
        // 修改查询类型为普通条件查询<<<<<<

        List in_list = new ArrayList();
        List result_list = new ArrayList();
        in_list = ftable.getSelectObjects();
        for (Object obj : in_list) {
            if (obj instanceof A01) {
                A01 bp = (A01) obj;
                if (!exist_person.contains(bp.getA01_key())) {
                    exist_person.add(bp.getA01_key());
                    result_list.add(bp);
                    strBuf.append(",'").append(bp.getA01_key()).append("'");
                }
            } else {
                String a01_key = obj.toString();
                if (!exist_person.contains(a01_key)) {
                    exist_person.add(a01_key);
                    result_list.add(a01_key);
                    strBuf.append(",'").append(a01_key).append("'");
                }
            }
        }
        if (result_list.size() > 0) {
            ftable2.addObjects(result_list);
        }
        ftable.deleteSelectedRows();
    }

    /**
     * 移除人员
     * @param all_flag：全部移除/移除选中人员
     */
    private void removePerson() {
        for (Object object : ftable2.getSelectObjects()) {
            exist_person.remove((object instanceof A01) ? ((A01) object).getA01_key() : object.toString());
        }
        ftable2.deleteSelectedRows();
        refleshStr();
        pickPerson(null, null);
        ftable.updateUI();
    }

    private void refleshStr() {
        strBuf = new StringBuffer();
        strBuf.append("'-1'");
        if (exist_person.size() > 0) {
            for (Object obj : exist_person) {
                String tmp_str = obj.toString();
                strBuf.append(",'").append(tmp_str).append("'");
            }
        }
    }

    public FTable getFtable2() {
        return ftable2;
    }
}
