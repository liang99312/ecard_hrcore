/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ReportRightPanel.java
 *
 * Created on 2010-6-13, 9:46:14
 */
package org.jhrcore.client.report.comm;

import org.jhrcore.ui.RoleModel;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.List;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import org.jhrcore.client.CommUtil;
import org.jhrcore.client.UserContext;
import org.jhrcore.client.report.ReportModel;
import org.jhrcore.entity.report.ReportDef;
import org.jhrcore.entity.right.Role;
import org.jhrcore.entity.right.RoleReport;
import org.jhrcore.entity.right.RoleRightTemp;
import org.jhrcore.mutil.RightUtil;
import org.jhrcore.ui.action.CloseAction;
import org.jhrcore.ui.renderer.HRRendererView;
import org.jhrcore.ui.renderer.RenderderMap;
import org.jhrcore.util.ComponentUtil;

/**
 *
 * @author Administrator
 */
public class ReportRightPanel extends javax.swing.JPanel {

    private List report_list;
    private JTree role_tree;
    private JTree reportTree;
    private RoleModel roleModel;
    private JMenuItem addRightItem = new JMenuItem(" 授权");
    private JMenuItem viewRightItem = new JMenuItem(" 查看");
    private JMenuItem backRightItem = new JMenuItem(" 收回");
    private JPopupMenu menu = new JPopupMenu();
    private DefaultMutableTreeNode cur_node;
    private int report_change_flag = 0;
    private Hashtable<String, RoleReport> cur_role_report = new Hashtable<String, RoleReport>();

    /** Creates new form ReportRightPanel */
    public ReportRightPanel(List report_list) {
        this.report_list = report_list;
        initComponents();
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnClose = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        pnlLeft = new javax.swing.JPanel();
        pnlRight = new javax.swing.JPanel();

        btnClose.setText("关闭");

        jCheckBox1.setText("同步应用子级角色");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 260, Short.MAX_VALUE)
                .addComponent(btnClose)
                .addGap(123, 123, 123))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClose)
                    .addComponent(jCheckBox1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane1.setDividerLocation(160);
        jSplitPane1.setOneTouchExpandable(true);

        pnlLeft.setLayout(new java.awt.BorderLayout());
        jSplitPane1.setLeftComponent(pnlLeft);

        pnlRight.setLayout(new java.awt.BorderLayout());
        jSplitPane1.setRightComponent(pnlRight);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 422, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel pnlLeft;
    private javax.swing.JPanel pnlRight;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        role_tree = new JTree();
        roleModel = new RoleModel();
        role_tree.setModel(roleModel);
        role_tree.setSelectionRow(1);
        RenderderMap map = new RenderderMap();
        map.setIcon("Role", "code");
        map.initTree(role_tree);
        pnlLeft.add(new JScrollPane(role_tree), BorderLayout.CENTER);
        reportTree = new JTree();
        menu.add(addRightItem);
        menu.add(viewRightItem);
        menu.add(backRightItem);
        ComponentUtil.setIcon(addRightItem, "give_right.png");
        ComponentUtil.setIcon(viewRightItem, "view_right.png");
        ComponentUtil.setIcon(backRightItem, "refuse_right.png");
    }

    private void setupEvents() {
        CloseAction.doCloseAction(btnClose);
        role_tree.addTreeSelectionListener(new TreeSelectionListener() {

            @Override
            public void valueChanged(TreeSelectionEvent e) {
                if (e.getPath() == null) {
                    return;
                }
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) role_tree.getLastSelectedPathComponent();
                cur_node = node;
                if (cur_node == null) {
                    return;
                }
                report_change_flag = 0;
                refreshRoleTree(cur_node);
            }
        });
        viewRightItem.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                doReportRight(cur_node, 2);
            }
        });
        addRightItem.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                doReportRight(cur_node, 1);
            }
        });
        backRightItem.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                doReportRight(cur_node, 0);
            }
        });
        role_tree.expandRow(1);
        role_tree.setSelectionRow(1);
        if (role_tree.getSelectionPath() != null) {
            cur_node = (DefaultMutableTreeNode) role_tree.getSelectionPath().getLastPathComponent();
        }
        refreshRoleTree(cur_node);
    }

    public void initSelection() {
        reportTree.clearSelection();
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) reportTree.getModel().getRoot();
        while (node.getChildCount() > 0 && node.getFirstChild() != null) {
            node = (DefaultMutableTreeNode) node.getFirstChild();
        }
        reportTree.addSelectionPath(new TreePath(node.getPath()));
        reportTree.expandPath(new TreePath(node.getPath()));
    }

    private Role getCurrenRole(DefaultMutableTreeNode node) {
        if (node == null || node.getUserObject() == null) {
            return null;
        }
        Object obj = node.getUserObject();
        if (obj instanceof Role) {
            final Role role = (Role) obj;
            if ("&&&".equals(role.getRole_name())) {
                return null;
            }
            if (!UserContext.isSA && UserContext.hasRoleRight(role.getRole_key())) {
                JOptionPane.showMessageDialog(null, "权限不足，不能授权",
                        "提示", JOptionPane.INFORMATION_MESSAGE);
                return null;
            }
            return role;
        }
        return null;
    }

    private void doReportRight(DefaultMutableTreeNode node, int mod) {
        Role role = getCurrenRole(node);
        if (role == null) {
            return;
        }
        List<Role> sel_roles = RightUtil.getRole(node, jCheckBox1.isSelected(), mod);
        if (sel_roles == null || sel_roles.isEmpty()) {
            return;
        }
        List sel_nodes = new ArrayList();
        TreePath[] tps = reportTree.getSelectionPaths();
        if (tps != null) {
            for (TreePath tp : tps) {
                DefaultMutableTreeNode cnode = (DefaultMutableTreeNode) tp.getLastPathComponent();
                if (cnode != null) {
                    sel_nodes.add(cnode);
                }
            }
        }
        Hashtable<String, Hashtable<String, RoleReport>> rfs = new Hashtable<String, Hashtable<String, RoleReport>>();
        Hashtable<String, RoleReport> rf = new Hashtable<String, RoleReport>();
        for (String key : cur_role_report.keySet()) {
            rf.put(key, cur_role_report.get(key));
        }
        rfs.put(role.getRole_key(), rf);
        boolean success = RightUtil.giveReportRight(sel_roles, sel_nodes, mod, rfs, (DefaultMutableTreeNode) reportTree.getModel().getRoot());
        if (success) {
            for (String key : rf.keySet()) {
                cur_role_report.put(key, rf.get(key));
            }
        }
        refreshReportRight();
    }

    private void refreshRoleTree(DefaultMutableTreeNode node) {
        if (node != null) {
            Object obj = node.getUserObject();
            DefaultMutableTreeNode parent_node = (DefaultMutableTreeNode) node.getParent();
            Object parent_obj = null;
            Role parent_role = null;
            if (parent_node != null) {
                if ("全部角色".equals(parent_node.toString())) {
//                    cur_parent_role = null;
                } else {
                    parent_obj = parent_node.getUserObject();
                }
            }
            boolean change_flag = false;
            if (obj instanceof Role) {
                Role role = (Role) obj;
                if (parent_obj instanceof Role) {
                    parent_role = (Role) parent_obj;
//                    cur_parent_role = parent_role;
                    change_flag = true;
                    if (role.getRole_name().equals("&&&")) {
                        change_flag = false;
                    }
                }
//                else {
//                    cur_parent_role = null;
//                }
                initReportRight();
                if (report_change_flag == 1) {
                    if (change_flag) {
                        reportTree.setModel(new ReportModel(parent_role.getRole_key(), report_list));
                    } else {
                        reportTree.setModel(new ReportModel(report_list));
                    }
                    refreshCurRoleReport(role);
                    refreshReportRight();
                    reportTree.updateUI();
                    report_change_flag++;
                }
            } else {
                cur_role_report.clear();
                reportTree.setModel(new ReportModel(report_list));
                reportTree.updateUI();
                initReportRight();
                refreshReportRight();
            }
            initSelection();
            reportTree.updateUI();
        }
    }

    private void initReportRight() {
        if (report_change_flag == 0) {
            pnlRight.removeAll();
            reportTree.setModel(new ReportModel(report_list));
            HRRendererView.getReportRightMap(reportTree).initTree(reportTree);
            pnlRight.add(new JScrollPane(reportTree), BorderLayout.CENTER);
            reportTree.addMouseListener(new MouseAdapter() {

                @Override
                public void mousePressed(MouseEvent e) {
                    if (e.getButton() == MouseEvent.BUTTON3) {
                        menu.show(e.getComponent(), e.getX(), e.getY());
                    }
                }
            });
            reportTree.expandRow(2);
            reportTree.setSelectionRow(0);
            pnlRight.updateUI();
            report_change_flag++;
        }
    }

    private void refreshCurRoleReport(Role role) {
        cur_role_report.clear();
        Role tmp_role = (Role) CommUtil.fetchEntityBy("from Role r left join fetch r.roleReports rr join fetch rr.reportDef where r.role_key='" + role.getRole_key() + "'");
        if (tmp_role != null) {
            for (RoleReport roleReport : tmp_role.getRoleReports()) {
                cur_role_report.put(roleReport.getReportDef().getReportDef_key(), roleReport);
            }
        }
    }

    private void refreshReportRight() {
        List<String> refresh_class = new ArrayList<String>();
        List<Integer> refresh_indexs = new ArrayList<Integer>();
        List<ReportDef> refresh_report = new ArrayList<ReportDef>();
        List<DefaultMutableTreeNode> refresh_class_node = new ArrayList<DefaultMutableTreeNode>();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) this.reportTree.getModel().getRoot();
        Enumeration enumt = root.breadthFirstEnumeration();
        if (cur_role_report.size() > 0) {
            while (enumt.hasMoreElements()) {
                DefaultMutableTreeNode no = (DefaultMutableTreeNode) enumt.nextElement();
                Object tmpObj = no.getUserObject();
                if (tmpObj instanceof ReportDef) {
                    ReportDef tt = (ReportDef) no.getUserObject();
                    if (cur_role_report.get(tt.getReportDef_key()) != null) {
                        tt.setFun_flag(cur_role_report.get(tt.getReportDef_key()).getFun_flag());
                    } else {
                        tt.setFun_flag(0);
                    }
                    refresh_report.add(tt);
                    refresh_class_node.add(no);
                }
            }
            for (int i = 0; i < refresh_report.size(); i++) {
                if (refresh_class.indexOf(refresh_report.get(i).getReport_class()) == -1) {
                    refresh_indexs.add(i);
                }
            }
            for (Integer index : refresh_indexs) {
                checkReportRightChanges(refresh_class_node.get(index));
            }

        } else {
            while (enumt.hasMoreElements()) {
                DefaultMutableTreeNode no = (DefaultMutableTreeNode) enumt.nextElement();
                Object tmpObj = no.getUserObject();
                if (tmpObj instanceof ReportDef) {
                    ReportDef tt = (ReportDef) no.getUserObject();
                    tt.setFun_flag(0);
                } else if (tmpObj instanceof RoleRightTemp) {
                    RoleRightTemp roleRightTemp = (RoleRightTemp) no.getUserObject();
                    roleRightTemp.setFun_flag(0);
                }
            }
        }
        reportTree.updateUI();
    }

    private void checkReportRightChanges(DefaultMutableTreeNode node) {
        while (node != reportTree.getModel().getRoot()) {
            DefaultMutableTreeNode tmpParent_node = (DefaultMutableTreeNode) node.getParent();
            Enumeration enumt = tmpParent_node.children();
            Object parent_obj = tmpParent_node.getUserObject();
            int cur_fun_flag = 1;
            List<Integer> child_flags = new ArrayList<Integer>();
            while (enumt.hasMoreElements()) {
                DefaultMutableTreeNode tmpNode = (DefaultMutableTreeNode) enumt.nextElement();
                Object tmp_obj = tmpNode.getUserObject();
                if (tmp_obj instanceof ReportDef) {
                    ReportDef tmp_report_def = (ReportDef) tmp_obj;
                    child_flags.add(tmp_report_def.getFun_flag());
                } else if (tmp_obj instanceof RoleRightTemp) {
                    RoleRightTemp tmp_entity_def = (RoleRightTemp) tmp_obj;
                    child_flags.add(tmp_entity_def.getFun_flag());
                }
            }
            cur_fun_flag = getFunFlag(child_flags);
            if (parent_obj instanceof RoleRightTemp) {
                RoleRightTemp roleRightTemp = (RoleRightTemp) parent_obj;
                roleRightTemp.setFun_flag(cur_fun_flag);

            }
            node = tmpParent_node;
        }
    }

    private int getFunFlag(List<Integer> child_flags) {
        int cur_fun_flag = 0;
        if (child_flags.contains(0) || child_flags.contains(2)) {
            cur_fun_flag = 2;
        }
        if (child_flags.contains(0)) {
            if (child_flags.contains(1) || child_flags.contains(2)) {
                cur_fun_flag = 2;
            } else {
                cur_fun_flag = 0;
            }
        } else if (child_flags.contains(2)) {
            cur_fun_flag = 2;
        } else {
            cur_fun_flag = 1;
        }
        if (child_flags.size() == 0) {
            cur_fun_flag = 0;
        }
        return cur_fun_flag;
    }
}
