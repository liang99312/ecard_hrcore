/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ReportToModulePanel.java
 *
 * Created on 2011-3-10, 15:57:52
 */
package org.jhrcore.client.report.comm;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import org.jhrcore.client.CommUtil;
import org.jhrcore.util.SysUtil;
import org.jhrcore.client.UserContext;
import org.jhrcore.client.report.ReportCheckModel;
import org.jhrcore.client.report.ReportModel;
import org.jhrcore.util.ComponentUtil;
import org.jhrcore.entity.report.ReportDef;
import org.jhrcore.entity.right.FuntionRight;
import org.jhrcore.entity.salary.ValidateSQLResult;
import org.jhrcore.iservice.impl.ReportImpl;
import org.jhrcore.mutil.ReportUtil;
import org.jhrcore.ui.CheckTreeNode;
import org.jhrcore.ui.FuntionTreeModel;
import org.jhrcore.ui.ModalDialog;
import org.jhrcore.ui.action.CloseAction;
import org.jhrcore.ui.renderer.HRRendererView;
import org.jhrcore.util.MsgUtil;

/**
 *
 * @author hflj
 */
public class ReportToModulePanel extends javax.swing.JPanel {

    private JTree reportTree;
    private ReportModel reportModel;
    private JTree m_tree;
    private FuntionTreeModel funtionTreeModel;
    private DefaultMutableTreeNode mm_node = null;

    /** Creates new form ReportToModulePanel */
    public ReportToModulePanel(ReportModel reportModel) {
        this.reportModel = reportModel;
        initComponents();
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        btnCancel = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSplitPane1 = new javax.swing.JSplitPane();
        pnlLeft = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        btnAdd = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        pnlRight = new javax.swing.JPanel();

        btnCancel.setText("退出");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(471, Short.MAX_VALUE)
                .addComponent(btnCancel)
                .addGap(37, 37, 37))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnCancel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(41, Short.MAX_VALUE)))
        );

        jSplitPane1.setDividerLocation(250);

        pnlLeft.setBorder(javax.swing.BorderFactory.createTitledBorder("系统模块："));
        pnlLeft.setLayout(new java.awt.BorderLayout());
        jSplitPane1.setLeftComponent(pnlLeft);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        btnAdd.setText("添加");
        btnAdd.setFocusable(false);
        btnAdd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAdd.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btnAdd);

        btnDel.setText("删除");
        btnDel.setFocusable(false);
        btnDel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btnDel);

        pnlRight.setBorder(javax.swing.BorderFactory.createTitledBorder("已分配报表："));
        pnlRight.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
            .addComponent(pnlRight, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlRight, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDel;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JPanel pnlLeft;
    private javax.swing.JPanel pnlRight;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        List list = new ArrayList();
        for (Object obj : UserContext.funtion_list) {
            FuntionRight fr = (FuntionRight) obj;
            String code = fr.getFun_module_flag();
            if (code.startsWith("Query")) {
                continue;
            }
            if (code.startsWith("Report")) {
                continue;
            }
            if (code.startsWith("Sys")) {
                continue;
            }
            if (code.startsWith("WorkFlow")) {
                continue;
            }
            if (code.startsWith("LogInfoMng")) {
                continue;
            }
            if (fr.isModule_flag()) {
                list.add(obj);
            }
        }
        funtionTreeModel = new FuntionTreeModel(list);
        m_tree = new JTree(funtionTreeModel);
        HRRendererView.getFunMap(m_tree).initTree(m_tree);
        m_tree.setRootVisible(false);
        m_tree.setShowsRootHandles(true);
        pnlLeft.add(new JScrollPane(m_tree), BorderLayout.CENTER);
    }

    private void setupEvents() {
        m_tree.addTreeSelectionListener(new TreeSelectionListener() {

            @Override
            public void valueChanged(TreeSelectionEvent e) {
                mm_node = null;
                if (m_tree.getSelectionPath() == null || m_tree.getSelectionPath().getLastPathComponent() == null) {
                    return;
                }
                DefaultMutableTreeNode m_node = (DefaultMutableTreeNode) m_tree.getSelectionPath().getLastPathComponent();
                if (((FuntionRight) m_node.getUserObject()).isModule_flag()) {
                    mm_node = m_node;
                    refreshReportTree();
                }
            }
        });
        btnAdd.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (mm_node == null) {
                    return;
                }
//                String module_code = ((FuntionRight) ((DefaultMutableTreeNode) mm_node.getParent()).getUserObject()).getFun_module_flag();
//                String code = module_fun_keys.get(module_code);
//                if (code == null) {
//                    code = module_code;
//                }
                CheckTreeNode r_node = ((CheckTreeNode) reportModel.getRoot());
//                Enumeration enumt = ((CheckTreeNode) reportModel.getRoot()).breadthFirstEnumeration();
//                while (enumt.hasMoreElements()) {
//                    CheckTreeNode node = (CheckTreeNode) enumt.nextElement();
//                    if (node.getUserObject() instanceof RoleRightTemp) {
//                        RoleRightTemp rrt = (RoleRightTemp) node.getUserObject();
//                        if (rrt.getModuleInfo() != null && code.equals(rrt.getModuleInfo().getModule_code())) {
//                            r_node = node;
//                            break;
//                        }
//                    }
//                }
                if (r_node != null) {
                    Enumeration enumt = r_node.breadthFirstEnumeration();
                    List<String> exist_keys = getCurModuleReportKeys();
                    List list = new ArrayList();
                    while (enumt.hasMoreElements()) {
                        CheckTreeNode node = (CheckTreeNode) enumt.nextElement();
                        if (node.getUserObject() instanceof ReportDef) {
                            ReportDef rd = (ReportDef) node.getUserObject();
                            if (exist_keys.contains(rd.getReportDef_key())) {
                                continue;
                            }
                            list.add(node.getUserObject());
                        }
                    }
                    ReportModel rm = new ReportModel(list);
//                    ReportCheckModel rm = new ReportCheckModel(list);
                    JPanel pnl = new JPanel(new BorderLayout());
                    pnl.add(new JScrollPane(ReportUtil.getReportTree(rm)));
                    pnl.setPreferredSize(new Dimension(400, 350));
                    if (ModalDialog.doModal(ReportToModulePanel.this, pnl, "请选择报表")) {
                        List checkedObjs = ComponentUtil.getCheckedObjs(rm);
                        if (checkedObjs.isEmpty()) {
                            return;
                        }
                        List<String> keys = new ArrayList<String>();
                        for (Object obj : checkedObjs) {
                            if (obj instanceof ReportDef) {
                                keys.add(((ReportDef) obj).getReportDef_key());
                            }
                        }
                        ValidateSQLResult result = ReportImpl.addReportToModule(((FuntionRight) mm_node.getUserObject()).getFun_module_flag(), keys);
                        if (result.getResult() == 0) {
                            refreshReportTree();
                        } else {
                            MsgUtil.showHRSaveErrorMsg(result);
                        }
                    }
                }
            }
        });
        btnDel.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (mm_node == null) {
                    return;
                }
                List checkedObjs = ComponentUtil.getCheckedObjs(reportTree);
                if (checkedObjs.isEmpty()) {
                    return;
                }
                if (JOptionPane.showConfirmDialog(JOptionPane.getFrameForComponent(btnDel),
                        "确定要删除选择的报表分配吗?", "询问", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE) != JOptionPane.OK_OPTION) {
                    return;
                }
                List<String> keys = new ArrayList<String>();
                for (Object obj : checkedObjs) {
                    if (obj instanceof ReportDef) {
                        keys.add(((ReportDef) obj).getReportDef_key());
                    }
                }
                ValidateSQLResult result = CommUtil.excuteSQLs("delete from ReportModule where code='comm' and module_flag='" + ((FuntionRight) mm_node.getUserObject()).getFun_module_flag() + "' and reportDef_key in ", keys);
                if (result.getResult() == 0) {
                    refreshReportTree();
                } else {
                    MsgUtil.showHRSaveErrorMsg(result);
                }
            }
        });
        CloseAction.doCloseAction(btnCancel);
        ComponentUtil.initTreeSelection(m_tree);
    }

    private void refreshReportTree() {
        if (mm_node == null) {
            return;
        }
        List list = CommUtil.fetchEntities("select rd.reportDef_key,rd.report_name,rd.report_class,rd.order_no from ReportDef rd ,ReportModule rm where rd.reportDef_key=rm.reportDef_key and rm.module_flag='" + ((FuntionRight) mm_node.getUserObject()).getFun_module_flag() + "' and rm.code='comm' order by rd.report_class");
        List<ReportDef> reports = new ArrayList<ReportDef>();
        for (Object obj : list) {
            Object[] objs = (Object[]) obj;
            ReportDef rd = new ReportDef();
            rd.setReportDef_key(objs[0].toString());
            rd.setReport_name(objs[1].toString());
            rd.setReport_class(objs[2].toString());
            rd.setOrder_no(SysUtil.objToInt(objs[3].toString()));
            reports.add(rd);
        }
        ReportCheckModel r_model = new ReportCheckModel(reports);
        reportTree = ReportUtil.getReportTree(r_model);
        pnlRight.removeAll();
        pnlRight.setLayout(new BorderLayout());
        pnlRight.add(new JScrollPane(reportTree));
        pnlRight.updateUI();
    }

    private List<String> getCurModuleReportKeys() {
        List<String> keys = new ArrayList<String>();
        if (reportTree != null && reportTree.getModel() != null) {
            Enumeration enumt = ((DefaultMutableTreeNode) reportTree.getModel().getRoot()).breadthFirstEnumeration();
            while (enumt.hasMoreElements()) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) enumt.nextElement();
                if (node.getUserObject() instanceof ReportDef) {
                    keys.add(((ReportDef) node.getUserObject()).getReportDef_key());
                }
            }
        }
        return keys;
    }
}
