/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * QueryPartFieldSetDailog.java
 *
 * Created on 2010-3-20, 14:14:08
 */
package org.jhrcore.queryanalysis;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import org.jhrcore.util.SysUtil;
import org.jhrcore.entity.base.TempFieldInfo;
import org.jhrcore.entity.query.QueryExtraField;
import org.jhrcore.entity.salary.ValidateSQLResult;
import org.jhrcore.iservice.impl.CommImpl;
import org.jhrcore.ui.ShowFieldTreeModel;
import org.jhrcore.ui.action.CloseAction;
import org.jhrcore.ui.renderer.HRRendererView;
import org.jhrcore.util.MsgUtil;

/**
 *
 * @author mxliteboss
 */
public class QueryPartFieldSetDailog extends javax.swing.JDialog {

    private List<TempFieldInfo> all_fields;
    private String scheme_key;
    private String field_code;
//    private Hashtable<String, QueryExtraField> extra_field_keys = new Hashtable<String, QueryExtraField>();
    private Hashtable<String, QueryExtraField> extra_field_name_keys = new Hashtable<String, QueryExtraField>();
    private List<String> exist_keys = new ArrayList<String>();
    private ShowFieldTreeModel fieldModel;
    private JTree fieldTree;
    private JTree showTree;
    private DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode("字段列表");
    private boolean click_ok = false;

    public boolean isClick_ok() {
        return click_ok;
    }

    /** Creates new form QueryPartFieldSetDailog */
    public QueryPartFieldSetDailog(java.awt.Frame parent, List<TempFieldInfo> all_fields, List<QueryExtraField> qefs, String scheme_key, String field_code) {
        super(parent);
        this.setTitle("设置显示字段");
        initComponents();
        this.all_fields = all_fields;
        this.scheme_key = scheme_key;
        this.field_code = field_code;
        for (QueryExtraField qef : qefs) {
            exist_keys.add(qef.getQueryExtraField_key());
//            extra_field_keys.put(qef.getQueryExtraField_key(), qef);
            extra_field_name_keys.put(qef.getField_sql().replace("_code_", ""), qef);
        }
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnAddSchemeDetail = new javax.swing.JButton();
        btnUp = new javax.swing.JButton();
        btnDown = new javax.swing.JButton();
        btnDelSchemeDetail = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        btnClose = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        pnlField = new javax.swing.JPanel();
        btnClear = new javax.swing.JButton();
        pnlRight = new javax.swing.JPanel();
        btnAddall = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);

        jLabel1.setText("已选字段：");

        jLabel2.setText("未选字段：");

        btnAddSchemeDetail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/select_one.png"))); // NOI18N
        btnAddSchemeDetail.setName("btnRemove"); // NOI18N
        btnAddSchemeDetail.setPreferredSize(new java.awt.Dimension(22, 22));

        btnUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/move_up.png"))); // NOI18N
        btnUp.setMaximumSize(new java.awt.Dimension(22, 22));
        btnUp.setMinimumSize(new java.awt.Dimension(22, 22));
        btnUp.setPreferredSize(new java.awt.Dimension(22, 22));

        btnDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/move_down.png"))); // NOI18N
        btnDown.setMaximumSize(new java.awt.Dimension(22, 22));
        btnDown.setMinimumSize(new java.awt.Dimension(22, 22));
        btnDown.setPreferredSize(new java.awt.Dimension(22, 22));

        btnDelSchemeDetail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/remove_one.png"))); // NOI18N

        btnClose.setText("关闭");
        btnClose.setName("btnClose"); // NOI18N

        btnSave.setText("应用");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(340, Short.MAX_VALUE)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlField.setLayout(new java.awt.BorderLayout());

        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/remove_all.png"))); // NOI18N

        pnlRight.setLayout(new java.awt.BorderLayout());

        btnAddall.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/select_all.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlField, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAddall, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(btnDelSchemeDetail, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                                .addComponent(btnClear, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, Short.MAX_VALUE))
                            .addComponent(btnAddSchemeDetail, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap(192, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnUp, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDown, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(169, 169, 169))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(pnlRight, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(btnAddall, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAddSchemeDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDelSchemeDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlRight, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnUp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(pnlField, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddSchemeDetail;
    private javax.swing.JButton btnAddall;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnDelSchemeDetail;
    private javax.swing.JButton btnDown;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel pnlField;
    private javax.swing.JPanel pnlRight;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        fieldModel = new ShowFieldTreeModel(all_fields);
        fieldTree = new JTree(fieldModel);
        HRRendererView.getCommMap().initTree(fieldTree);
        fieldTree.setRootVisible(false);
        fieldTree.setShowsRootHandles(true);
        pnlField.add(new JScrollPane(fieldTree), BorderLayout.CENTER);
        showTree = new JTree(rootNode);
        HRRendererView.getCommMap().initTree(showTree);
        showTree.setRootVisible(false);
        showTree.expandRow(0);
        showTree.setShowsRootHandles(true);
        refreshTreeForScheme(extra_field_name_keys);
        pnlRight.add(new JScrollPane(showTree), BorderLayout.CENTER);
    }

    private void setupEvents() {
        btnSave.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                saveShowScheme();
            }
        });
        CloseAction.doCloseAction(btnClose);
        btnAddSchemeDetail.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                addShowSchemeDetail(false);
            }
        });

        btnAddall.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                addShowSchemeDetail(true);
            }
        });

        btnDelSchemeDetail.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                delShowSchemeDetail(false);
            }
        });

        btnUp.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                updetail(-1);
            }
        });
        btnDown.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                updetail(1);
            }
        });
        btnClear.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                delShowSchemeDetail(true);
            }
        });
    }

    private void refreshTreeForScheme(Hashtable<String, QueryExtraField> extra_field_name_keys) {
        List<TempFieldInfo> select_fields = new ArrayList<TempFieldInfo>();
        List<DefaultMutableTreeNode> remove_nodes = new ArrayList<DefaultMutableTreeNode>();
        Enumeration enumt = ((DefaultMutableTreeNode) fieldModel.getRoot()).breadthFirstEnumeration();
        while (enumt.hasMoreElements()) {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) enumt.nextElement();
            if (node.getUserObject() instanceof TempFieldInfo) {
                TempFieldInfo tfi = (TempFieldInfo) node.getUserObject();
                if (extra_field_name_keys.get(tfi.getEntity_name() + "." + tfi.getField_name().replace("_code_", "")) != null) {
                    select_fields.add(tfi);
                    remove_nodes.add(node);
                }
            }
        }
        rootNode.removeAllChildren();
        for (DefaultMutableTreeNode node : remove_nodes) {
            node.removeFromParent();
        }
        for (TempFieldInfo tfi : select_fields) {
            DefaultMutableTreeNode node = new DefaultMutableTreeNode(tfi);
            rootNode.add(node);
        }
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) fieldModel.getRoot();
        while (node.getChildCount() > 0) {
            node = (DefaultMutableTreeNode) node.getFirstChild();
        }
        if (node != null) {
            fieldTree.setSelectionPath(new TreePath(node.getPath()));
            fieldTree.expandPath(new TreePath(node.getPath()));
        }
        showTree.updateUI();
        fieldTree.updateUI();
    }

    /**
     * 向上/下移动节点顺序
     * @param step：1，向上;-1向下
     */
    private void updetail(int step) {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) showTree.getLastSelectedPathComponent();
        if (node == null) {
            return;
        }
        Object obj = node.getUserObject();
        if (obj instanceof String) {
            return;
        }
        DefaultMutableTreeNode parent_node = (DefaultMutableTreeNode) node.getParent();
        int child_count = parent_node.getChildCount();
        if (child_count <= 1) {
            return;
        }
        int ind = parent_node.getIndex(node);
        ind = ind + step;
        node.removeFromParent();
        if (ind == -1) {
            parent_node.add(node);
        } else {
            if (ind >= child_count) {
                ind = 0;
            }
            parent_node.insert(node, ind);
        }
        showTree.clearSelection();
        showTree.addSelectionPath(new TreePath(node.getPath()));
        showTree.updateUI();
    }

    /**
     * 删除已选字段
     * @param all_flag：为True时表示将所有已选字段移除
     */
    private void delShowSchemeDetail(boolean all_flag) {
        List<TempFieldInfo> field_infos = new ArrayList<TempFieldInfo>();
        DefaultMutableTreeNode last_node = null;
        HashSet<DefaultMutableTreeNode> remove_nodes = new HashSet<DefaultMutableTreeNode>();
        if (all_flag) {
            Enumeration enumt = rootNode.breadthFirstEnumeration();
            while (enumt.hasMoreElements()) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) enumt.nextElement();
                if (node == rootNode) {
                    continue;
                }
                remove_nodes.add(node);
            }
        } else {
            TreePath[] select_path = showTree.getSelectionPaths();
            if (select_path == null || select_path.length == 0) {
                return;
            }
            for (TreePath tp : select_path) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) tp.getLastPathComponent();
                Object obj = node.getUserObject();
                if (obj instanceof String) {
                    Enumeration enumt = node.children();
                    while (enumt.hasMoreElements()) {
                        DefaultMutableTreeNode child = (DefaultMutableTreeNode) enumt.nextElement();
                        if (!remove_nodes.contains(child)) {
                            remove_nodes.add(child);
                        }
                    }
                    remove_nodes.add(node);
                } else if (obj instanceof TempFieldInfo) {
                    if (remove_nodes.contains(node)) {
                        continue;
                    }
                    remove_nodes.add(node);
                }
            }
        }
        List<DefaultMutableTreeNode> nodes = new ArrayList<DefaultMutableTreeNode>();
        for (DefaultMutableTreeNode node : remove_nodes) {
            Object obj = node.getUserObject();
            if (obj instanceof TempFieldInfo) {
                last_node = node.getPreviousSibling();
                if (last_node == null) {
                    last_node = (DefaultMutableTreeNode) node.getParent();
                }
                nodes.add(node);
                field_infos.add((TempFieldInfo) obj);
                node.removeFromParent();
            }
        }
        remove_nodes.removeAll(nodes);
        for (DefaultMutableTreeNode node : remove_nodes) {
            last_node = node.getPreviousSibling();
            if (last_node == null) {
                last_node = node.getNextSibling();
            }
            node.removeFromParent();
        }
        if (last_node != null) {
            showTree.clearSelection();
            showTree.addSelectionPath(new TreePath(last_node.getPath()));
        }
        showTree.updateUI();
        for (TempFieldInfo tfi : field_infos) {
            last_node = fieldModel.addNode(tfi);
        }
        if (last_node != null) {
            fieldTree.clearSelection();
            fieldTree.addSelectionPath(new TreePath(last_node.getPath()));
        }
        fieldTree.updateUI();
    }

    /**
     * 该方法用于增加显示字段
     * @param all_flag：是否将全部字段作为显示字段
     */
    private void addShowSchemeDetail(boolean all_flag) {
        List<TempFieldInfo> field_infos = new ArrayList<TempFieldInfo>();
        DefaultMutableTreeNode next_node = null;
        if (all_flag) {
            Enumeration enumt = ((DefaultMutableTreeNode) fieldModel.getRoot()).breadthFirstEnumeration();
            List<DefaultMutableTreeNode> nodes = new ArrayList<DefaultMutableTreeNode>();
            while (enumt.hasMoreElements()) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) enumt.nextElement();
                Object obj = node.getUserObject();
                if (obj instanceof String) {
                    continue;
                }
                TempFieldInfo tfi = (TempFieldInfo) obj;
                field_infos.add(tfi);
                nodes.add(node);
            }
            for (DefaultMutableTreeNode node : nodes) {
                next_node = node.getNextSibling();
                if (next_node == null) {
                    next_node = (DefaultMutableTreeNode) node.getParent();
                }
                node.removeFromParent();
            }
        } else {
            TreePath[] select_path = fieldTree.getSelectionPaths();
            Hashtable<String, TreePath> tree_path_keys = new Hashtable<String, TreePath>();
            for (TreePath tp : select_path) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) tp.getLastPathComponent();
                if (!(node.getUserObject() instanceof TempFieldInfo)) {
                    Enumeration enumt = node.children();
                    while (enumt.hasMoreElements()) {
                        DefaultMutableTreeNode child = (DefaultMutableTreeNode) enumt.nextElement();
                        TempFieldInfo tfi = (TempFieldInfo) child.getUserObject();
                        if (tree_path_keys.get(tfi.getField_name()) == null) {
                            tree_path_keys.put(tfi.getField_name(), new TreePath(child.getPath()));
                        }
                    }
                } else {
                    tree_path_keys.put(((TempFieldInfo) node.getUserObject()).getField_name(), tp);
                }
            }
            for (TreePath tp : tree_path_keys.values()) {
                Object[] objs = tp.getPath();
                for (Object obj : objs) {
                    if (obj instanceof DefaultMutableTreeNode) {
                        DefaultMutableTreeNode node = (DefaultMutableTreeNode) obj;
                        next_node = node.getNextSibling();
                        if (next_node == null) {
                            next_node = (DefaultMutableTreeNode) node.getParent();
                        }
                        if (node.getUserObject() instanceof TempFieldInfo) {
                            field_infos.add((TempFieldInfo) node.getUserObject());
                            node.removeFromParent();
                        }
                    }
                }
            }
        }
        SysUtil.sortListByInteger(field_infos, "order_no");
        fieldTree.clearSelection();
        fieldTree.addSelectionPath(new TreePath(next_node.getPath()));
        fieldTree.updateUI();
        for (TempFieldInfo tfi : field_infos) {
            next_node = new DefaultMutableTreeNode(tfi);
            rootNode.add(next_node);
        }
        if (next_node != null) {
            showTree.clearSelection();
            showTree.addSelectionPath(new TreePath(next_node.getPath()));
        }
        showTree.updateUI();
    }
    //保存方案

    private void saveShowScheme() {
        Enumeration enumt = rootNode.breadthFirstEnumeration();
        List<TempFieldInfo> selected_fields = new ArrayList<TempFieldInfo>();
        while (enumt.hasMoreElements()) {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) enumt.nextElement();
            Object obj = node.getUserObject();
            if (obj instanceof TempFieldInfo) {
                TempFieldInfo tfi = (TempFieldInfo) obj;
                selected_fields.add(tfi);
            }
        }
        if (selected_fields.size() == 0) {
            JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent(btnSave), "未选择任何字段");
            return;
        }
//        List saveList = new ArrayList();
//        List updateList = new ArrayList();
//        List delList = new ArrayList();
        List query_fields = new ArrayList();
        for (int i = 0; i < selected_fields.size(); i++) {
            TempFieldInfo tfi = (TempFieldInfo) selected_fields.get(i);
            String comp_name = tfi.getEntity_name() + "." + tfi.getField_name().replace("_code_", "");
            QueryExtraField ssd = extra_field_name_keys.get(comp_name);
            if (ssd == null) {
                ssd = AnalyseUtil.createExtraField(field_code, scheme_key, comp_name, tfi.getEntity_name(), i);
                query_fields.add(ssd);
            } else {
                if (ssd.getOrder_no() != i) {
                    ssd.setOrder_no(i);
                    query_fields.add(ssd);
                }
                extra_field_name_keys.remove(comp_name);
            }
        }
        ValidateSQLResult result = CommImpl.saveQueryExtraField(all_fields, exist_keys);
        if (result.getResult() != 0) {
            MsgUtil.showHRSaveErrorMsg(result);
        }
        click_ok = true;
        dispose();
    }
}
