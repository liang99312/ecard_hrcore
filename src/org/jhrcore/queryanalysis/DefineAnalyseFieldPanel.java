/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DefineAnalyseFieldPanel.java
 *
 * Created on 2010-2-2, 16:50:27
 */
package org.jhrcore.queryanalysis;

import com.foundercy.pf.control.table.FTable;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import org.apache.log4j.Logger;
import org.jhrcore.util.UtilTool;
import org.jhrcore.entity.base.EntityDef;
import org.jhrcore.entity.base.TempFieldInfo;
import org.jhrcore.entity.query.CommAnalyseField;
import org.jhrcore.ui.BeanPanel;
import org.jhrcore.ui.FormulaEditorPanel;
import org.jhrcore.ui.FormulaParaFieldSelectPanel;
import org.jhrcore.ui.HrTextPane;
import org.jhrcore.ui.ModelFrame;
import org.jhrcore.ui.ValidateEntity;
import org.jhrcore.ui.action.CloseAction;
import org.jhrcore.ui.listener.IPickFieldSelectListener;
import org.jhrcore.ui.listener.IPickFormulaEditorListener;
import org.jhrcore.ui.renderer.HRRendererView;

/**
 *
 * @author mxliteboss
 */
public class DefineAnalyseFieldPanel extends javax.swing.JPanel {

    private FTable ftable;
    private CommAnalyseField payQueryAnalysisField;
    private HrTextPane jtaFormulaText;
    private List<IPickCreateAnalyseFieldListener> listeners = new ArrayList<IPickCreateAnalyseFieldListener>();
    private FormulaEditorPanel pnlEditor = new FormulaEditorPanel();
    private Object payAnalysePara;
    private AnalyseParaModel analyseParaModel;
    private JTree para_tree;
    private List<String> fields = new ArrayList<String>();
    private DocumentListener doc_listener;
    private Class cur_class;
    private List para_list;
    private Logger log = Logger.getLogger(DefineAnalyseFieldPanel.class.getName());

    public void addPickCreateAnalyseFieldListener(IPickCreateAnalyseFieldListener listener) {
        listeners.add(listener);
    }

    public void delPickCreateAnalyseFieldListener(IPickCreateAnalyseFieldListener listener) {
        listeners.remove(listener);
    }

    /** Creates new form DefineAnalyseFieldPanel */
    public DefineAnalyseFieldPanel(Object payAnalysePara, List para_list) {
        this.payAnalysePara = payAnalysePara;
        this.para_list = para_list;
        initComponents();
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel5 = new javax.swing.JPanel();
        toolbar = new javax.swing.JToolBar();
        btnAdd = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        pnlLeft = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jspMain = new javax.swing.JSplitPane();
        pnlFormula = new javax.swing.JPanel();
        pnl = new javax.swing.JPanel();
        pnlForEditor = new javax.swing.JPanel();
        pnlPara = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        jSplitPane1.setDividerLocation(220);
        jSplitPane1.setDividerSize(2);

        toolbar.setFloatable(false);
        toolbar.setRollover(true);

        btnAdd.setText("新增");
        btnAdd.setFocusable(false);
        btnAdd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAdd.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolbar.add(btnAdd);

        btnDel.setText("删除");
        btnDel.setFocusable(false);
        btnDel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolbar.add(btnDel);

        pnlLeft.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlLeft.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolbar, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
            .addComponent(pnlLeft, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(toolbar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlLeft, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel5);

        jLabel2.setText("计算表达式：");

        jspMain.setDividerLocation(200);
        jspMain.setDividerSize(2);
        jspMain.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        pnlFormula.setLayout(new java.awt.BorderLayout());
        jspMain.setTopComponent(pnlFormula);

        pnlForEditor.setLayout(new java.awt.BorderLayout());

        pnlPara.setBorder(javax.swing.BorderFactory.createTitledBorder("字段属性"));
        pnlPara.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout pnlLayout = new javax.swing.GroupLayout(pnl);
        pnl.setLayout(pnlLayout);
        pnlLayout.setHorizontalGroup(
            pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLayout.createSequentialGroup()
                .addComponent(pnlForEditor, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlPara, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE))
        );
        pnlLayout.setVerticalGroup(
            pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlForEditor, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
            .addComponent(pnlPara, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
        );

        jspMain.setRightComponent(pnl);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jspMain, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jspMain, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addContainerGap(433, Short.MAX_VALUE))
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel6);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 728, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 458, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        btnOk.setText("确定");

        btnCancel.setText("取消");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 728, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(564, Short.MAX_VALUE)
                .addComponent(btnOk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCancel)
                .addGap(40, 40, 40))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnOk))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnOk;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jspMain;
    private javax.swing.JPanel pnl;
    private javax.swing.JPanel pnlForEditor;
    private javax.swing.JPanel pnlFormula;
    private javax.swing.JPanel pnlLeft;
    private javax.swing.JPanel pnlPara;
    private javax.swing.JToolBar toolbar;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        List<EntityDef> entitys = new ArrayList<EntityDef>();
        try {
            String entityName = ((CommAnalysePara) payAnalysePara).getCommAnalyseScheme().getFieldClassName();
            cur_class = Class.forName(entityName);
            if (entityName.endsWith("PayQueryAnalyseField")) {
                for (EntityDef ed : ((CommAnalysePara) payAnalysePara).getCal_entitys()) {
                    if (ed.getEntityName().equals("A01")) {
                        continue;
                    }
                    entitys.add(ed);
                }
            } else {
                entitys.addAll(((CommAnalysePara) payAnalysePara).getCal_entitys());
            }
        } catch (ClassNotFoundException ex) {
            log.error(ex);
        }

        analyseParaModel = new AnalyseParaModel(entitys);
        para_tree = new JTree(analyseParaModel);
        HRRendererView.getParaFieldTypeMap(para_tree).initTree(para_tree);
        pnlPara.add(new JScrollPane(para_tree), BorderLayout.CENTER);
        fields.add("field_caption");
        fields.add("decimal_len");
        ftable = new FTable(cur_class, fields, false, false, false, "DefineAnalyseFieldPanel");
        ftable.setEditable(true);
        ftable.setObjects(para_list);
        pnlLeft.add(ftable, BorderLayout.CENTER);
        jtaFormulaText = new HrTextPane();
        pnlFormula.add(jtaFormulaText);
        pnlForEditor.add(pnlEditor, BorderLayout.CENTER);
        jtaFormulaText.revokeDocumentKeys(analyseParaModel.getLookups(),analyseParaModel.getKeyword_groups(),analyseParaModel.getK_keywords());
    }

    private void setupEvents() {
        pnlEditor.addPickFormulaEditorListener(new IPickFormulaEditorListener() {

            @Override
            public void pickEditor(String operator) {
                //operator:公式编辑器Panel返回的运算符,如：where
                int tmp = jtaFormulaText.getSelectionStart();
                jtaFormulaText.replaceSelection(operator.toLowerCase());
                jtaFormulaText.setCaretPosition(tmp + operator.length());
                jtaFormulaText.requestFocus();
            }
        });
        jspMain.addComponentListener(new ComponentAdapter() {

            @Override
            public void componentResized(ComponentEvent e) {
                jspMain.setDividerLocation(jspMain.getHeight() - 270);
            }
        });
        btnAdd.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                final CommAnalyseField field = (CommAnalyseField) UtilTool.createUIDEntity(cur_class);
                ValidateEntity ve = new ValidateEntity() {

                    @Override
                    public boolean isEntityValidate(Object obj) {
                        if (field.getField_caption() == null || field.getField_caption().trim().equals("")) {
                            JOptionPane.showMessageDialog(null, "项目名称不可为空");
                            return false;
                        }
                        return true;
                    }
                };
                if (BeanPanel.edit((JFrame) JOptionPane.getFrameForComponent(btnAdd), field, fields, "新增项目", ve)) {
                    ftable.addObject(field);
                    int ind = ftable.getObjects().size() - 1;
                    ftable.setRowSelectionInterval(ind, ind);
                }
            }
        });
        btnDel.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                ftable.deleteSelectedRows();
            }
        });
        doc_listener = new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                if (payQueryAnalysisField != null) {
                    payQueryAnalysisField.setFormula_text(jtaFormulaText.getText());
                }
            }
        };
        jtaFormulaText.getDocument().addDocumentListener(doc_listener);
        ftable.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (payQueryAnalysisField != null) {
                    payQueryAnalysisField.setFormula_text(jtaFormulaText.getText());
                }
                if (payQueryAnalysisField == ftable.getCurrentRow()) {
                    return;
                }
                payQueryAnalysisField = (CommAnalyseField) ftable.getCurrentRow();
                if (payQueryAnalysisField != null) {
                    jtaFormulaText.setText(payQueryAnalysisField.getFormula_text() == null ? "" : payQueryAnalysisField.getFormula_text());
                }
            }
        });
        btnOk.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                List<CommAnalyseField> paf_fields = new ArrayList<CommAnalyseField>();
                for (Object obj : ftable.getObjects()) {
                    CommAnalyseField paf = (CommAnalyseField) obj;
                    String text = paf.getFormula_text();
                    Hashtable<String, String> k_keywords = jtaFormulaText.getK_keywords();
                    HashSet<String> entitys = new HashSet<String>();
                    for (String key : k_keywords.keySet()) {
                        if (text.contains(key)) {
                            String value = k_keywords.get(key);
                            entitys.add(value.split("\\.")[0]);
                            text = text.replace(key, k_keywords.get(key));
                        }
                    }
                    paf.setFormula_sql(text);
                    paf.setUsed(true);
                    String entityName = "";
                    for (String entity : entitys) {
                        entityName = entityName + ";" + entity;
                    }
                    paf.setEntity_name(entityName);
                    if (entityName.length() > 1) {
                        paf.setEntity_name(entityName.substring(1));
                    }
                    paf.setField_name(paf.getCommAnalyseField_key());
                    if (paf.isUsed()) {
                        paf_fields.add(paf);
                    }
                }
                for (IPickCreateAnalyseFieldListener listener : listeners) {
                    listener.createAnalyseField(paf_fields);
                }
                ModelFrame.close();
            }
        });
        CloseAction.doCloseAction(btnCancel);
        para_tree.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                if (payQueryAnalysisField == null) {
                    return;
                }
                if (e.getClickCount() < 2) {
                    return;
                }

                if (para_tree.getSelectionPath() == null) {
                    return;
                }

                if (para_tree.getSelectionPath().getLastPathComponent() == para_tree.getModel().getRoot()) {
                    return;
                }
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) para_tree.getSelectionPath().getLastPathComponent();
                Object obj = node.getUserObject();
                DefaultMutableTreeNode parent = (DefaultMutableTreeNode) node.getParent();
                final int tmp = jtaFormulaText.getSelectionStart();
                String operator = "";
                if (obj instanceof String || obj instanceof EntityDef) {
                    if (node.getLevel() == 0) {
                        return;
                    }
                    List<TempFieldInfo> fields = new ArrayList<TempFieldInfo>();
                    Enumeration enumt = node.children();
                    while (enumt.hasMoreElements()) {
                        DefaultMutableTreeNode child = (DefaultMutableTreeNode) enumt.nextElement();
                        fields.add((TempFieldInfo) child.getUserObject());
                    }

                    FormulaParaFieldSelectPanel pnlFpfs = new FormulaParaFieldSelectPanel(obj.toString(), fields);
                    pnlFpfs.addPickFieldSelectListener(new IPickFieldSelectListener() {

                        @Override
                        public void pickFieldString(String text) {
                            jtaFormulaText.replaceSelection(text);
                            jtaFormulaText.setCaretPosition(tmp + text.length());
                            jtaFormulaText.requestFocus();
                        }
                    });
                    ModelFrame.showModel((JFrame) JOptionPane.getFrameForComponent(btnOk), pnlFpfs, true, "请选择字段", 750, 650);
                    return;
                }
                String entity_name = "[" + parent.getUserObject().toString() + ".";
                if (obj instanceof TempFieldInfo) {
                    operator = " " + entity_name + obj.toString() + "] ";
                }
                jtaFormulaText.replaceSelection(operator);
                jtaFormulaText.setCaretPosition(tmp + operator.length());
                jtaFormulaText.requestFocus();
            }
        });
        payQueryAnalysisField = null;
        if (ftable.getObjects().size() > 0) {
            payQueryAnalysisField = (CommAnalyseField) ftable.getObjects().get(0);
            jtaFormulaText.setText(payQueryAnalysisField.getFormula_text() == null ? "" : payQueryAnalysisField.getFormula_text());
        }
    }

}
