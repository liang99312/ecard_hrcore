/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * QueryParaPanel.java
 *
 * Created on 2009-8-30, 10:49:54
 */
package org.jhrcore.queryanalysis;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.util.ArrayList;
import java.util.Date;
import java.util.Hashtable;
import java.util.List;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.apache.log4j.Logger;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.JListBinding;
import org.jdesktop.swingbinding.SwingBindings;
import org.jhrcore.util.DateUtil;
import org.jhrcore.ui.WizardPanel;
import org.jhrcore.entity.Code;
import org.jhrcore.util.UtilTool;
import org.jhrcore.entity.base.EntityDef;
import org.jhrcore.entity.base.TempFieldInfo;
import org.jhrcore.entity.query.QueryPart;
import org.jhrcore.entity.query.QueryPartPara;
import org.jhrcore.rebuild.EntityBuilder;
import org.jhrcore.ui.ContextManager;
import org.jhrcore.ui.EditorFactory;
import org.jhrcore.ui.SearchListFieldDialog;

/**
 *
 * @author mxliteboss
 */
public class QueryParaPanel extends WizardPanel {

    private QueryPart queryPart;
    private JListBinding field_binding;
    private JListBinding condition_binding;
    private JListBinding para_binding;
    private JComboBoxBinding compare_binding;
    private EntityDef cur_entity;
    private List<QueryPartPara> paras = new ArrayList<QueryPartPara>();
    private TempFieldInfo cur_field;
    private QueryPartPara cur_para;
    private Class cur_class;
    private Object cur_obj;
    private List conditions = new ArrayList();
    private List<TempFieldInfo> field_infos = new ArrayList<TempFieldInfo>();
    private String cur_exp;
    private List<String> compare_str = new ArrayList<String>();
    private List<String> compare_num = new ArrayList<String>();
    private List<String> compare = new ArrayList<String>();
    private Logger log = Logger.getLogger(QueryParaPanel.class.getName());

    /** Creates new form QueryParaPanel */
    public QueryParaPanel(QueryPart queryPart) {
        this.queryPart = queryPart;
        initComponents();
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList();
        btnDownOrder = new javax.swing.JButton();
        btnUpOrder = new javax.swing.JButton();
        toolbar = new javax.swing.JToolBar();
        btnAddPara = new javax.swing.JButton();
        btnEditPara = new javax.swing.JButton();
        btnDelPara = new javax.swing.JButton();
        btnSelect = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jPanel4 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        btnAddCondition = new javax.swing.JButton();
        btnDelCondition = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();

        jList3.setBorder(javax.swing.BorderFactory.createTitledBorder("分段情况"));
        jScrollPane3.setViewportView(jList3);

        btnDownOrder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/move_up.png"))); // NOI18N

        btnUpOrder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/move_down.png"))); // NOI18N

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(btnUpOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDownOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(114, Short.MAX_VALUE))
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnUpOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDownOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        toolbar.setFloatable(false);
        toolbar.setRollover(true);

        btnAddPara.setText("新增");
        btnAddPara.setFocusable(false);
        btnAddPara.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddPara.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolbar.add(btnAddPara);

        btnEditPara.setText("改名");
        btnEditPara.setFocusable(false);
        btnEditPara.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEditPara.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolbar.add(btnEditPara);

        btnDelPara.setText("删除");
        btnDelPara.setFocusable(false);
        btnDelPara.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDelPara.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolbar.add(btnDelPara);

        btnSelect.setText("直观挑选");
        btnSelect.setFocusable(false);
        btnSelect.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSelect.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolbar.add(btnSelect);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolbar, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(toolbar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jList2);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("逻辑表达式"));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jPanel2.setLayout(new java.awt.BorderLayout());

        btnAddCondition.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/move_down.png"))); // NOI18N

        btnDelCondition.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/move_up.png"))); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddCondition, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDelCondition, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddCondition, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelCondition, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)))
                .addGap(10, 10, 10)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("字段列表"));
        jPanel6.setMaximumSize(new java.awt.Dimension(232, 32767));

        jScrollPane1.setViewportView(jList1);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCondition;
    private javax.swing.JButton btnAddPara;
    private javax.swing.JButton btnDelCondition;
    private javax.swing.JButton btnDelPara;
    private javax.swing.JButton btnDownOrder;
    private javax.swing.JButton btnEditPara;
    private javax.swing.JButton btnSelect;
    private javax.swing.JButton btnUpOrder;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JList jList3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JToolBar toolbar;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        rebuildForEntity(queryPart);
        paras.addAll(queryPart.getQueryPartParas());
        compare_str.add("=");
        compare_str.add("<");
        compare_str.add("<=");
        compare_str.add(">");
        compare_str.add(">=");
        compare_str.add("<>");
        compare_str.add("like%");
        compare_str.add("%like");
        compare_str.add("not like%");
        compare_str.add("%not like");
        compare_str.add("%like%");
        compare_str.add("is null");
        compare_str.add("is not null");
        compare_num.add("=");
        compare_num.add("<");
        compare_num.add("<=");
        compare_num.add(">");
        compare_num.add(">=");
        compare_num.add("<>");
        compare_num.add("is null");
        compare_num.add("is not null");
        compare_binding = SwingBindings.createJComboBoxBinding(UpdateStrategy.READ_WRITE, compare, jComboBox1);
        compare_binding.bind();
        para_binding = SwingBindings.createJListBinding(UpdateStrategy.READ_WRITE, paras, jList3);
        para_binding.bind();
        condition_binding = SwingBindings.createJListBinding(UpdateStrategy.READ_WRITE, conditions, jList2);
        condition_binding.bind();
        jList1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jList2.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jList3.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        SearchListFieldDialog.doQuickSearch("字段列表", jList1);
    }

    public void rebuildForEntity(QueryPart queryPart) {
        field_infos.clear();
        this.cur_entity = queryPart.getCur_entity();
        try {
            String package_name = EntityBuilder.getPackage(cur_entity);
            cur_class = Class.forName(package_name + cur_entity.getEntityName());
            cur_obj = cur_class.newInstance();
            List<TempFieldInfo> fields = EntityBuilder.getCommFieldInfoListOf(cur_class, EntityBuilder.COMM_FIELD_VISIBLE);
            field_infos.addAll(fields);
            field_binding = SwingBindings.createJListBinding(UpdateStrategy.READ_WRITE, field_infos, jList1);
            field_binding.bind();
        } catch (InstantiationException ex) {
            log.error(ex);
        } catch (IllegalAccessException ex) {
            log.error(ex);
        } catch (ClassNotFoundException ex) {
            log.error(ex);
        }
    }

    private void setupEvents() {
        btnSelect.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                Object obj = jList1.getSelectedValue();
                if (obj == null) {
                    return;
                }
                if (obj instanceof TempFieldInfo) {
                    TempFieldInfo tfi = (TempFieldInfo) obj;
                    if (tfi.getField().getType().getSimpleName().equals("Code")) {
                        QueryParaSimCreateDlg qpscDlg = new QueryParaSimCreateDlg(JOptionPane.getFrameForComponent(btnSelect), tfi);
                        ContextManager.locateOnMainScreenCenter(qpscDlg);
                        qpscDlg.setVisible(true);
                        if (qpscDlg.isClick_ok()) {
                            List<QueryPartPara> new_paras = qpscDlg.getParas();
                            for (QueryPartPara qpp : new_paras) {
                                qpp.setQueryPart(queryPart);
                                paras.add(qpp);
                                qpp.setOrder_no(paras.size());
                            }
                            para_binding.unbind();
                            para_binding.bind();
                            jList3.setSelectedIndex(paras.size() - 1);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "只有编码型字段才可直观挑选");
                    }
                }
            }
        });
        btnAddPara.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                Object scheme_name = JOptionPane.showInputDialog(JOptionPane.getFrameForComponent(btnAddPara), "", "请输入方案名：", JOptionPane.INFORMATION_MESSAGE, null, null, "");
                if (scheme_name == null) {
                    return;
                }
                if (scheme_name.toString().trim().equals("")) {
                    JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent(btnAddPara), "分段描述不可为空");
                    return;
                }
                QueryPartPara qpp = (QueryPartPara) UtilTool.createUIDEntity(QueryPartPara.class);
                qpp.setPara_name(scheme_name.toString());
                qpp.setQueryPart(queryPart);
                paras.add(qpp);
                qpp.setOrder_no(paras.size());
                para_binding.unbind();
                para_binding.bind();
                jList3.setSelectedIndex(paras.size() - 1);
            }
        });
        btnEditPara.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                Object obj = jList3.getSelectedValue();
                if (obj == null) {
                    return;
                }
                Object scheme_name = JOptionPane.showInputDialog(JOptionPane.getFrameForComponent(btnAddPara), obj.toString(), "请输入方案名：", JOptionPane.INFORMATION_MESSAGE, null, null, "");
                if (scheme_name == null) {
                    return;
                }
                if (scheme_name.toString().trim().equals("")) {
                    JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent(btnAddPara), "分段描述不可为空");
                    return;
                }
                QueryPartPara qpp = (QueryPartPara) obj;
                qpp.setPara_name(scheme_name.toString());
                para_binding.unbind();
                para_binding.bind();
                jList3.setSelectedValue(obj, true);
            }
        });
        btnDelPara.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (cur_para == null) {
                    return;
                }
                paras.remove(cur_para);
                para_binding.unbind();
                para_binding.bind();
            }
        });
        final FocusListener focusListener = new FocusListener() {

            @Override
            public void focusGained(FocusEvent e) {
            }

            @Override
            public void focusLost(FocusEvent e) {
                cur_exp = jTextField1.getText();
                cur_para.setPara_text(cur_exp);
                String this_exp = cur_exp;
                this_exp = this_exp.replace("+", " and ");
                this_exp = this_exp.replace(",", " or ");
                String means = cur_para.getPara_mean();
                for (int i = conditions.size(); i > 0; i--) {
                    this_exp = this_exp.replace(i + "", "{" + i + "}");
                }
                String[] means_str = means.split(";");
                Hashtable<String, String> means_key = new Hashtable<String, String>();
                for (String str : means_str) {
                    means_key.put(str.substring(0, str.indexOf(":") + 2), str.substring(str.indexOf(":") + 2, str.length()));
                }
                for (int i = conditions.size(); i > 0; i--) {
                    this_exp = this_exp.replace("{" + i + "}", means_key.get(i + ": "));
                }
                cur_para.setPara_sql(this_exp);
                condition_binding.unbind();
                condition_binding.bind();
            }
        };
        btnAddCondition.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (cur_para == null) {
                    JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent(jComboBox1), "请选择比较分段");
                    return;
                }
                if (cur_field == null) {
                    JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent(jComboBox1), "请选择比较字段");
                    return;
                }
                String operator = jComboBox1.getSelectedItem().toString();

                Object obj = EditorFactory.getValueBy(cur_obj, cur_field.getField_name());
                if (obj == null && !operator.contains("null")) {
                    JOptionPane.showMessageDialog(JOptionPane.getFrameForComponent(jComboBox1), "请输入比较条件");
                    return;
                }
                jTextField1.removeFocusListener(focusListener);
                Object mean_obj = obj == null ? "" : obj;
                Object showValue = obj;
                String type = cur_field.getField().getType().getSimpleName();
                if (type.equals("Code")) {
                    mean_obj = obj == null ? "" : ((Code) mean_obj).getCode_id();
                } else if (type.equals("Date")) {
                    mean_obj = obj == null ? "" : DateUtil.DateToStr((Date) obj, cur_field.getFormat());
                    showValue = mean_obj;
                }
                mean_obj = mean_obj == null ? "" : mean_obj;
                showValue = showValue == null ? "" : showValue;
                int index = conditions.size() + 1;
                String mean = cur_para.getPara_mean();
                String meaning = cur_para.getPara_meaning();
                String this_meaning = index + ": " + cur_field.getCaption_name() + operator + showValue;
                String this_mean = index + ": " + cur_field.getEntity_name() + "." + cur_field.getField_name().replace("_code_", "");
//                boolean isNum = true;
//                String field_type = cur_field.getField_type().toLowerCase();
//                if (field_type.toLowerCase().equals("string") ||field_type.toLowerCase().equals("code") || field_type.equals("date")) {
//                    isNum = false;
//                }
                this_mean = this_mean + getSQL(cur_field, operator, mean_obj.toString());
                if (mean == null || mean.equals("")) {
                    mean = this_mean;
                    meaning = this_meaning;
                } else {
                    mean = mean + ";" + this_mean;
                    meaning = meaning + ";" + this_meaning;
                }
                if (cur_exp == null || cur_exp.trim().equals("")) {
                    cur_exp = index + "";
                } else {
                    cur_exp = cur_exp + "+" + index;
                }
                jTextField1.setText(cur_exp);
                cur_para.setPara_mean(mean);
                cur_para.setPara_meaning(meaning);
                cur_para.setPara_text(cur_exp);
                conditions.add(this_meaning);
                String this_exp = cur_exp;
                this_exp = this_exp.replace("+", " and ");
                this_exp = this_exp.replace(",", " or ");
                String means = mean;
                for (int i = conditions.size(); i > 0; i--) {
                    this_exp = this_exp.replace(i + "", "{" + i + "}");
                }
                String[] means_str = means.split(";");
                Hashtable<String, String> means_key = new Hashtable<String, String>();
                for (String str : means_str) {
                    means_key.put(str.substring(0, str.indexOf(":") + 2), str.substring(str.indexOf(":") + 2, str.length()));
                }
                for (int i = conditions.size(); i > 0; i--) {
                    this_exp = this_exp.replace("{" + i + "}", means_key.get(i + ": "));
                }
                cur_para.setPara_sql(this_exp);
                condition_binding.unbind();
                condition_binding.bind();
                jTextField1.addFocusListener(focusListener);
            }
        });
        jTextField1.addFocusListener(focusListener);
        btnDelCondition.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                Object obj = jList2.getSelectedValue();
                if (obj == null) {
                    return;
                }
                int index = jList2.getSelectedIndex();
                int num = conditions.size() - 1;
                conditions.remove(obj);
                String mean = "";
                String[] means = cur_para.getPara_mean().split(";");
                String meaning = "";
                cur_exp = "";
                String this_exp = "";
                if (num > 0) {
                    cur_exp = jTextField1.getText();
                    char[] toCharArray = cur_exp.toCharArray();
                    List<String> list_exp = new ArrayList<String>();
                    for (int i = 0; i < toCharArray.length; i++) {
                        if (String.valueOf(toCharArray[i]).equals("+") || String.valueOf(toCharArray[i]).equals(",")) {
                            list_exp.add(String.valueOf(toCharArray[i]));
                        }
                    }
                    list_exp.add("+");
                    if (index == num) {
                        list_exp.remove(index - 1);
                    } else {
                        list_exp.remove(index);
                    }
                    int j = 0;
                    for (int i = 0; i < (num + 1); i++) {
                        if (i == index) {
                            continue;
                        }
                        means[j] = means[i].substring(means[i].indexOf(":") + 2);
                        j++;
                    }
                    cur_exp = "";
                    for (int i = 0; i < num; i++) {
                        mean += ";" + (i + 1) + ": " + means[i];
                        obj = conditions.get(i);
                        obj = (i + 1) + obj.toString().substring(obj.toString().indexOf(":"));
                        conditions.set(i, obj);
                        meaning += ";" + obj;
                        cur_exp += (i + 1) + list_exp.get(i);
                    }
                    if (!cur_exp.equals("")) {
                        cur_exp = cur_exp.substring(0, cur_exp.length() - 1);
                        mean = mean.substring(1);
                        meaning = meaning.substring(1);
                    }
                    this_exp = cur_exp;
                    this_exp = this_exp.replace("+", " and ");
                    this_exp = this_exp.replace(",", " or ");
                    for (int i = num; i > 0; i--) {
                        this_exp = this_exp.replace(i + "", "{" + i + "}");
                    }
                    for (int i = num; i > 0; i--) {
                        this_exp = this_exp.replace("{" + i + "}", means[i - 1]);
                    }
                }
                jTextField1.setText(cur_exp);
                cur_para.setPara_text(cur_exp);
                cur_para.setPara_mean(mean);
                cur_para.setPara_meaning(meaning);
                cur_para.setPara_sql(this_exp);
                condition_binding.unbind();
                condition_binding.bind();
            }
        });
        jList1.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                try {
                    if (cur_field == jList1.getSelectedValue()) {
                        return;
                    }
                    cur_field = (TempFieldInfo) jList1.getSelectedValue();
                    if (cur_field == null) {
                        return;
                    }
                    String field_type = cur_field.getField_type().toLowerCase();
                    compare.clear();
                    if (field_type.equals("string") || field_type.equals("code") || field_type.equals("date")) {
                        compare.addAll(compare_str);
                    } else {
                        compare.addAll(compare_num);
                    }
                    compare_binding.unbind();
                    compare_binding.bind();
                    jPanel2.removeAll();
                    JComponent com = EditorFactory.createEditorOf(cur_obj, cur_field.getField_name());
                    jPanel2.add(com, BorderLayout.CENTER);
                    jPanel2.updateUI();
                } catch (SecurityException ex) {
                    log.error(ex);
                }
            }
        });
        jList3.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (cur_para == jList3.getSelectedValue()) {
                    return;
                }
                cur_para = (QueryPartPara) jList3.getSelectedValue();
                if (cur_para == null) {
                    return;
                }
                cur_exp = cur_para.getPara_text();
                jTextField1.setText(cur_para.getPara_text());
                conditions.clear();
                String condition = cur_para.getPara_meaning();
                if (condition != null && !condition.trim().equals("")) {
                    String[] con = condition.split(";");
                    for (String key : con) {
                        conditions.add(key);
                    }
                }
                condition_binding.unbind();
                condition_binding.bind();
            }
        });
        btnUpOrder.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                movePosition(1);
            }
        });
        btnDownOrder.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                movePosition(-1);
            }
        });
        if (field_infos.size() > 0) {
            jList1.setSelectedIndex(0);
        }
        if (paras.size() > 0) {
            jList3.setSelectedIndex(0);
        }
    }

    private void movePosition(int step) {
        if (cur_para == null || paras.size() == 0) {
            return;
        }
        int index = jList3.getSelectedIndex();
        int ind = index + step;
        if (ind < 0 || ind >= paras.size()) {
            return;
        }
        QueryPartPara obj = paras.get(ind);
        paras.set(index, obj);
        paras.set(ind, cur_para);
        index = 0;
        for (int i = 0; i < paras.size(); i++) {
            ((QueryPartPara) paras.get(i)).setOrder_no(i);
        }
        para_binding.unbind();
        para_binding.bind();
        jList3.setSelectedValue(paras.get(ind), true);
    }

    private String getSQL(TempFieldInfo tfi, String operator, String value) {
        String field_type = tfi.getField_type().toLowerCase();
        String sql = "";
        if (operator.equals("like%")) {
            sql = " like '" + value + "%'";
        } else if (operator.equals("%like")) {
            sql = " like '%" + value + "'";
        } else if (operator.equals("%like%")) {
            sql = " like '%" + value + "%'";
        } else if (operator.equals("not like%")) {
            sql = " not like '" + value + "%'";
        } else if (operator.equals("%not like")) {
            sql = " not like '%" + value + "'";
        } else if (operator.equals("is null")) {
            sql = " is null";
        } else if (operator.equals("is not null")) {
            sql = " is not null";
        } else if (field_type.equals("string") || field_type.equals("code")) {
            sql = operator + "'" + value + "'";
        } else if (field_type.equals("date")) {
            sql = operator + DateUtil.toStringForQuery(DateUtil.StrToDate(value, tfi.getFormat()), tfi.getFormat());
        } else {
            sql = operator + value;
        }
        return sql;
    }

    @Override
    public boolean isValidate() {
        return true;
    }

    @Override
    public void beforeLeave() {
        queryPart.setQueryPartParas(paras);
    }

    @Override
    public String getTitle() {
        return "第二步：设计分段";
    }
}
