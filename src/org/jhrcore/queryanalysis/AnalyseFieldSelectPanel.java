/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AnalyseFieldSelectPanel.java
 *
 * Created on 2010-3-8, 21:22:39
 */
package org.jhrcore.queryanalysis;

import com.foundercy.pf.control.table.FTable;
import com.foundercy.pf.control.table.ITableCellEditable;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.apache.log4j.Logger;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.JListBinding;
import org.jdesktop.swingbinding.SwingBindings;
import org.jhrcore.ui.WizardPanel;
import org.jhrcore.util.UtilTool;
import org.jhrcore.entity.annotation.ClassAnnotation;
import org.jhrcore.entity.base.EntityDef;
import org.jhrcore.entity.base.TempFieldInfo;
import org.jhrcore.entity.query.CommAnalyseField;
import org.jhrcore.msg.pay.PayAnalyseMsg;
import org.jhrcore.rebuild.EntityBuilder;
import org.jhrcore.ui.task.IModuleCode;
import org.jhrcore.ui.ModelFrame;
import org.jhrcore.util.ComponentUtil;
import org.jhrcore.util.MsgUtil;

/**
 *
 * @author mxliteboss
 */
public class AnalyseFieldSelectPanel extends WizardPanel implements IModuleCode{

    private CommAnalysePara empAnalysePara;
    private FTable ftable_fields;
    private JComboBoxBinding jcomboBoxBindingEntity;
    private JListBinding jListBinding_Field;
    private List<EntityDef> listTempEntity = new ArrayList<EntityDef>();
    private List<TempFieldInfo> fields = new ArrayList<TempFieldInfo>();
    private EntityDef cur_entity;
    private Class cur_class;
    private Class field_class;
    private Logger log = Logger.getLogger(AnalyseFieldSelectPanel.class.getName());
    private String module_code = "PayAnalyse.btnAdd.stept3";

    /** Creates new form AnalyseFieldSelectPanel */
    public AnalyseFieldSelectPanel(CommAnalysePara commAnalysePara) {
        initComponents();
        this.empAnalysePara = commAnalysePara;
        initOthers();
        setupEvents();
    }

    public AnalyseFieldSelectPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        pnl_select_fields = new javax.swing.JPanel();
        btnDown = new javax.swing.JButton();
        btnUp = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        comboxEntity = new javax.swing.JComboBox();
        btnAdd = new javax.swing.JButton();
        btnAddAll = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnRemoveAll = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1_Fields = new javax.swing.JList();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        btnDefine = new javax.swing.JButton();

        pnl_select_fields.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnl_select_fields.setLayout(new java.awt.BorderLayout());

        btnDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/move_down.png"))); // NOI18N

        btnUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/move_up.png"))); // NOI18N

        jLabel1.setText("表选择：");

        comboxEntity.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/select_one.png"))); // NOI18N

        btnAddAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/select_all.png"))); // NOI18N

        btnRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/remove_one.png"))); // NOI18N

        btnRemoveAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/remove_all.png"))); // NOI18N

        jLabel2.setText("已选字段：");

        jList1_Fields.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1_Fields.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jScrollPane1.setViewportView(jList1_Fields);

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setSelected(true);
        jRadioButton2.setText("求和");

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setText("计数");

        buttonGroup1.add(jRadioButton4);
        jRadioButton4.setText("平均");

        buttonGroup1.add(jRadioButton5);
        jRadioButton5.setText("最大");

        buttonGroup1.add(jRadioButton6);
        jRadioButton6.setText("最小");

        btnDefine.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/define.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnAddAll, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnRemoveAll, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRadioButton3)
                                    .addComponent(jRadioButton2)
                                    .addComponent(jRadioButton4)
                                    .addComponent(jRadioButton5)
                                    .addComponent(jRadioButton6)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(comboxEntity, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnDefine, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(83, 83, 83)
                        .addComponent(btnDown, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(btnUp, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2)
                    .addComponent(pnl_select_fields, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboxEntity, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDown, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUp, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDefine, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnl_select_fields, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(btnAddAll, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(btnRemoveAll, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jRadioButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButton6))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 622, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 435, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAddAll;
    private javax.swing.JButton btnDefine;
    private javax.swing.JButton btnDown;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnRemoveAll;
    private javax.swing.JButton btnUp;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox comboxEntity;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList jList1_Fields;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnl_select_fields;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        try {
            field_class = Class.forName(empAnalysePara.getCommAnalyseScheme().getFieldClassName());
        } catch (ClassNotFoundException ex) {
            log.error(ex);
        }
        jcomboBoxBindingEntity = SwingBindings.createJComboBoxBinding(UpdateStrategy.READ_WRITE, listTempEntity, comboxEntity);
        jcomboBoxBindingEntity.bind();
        jListBinding_Field = SwingBindings.createJListBinding(UpdateStrategy.READ_WRITE, fields, jList1_Fields);
        jListBinding_Field.bind();
        List<String> show_fields = EntityBuilder.getCommFieldNameListOf(field_class, EntityBuilder.COMM_FIELD_VISIBLE);
        show_fields.remove("part_field");
        ftable_fields = new FTable(field_class, show_fields, false, false, false, "AnalyseFieldSelectPanel");
        ftable_fields.setEditable(true);
        ftable_fields.setITableCellEditable(new ITableCellEditable() {

            @Override
            public int getCellEditable(Object obj, String fileName) {
                if (fileName.equals("field_caption") && !((CommAnalyseField) obj).isUser_define()) {
                    return -1;
                }
                return 0;
            }
        });
        for (CommAnalyseField paf : empAnalysePara.getCommAnalyseScheme().getCommAnalyseFields()) {
            if (!paf.getStat_type().equals("普通")) {
                ftable_fields.addObject(paf);
            }
        }
        pnl_select_fields.add(ftable_fields, BorderLayout.CENTER);
    }

    public void rebuild() {
        listTempEntity.clear();
        for (Object obj : empAnalysePara.getCal_entitys()) {
            EntityDef ed = (EntityDef) obj;
            listTempEntity.add(ed);
        }
        jcomboBoxBindingEntity.unbind();
        jcomboBoxBindingEntity.bind();
        if (listTempEntity.size() > 0) {
            comboxEntity.setSelectedIndex(0);
        }
    }

    private void setupEvents() {
        btnDefine.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                List para_list = new ArrayList();
                for (Object obj : ftable_fields.getObjects()) {
                    CommAnalyseField eaf = (CommAnalyseField) obj;
                    if (eaf.isUser_define()) {
                        para_list.add(obj);
                    }
                }
                DefineAnalyseFieldPanel pnlDaf = new DefineAnalyseFieldPanel(empAnalysePara, para_list);
                pnlDaf.addPickCreateAnalyseFieldListener(new IPickCreateAnalyseFieldListener() {

                    @Override
                    public void createAnalyseField(List payQueryAnalysisFields) {
                        for (Object payQueryAnalysisField : payQueryAnalysisFields) {
                            CommAnalyseField field = (CommAnalyseField) payQueryAnalysisField;
                            field.setStat_type(getAnalysisType());
                            field.setCal_type("X");
                            field.setUser_define(true);
                            field.setCommAnalyseScheme(empAnalysePara.getCommAnalyseScheme());
                            if (field.getNew_flag() == 1) {
                                ftable_fields.addObject(payQueryAnalysisField);
                            }
                            ftable_fields.updateUI();
                        }

                    }
                });
                ModelFrame.showModel((JFrame) JOptionPane.getFrameForComponent(btnRemove), pnlDaf, true, PayAnalyseMsg.ttl011, 750, 600);
            }
        });
        comboxEntity.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                Object obj = comboxEntity.getSelectedItem();
                if (obj == null) {
                    return;
                }
                cur_entity = (EntityDef) comboxEntity.getSelectedItem();
                refreshEntityField(cur_entity);
            }
        });
        btnAddAll.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                addAnalysisField(fields, getAnalysisType());
            }
        });
        btnAdd.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (jList1_Fields.getSelectedValue() == null) {
                    return;
                }
                List<TempFieldInfo> add_infos = new ArrayList<TempFieldInfo>();
                for (Object obj : jList1_Fields.getSelectedValues()) {
                    TempFieldInfo curTempField = (TempFieldInfo) obj;
                    add_infos.add(curTempField);
                }
                addAnalysisField(add_infos, getAnalysisType());

            }
        });
        btnRemove.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                ftable_fields.deleteSelectedRows();
            }
        });
        btnRemoveAll.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                ftable_fields.deleteAllRows();
            }
        });
        rebuild();
        ComponentUtil.setSysFuntionNew(this, false);
    }

    /**
     * 传入一个字段列表转换为新增的统计项目
     * @param field_infos: 传入的字段列表
     */
    private void addAnalysisField(List<TempFieldInfo> field_infos, String stat_type) {
        for (TempFieldInfo curTempField : field_infos) {
            CommAnalyseField qaField = (CommAnalyseField) UtilTool.createUIDEntity(field_class);
            qaField.setCommAnalyseScheme(empAnalysePara.getCommAnalyseScheme());
            qaField.setEntity_caption(curTempField.getEntity_caption());
            qaField.setEntity_name(curTempField.getEntity_name());
            qaField.setField_caption(curTempField.getCaption_name());
            qaField.setField_name(curTempField.getField_name().toLowerCase().replace("_code_", ""));
            qaField.setStat_type(stat_type);
            ftable_fields.addObject(qaField);
        }
    }
    //获得当前统计方式

    private String getAnalysisType() {
        String type = "求和";
        if (jRadioButton3.isSelected()) {
            type = "计数";
        } else if (jRadioButton4.isSelected()) {
            type = "平均";
        } else if (jRadioButton5.isSelected()) {
            type = "最大";
        } else if (jRadioButton6.isSelected()) {
            type = "最小";
        }
        return type;
    }

    /**
     * 根据当前选择表刷新表字段列表
     * @param ed：当前表
     */
    private void refreshEntityField(EntityDef ed) {
        try {
            cur_class = Class.forName(EntityBuilder.getPackage(ed) + ed.getEntityName());
            List<TempFieldInfo> field_infos;// = EntityBuilder.getCommFieldInfoListOf(cur_class, EntityBuilder.COMM_FIELD_VISIBLE);
            fields.clear();
            if (ed.getEntityName().equals("A01") || cur_class.getSuperclass().getSimpleName().equals("A01")) {
                TempFieldInfo tfi = new TempFieldInfo();
                tfi.setField_name("a01_key");
                tfi.setCaption_name("人数");
                tfi.setField_type("Integer");
                tfi.setEntity_name(ed.getEntityName());
                ClassAnnotation ca = (ClassAnnotation) cur_class.getAnnotation(ClassAnnotation.class);
                tfi.setEntity_caption(ca.displayName());
                field_infos = EntityBuilder.getDeclareFieldInfoListOf(cur_class, EntityBuilder.COMM_FIELD_VISIBLE);
                field_infos.add(0, tfi);
            } else {
                field_infos = EntityBuilder.getCommFieldInfoListOf(cur_class, EntityBuilder.COMM_FIELD_VISIBLE);
            }

            for (TempFieldInfo tfi : field_infos) {
                if (tfi.getField_type().equals("String") || tfi.getField_type().equals("Code") || tfi.getField_type().equals("Date") || tfi.getField_type().toLowerCase().equals("boolean")) {
                    continue;
                }
                fields.add(tfi);
            }
            jListBinding_Field.unbind();
            jListBinding_Field.bind();
        } catch (ClassNotFoundException ex) {
            log.error(ex);
        }
    }

    @Override
    public boolean isValidate() {
        if (ftable_fields.getObjects().size() == 0) {
            MsgUtil.showErrorMsg(PayAnalyseMsg.msg024);
            return false;
        }
        return true;
    }

    @Override
    public void beforeLeave() {
        ftable_fields.editingStopped();
        List<CommAnalyseField> pafs = empAnalysePara.getCommAnalyseScheme().getCommAnalyseFields();
        List<CommAnalyseField> remove_paf = new ArrayList<CommAnalyseField>();
        for (CommAnalyseField paf : pafs) {
            if (!paf.getStat_type().equals("普通")) {
                remove_paf.add(paf);
            }
        }
        pafs.removeAll(remove_paf);
        pafs.addAll(ftable_fields.getObjects());
        empAnalysePara.getCommAnalyseScheme().setCommAnalyseFields(pafs);
    }

    @Override
    public String getTitle() {
        return PayAnalyseMsg.ttl036.toString();
    }

    @Override
    public String getModuleCode() {
        return module_code;
    }
}

