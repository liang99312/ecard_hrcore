/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DefineExtraFieldPanel.java
 *
 * Created on 2010-3-2, 9:24:50
 */
package org.jhrcore.queryanalysis;

import com.foundercy.pf.control.table.FTable;
import com.foundercy.pf.control.table.RowChangeListner;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import org.jhrcore.client.CommUtil;
import org.jhrcore.util.DbUtil;
import org.jhrcore.client.UserContext;
import org.jhrcore.util.UtilTool;
import org.jhrcore.entity.base.EntityDef;
import org.jhrcore.entity.base.TempFieldInfo;
import org.jhrcore.entity.query.QueryExtraField;
import org.jhrcore.entity.salary.ValidateSQLResult;
import org.jhrcore.iservice.impl.CommImpl;
import org.jhrcore.ui.BeanPanel;
import org.jhrcore.ui.FormulaEditorPanel;
import org.jhrcore.ui.FormulaParaFieldSelectPanel;
import org.jhrcore.ui.HrTextPane;
import org.jhrcore.ui.ModelFrame;
import org.jhrcore.ui.ValidateEntity;
import org.jhrcore.ui.action.CloseAction;
import org.jhrcore.ui.listener.IPickFieldSelectListener;
import org.jhrcore.ui.listener.IPickFormulaEditorListener;
import org.jhrcore.ui.renderer.HRRendererView;
import org.jhrcore.util.MsgUtil;

/**
 *
 * @author mxliteboss
 */
public class DefineExtraFieldPanel extends javax.swing.JPanel {

    private FTable ftable;
    private QueryExtraField cur_field = null;
    private HrTextPane jtaFormulaText;
    private FormulaEditorPanel pnlEditor = new FormulaEditorPanel();
    private AnalyseParaModel analyseParaModel;
    private JTree para_tree;
    private List<String> fields = new ArrayList<String>();
    private DocumentListener doc_listener;
    private Object change_obj;
    private List entity_list;
    private String scheme_key;
    private String field_code;
    private boolean detail_change_flag = false;
    private List<IPickDefineExtraFieldListener> listeners = new ArrayList<IPickDefineExtraFieldListener>();

    public void addPickDefineExtraFieldListener(IPickDefineExtraFieldListener listener) {
        listeners.add(listener);
    }

    public void delPickDefineExtraFieldListener(IPickDefineExtraFieldListener listener) {
        listeners.remove(listener);
    }

    /** Creates new form DefineExtraFieldPanel */
    public DefineExtraFieldPanel(String scheme_key, String field_code) {
        this.field_code = field_code;
        this.scheme_key = scheme_key;
        initComponents();
        initOthers();
        setupEvents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel5 = new javax.swing.JPanel();
        toolbar = new javax.swing.JToolBar();
        btnAdd = new javax.swing.JButton();
        btnDel = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        pnlLeft = new javax.swing.JPanel();
        btnUp = new javax.swing.JButton();
        btnDown = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jspMain = new javax.swing.JSplitPane();
        pnlFormula = new javax.swing.JPanel();
        pnl = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        pnlForEditor = new javax.swing.JPanel();
        pnlPara = new javax.swing.JPanel();
        btnCheck = new javax.swing.JButton();
        btnShowSQL = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        btnOk = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();

        jSplitPane1.setDividerLocation(400);
        jSplitPane1.setDividerSize(2);

        toolbar.setFloatable(false);
        toolbar.setRollover(true);

        btnAdd.setText("新增");
        btnAdd.setFocusable(false);
        btnAdd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAdd.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolbar.add(btnAdd);

        btnDel.setText("删除");
        btnDel.setFocusable(false);
        btnDel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolbar.add(btnDel);

        btnSave.setText("保存");
        btnSave.setFocusable(false);
        btnSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolbar.add(btnSave);

        pnlLeft.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlLeft.setLayout(new java.awt.BorderLayout());

        btnUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/move_up.png"))); // NOI18N
        btnUp.setMaximumSize(new java.awt.Dimension(22, 22));
        btnUp.setMinimumSize(new java.awt.Dimension(22, 22));
        btnUp.setPreferredSize(new java.awt.Dimension(22, 22));

        btnDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/move_down.png"))); // NOI18N
        btnDown.setMaximumSize(new java.awt.Dimension(22, 22));
        btnDown.setMinimumSize(new java.awt.Dimension(22, 22));
        btnDown.setPreferredSize(new java.awt.Dimension(22, 22));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolbar, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnUp, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDown, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(327, Short.MAX_VALUE))
            .addComponent(pnlLeft, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(toolbar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlLeft, javax.swing.GroupLayout.DEFAULT_SIZE, 369, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnUp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jSplitPane1.setLeftComponent(jPanel5);

        jspMain.setDividerLocation(200);
        jspMain.setDividerSize(2);
        jspMain.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        pnlFormula.setBorder(javax.swing.BorderFactory.createTitledBorder("计算表达式："));
        pnlFormula.setLayout(new java.awt.BorderLayout());
        jspMain.setTopComponent(pnlFormula);

        pnlForEditor.setLayout(new java.awt.BorderLayout());

        pnlPara.setBorder(javax.swing.BorderFactory.createTitledBorder("字段属性"));
        pnlPara.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(pnlForEditor, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlPara, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlPara, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
            .addComponent(pnlForEditor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
        );

        btnCheck.setText("保存校验");

        btnShowSQL.setText("查看SQL");

        btnClear.setText("清空");

        javax.swing.GroupLayout pnlLayout = new javax.swing.GroupLayout(pnl);
        pnl.setLayout(pnlLayout);
        pnlLayout.setHorizontalGroup(
            pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(btnCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnShowSQL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnClear)
                .addContainerGap(77, Short.MAX_VALUE))
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlLayout.setVerticalGroup(
            pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLayout.createSequentialGroup()
                .addGroup(pnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCheck)
                    .addComponent(btnShowSQL)
                    .addComponent(btnClear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jspMain.setRightComponent(pnl);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jspMain, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jspMain, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(jPanel6);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 757, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        btnOk.setText("应用");

        btnClose.setText("关闭");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 757, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(597, Short.MAX_VALUE)
                .addComponent(btnOk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClose)
                .addGap(40, 40, 40))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOk)
                    .addComponent(btnClose))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCheck;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnDown;
    private javax.swing.JButton btnOk;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnShowSQL;
    private javax.swing.JButton btnUp;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jspMain;
    private javax.swing.JPanel pnl;
    private javax.swing.JPanel pnlForEditor;
    private javax.swing.JPanel pnlFormula;
    private javax.swing.JPanel pnlLeft;
    private javax.swing.JPanel pnlPara;
    private javax.swing.JToolBar toolbar;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        entity_list = CommUtil.fetchEntities("from EntityDef ed join fetch ed.entityClass join fetch ed.entityClass.moduleInfo where ed.entityClass.entityType_code='GZZJ' or ed.entityName='A01' order by ed.order_no");
        analyseParaModel = new AnalyseParaModel(entity_list);
        para_tree = new JTree(analyseParaModel);
        HRRendererView.getParaFieldTypeMap(para_tree).initTree(para_tree);
        pnlPara.add(new JScrollPane(para_tree), BorderLayout.CENTER);
        fields.add("order_no");
        fields.add("field_caption");
        fields.add("field_type");
        fields.add("used");
        ftable = new FTable(QueryExtraField.class, fields, false, false, false, "DefineAnalyseFieldPanel");
        ftable.setEditable(true);
        List<String> disable_fields = new ArrayList<String>();
        disable_fields.add("field_type");
        disable_fields.add("order_no");
        ftable.setDisable_fields(disable_fields);
        pnlLeft.add(ftable, BorderLayout.CENTER);
        jtaFormulaText = new HrTextPane();
        pnlFormula.add(jtaFormulaText);
        pnlForEditor.add(pnlEditor, BorderLayout.CENTER);
        jtaFormulaText.revokeDocumentKeys(analyseParaModel.getLookups(), analyseParaModel.getKeyword_groups(), analyseParaModel.getK_keywords());
        ftable.setObjects(CommUtil.fetchEntities("from QueryExtraField qef where qef.scheme_key='" + scheme_key + "' and qef.field_code='" + field_code + "' and editable=1 order by qef.order_no"));

    }

    private void setupEvents() {
        pnlEditor.addPickFormulaEditorListener(new IPickFormulaEditorListener() {

            @Override
            public void pickEditor(String operator) {
                //operator:公式编辑器Panel返回的运算符,如：where
                int tmp = jtaFormulaText.getSelectionStart();
                jtaFormulaText.replaceSelection(operator.toLowerCase());
                jtaFormulaText.setCaretPosition(tmp + operator.length());
                jtaFormulaText.requestFocus();
            }
        });
        btnClear.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                jtaFormulaText.setText("");
                jtaFormulaText.updateUI();
                if (cur_field != null) {
                    cur_field.setField_text("");
                    cur_field.setField_sql("");
                    change_obj = cur_field;
                }
            }
        });
        jspMain.addComponentListener(new ComponentAdapter() {

            @Override
            public void componentResized(ComponentEvent e) {
                jspMain.setDividerLocation(jspMain.getHeight() - 270);
            }
        });
        btnAdd.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                final QueryExtraField field = (QueryExtraField) UtilTool.createUIDEntity(QueryExtraField.class);
                ValidateEntity ve = new ValidateEntity() {

                    @Override
                    public boolean isEntityValidate(Object obj) {
                        if (field.getField_caption() == null || field.getField_caption().trim().equals("")) {
                            JOptionPane.showMessageDialog(null, "项目名称不可为空");
                            return false;
                        }
                        if (CommUtil.exists("select 1 from QueryExtraField qef where qef.scheme_key='" + scheme_key + "' and qef.field_code='" + field_code + "' and qef.queryExtraField_key<>'" + field.getQueryExtraField_key() + "' and qef.field_caption='" + field.getField_caption() + "'")) {
                            JOptionPane.showMessageDialog(null, "项目名称不允许重复");
                            return false;
                        }
                        return true;
                    }
                };
                List<String> edit_fields = new ArrayList<String>();
                edit_fields.add("field_caption");
                edit_fields.add("field_type");
                field.setScheme_key(scheme_key);
                field.setField_code(field_code);
                if (BeanPanel.edit((JFrame) JOptionPane.getFrameForComponent(btnAdd), field, edit_fields, "新增项目", ve)) {
                    field.setOrder_no(ftable.getObjects().size() + 1);
                    field.setUsed(false);
                    ValidateSQLResult result = CommUtil.saveEntity(field);
                    if (result.getResult() == 0) {
                        ftable.addObject(field);
                        int ind = ftable.getObjects().size() - 1;
                        ftable.setRowSelectionInterval(ind, ind);
                    } else {
                        MsgUtil.showHRSaveErrorMsg(result);
                    }
                }
            }
        });
        btnDel.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                List<String> list = ftable.getSelectKeys();
                if (list.isEmpty()) {
                    return;
                }
                if (JOptionPane.showConfirmDialog(JOptionPane.getFrameForComponent(btnDel),
                        "确定要删除选中的项目吗", "询问", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE) != JOptionPane.OK_OPTION) {
                    return;
                }
                ValidateSQLResult result = CommUtil.deleteObjs("QueryExtraField", "QueryExtraField_key", list);//.deleteList(list);
                if (result.getResult() == 0) {
                    ftable.deleteSelectedRows();
                    if (ftable.getObjects().size() > 0) {
                        ftable.setRowSelectionInterval(0, 0);
                    }
                } else {
                    MsgUtil.showHRDelErrorMsg(result);
                }
            }
        });
        doc_listener = new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                detail_change_flag = true;
                if (cur_field != null) {
                    cur_field.setField_text(jtaFormulaText.getText());
                }
            }
        };
        jtaFormulaText.getDocument().addDocumentListener(doc_listener);
        ftable.addRowChangeListner(new RowChangeListner() {

            @Override
            public void rowChanged(Object obj) {
                change_obj = obj;
            }
        });
        ftable.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (change_obj != null) {
                    saveObj((QueryExtraField) change_obj);
                }
                if (cur_field == ftable.getCurrentRow()) {
                    return;
                }
                cur_field = (QueryExtraField) ftable.getCurrentRow();
                if (cur_field != null) {
                    List entityList = new ArrayList();
                    entityList.addAll(entity_list);
                    EntityDef result_ed = null;
                    for (Object obj : entityList) {
                        EntityDef ed = (EntityDef) obj;
                        if (ed.getEntityName().equals("A01")) {
                            result_ed = ed;
                            break;
                        }
                    }
                    if (field_code.equals("部门穿透")) {
                        if (cur_field.getField_type().equals("普通")) {
                            entityList.clear();
                            entityList.add(result_ed);
                        } else {
                            entityList.remove(result_ed);
                        }
                    }
                    analyseParaModel.buildTree(entityList);
                    jtaFormulaText.getDocument().removeDocumentListener(doc_listener);
                    jtaFormulaText.setText(cur_field.getField_text());
                    jtaFormulaText.getDocument().addDocumentListener(doc_listener);
                    para_tree.updateUI();
                    detail_change_flag = false;
                }
            }
        });
        btnShowSQL.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (cur_field == null) {
                    return;
                }
                MsgUtil.showHRValidateMsg( transferToSQL(jtaFormulaText.getText(), cur_field), "SQL脚本查看", cur_field.isUsed());
            }
        });
        btnUp.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                moveUp(-1);
            }
        });
        btnDown.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                moveUp(1);
            }
        });
        btnSave.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                saveObj(cur_field);
            }
        });
        btnCheck.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                detail_change_flag = true;
                saveObj(cur_field);
            }
        });
        btnOk.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                ftable.editingStopped();
                saveObj(cur_field);
                List<QueryExtraField> qefs = new ArrayList<QueryExtraField>();
                List list = ftable.getObjects();
                for (Object obj : list) {
                    QueryExtraField qef = (QueryExtraField) obj;
                    if (qef.isUsed()) {
                        qefs.add(qef);
                    }
                }
                for (IPickDefineExtraFieldListener listener : listeners) {
                    listener.pickField(qefs);
                }
                ModelFrame.close();
            }
        });
        CloseAction.doCloseAction(btnClose);
        para_tree.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                if (cur_field == null) {
                    return;
                }
                if (e.getClickCount() < 2) {
                    return;
                }

                if (para_tree.getSelectionPath() == null) {
                    return;
                }

                if (para_tree.getSelectionPath().getLastPathComponent() == para_tree.getModel().getRoot()) {
                    return;
                }
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) para_tree.getSelectionPath().getLastPathComponent();
                Object obj = node.getUserObject();
                DefaultMutableTreeNode parent = (DefaultMutableTreeNode) node.getParent();
                final int tmp = jtaFormulaText.getSelectionStart();
                String operator = "";
                if (obj instanceof String || obj instanceof EntityDef) {
                    if (node.getLevel() == 0) {
                        return;
                    }
                    List<TempFieldInfo> fields = new ArrayList<TempFieldInfo>();
                    Enumeration enumt = node.children();
                    while (enumt.hasMoreElements()) {
                        DefaultMutableTreeNode child = (DefaultMutableTreeNode) enumt.nextElement();
                        fields.add((TempFieldInfo) child.getUserObject());
                    }
                    FormulaParaFieldSelectPanel pnlFpfs = new FormulaParaFieldSelectPanel(obj.toString(), fields);
                    pnlFpfs.addPickFieldSelectListener(new IPickFieldSelectListener() {

                        @Override
                        public void pickFieldString(String text) {
                            jtaFormulaText.replaceSelection(text);
                            jtaFormulaText.setCaretPosition(tmp + text.length());
                            jtaFormulaText.requestFocus();
                        }
                    });
                    ModelFrame.showModel((JFrame) JOptionPane.getFrameForComponent(btnOk), pnlFpfs, true, "请选择字段", 750, 650);
                    return;
                }
                String entity_name = "[" + parent.getUserObject().toString() + ".";
                if (obj instanceof TempFieldInfo) {
                    operator = " " + entity_name + obj.toString() + "] ";
                }
                jtaFormulaText.replaceSelection(operator);
                jtaFormulaText.setCaretPosition(tmp + operator.length());
                jtaFormulaText.requestFocus();
            }
        });
    }

    private void moveUp(int step) {
        List list = new ArrayList();
        list.addAll(ftable.getObjects());
        int len = list.size();
        if (len <= 1) {
            return;
        }
        saveObj(cur_field);
        int row = ftable.getCurrentRowIndex();
        row = row + step;
        if (row > len) {
            row = 0;
        }
        list.remove(cur_field);
        if (row > 0) {
            list.add(row, cur_field);
        } else {
            row = list.size();
            list.add(cur_field);
        }
        List<String[]> data = new ArrayList<String[]>();
        for (int i = 0; i < len; i++) {
            QueryExtraField qef = (QueryExtraField) list.get(i);
            qef.setOrder_no(i + 1);
            data.add(new String[]{qef.getQueryExtraField_key(), qef.getOrder_no() + ""});
        }
        ValidateSQLResult result = CommImpl.saveExtraFieldOrder(data);
        if (result.getResult() == 0) {
            ftable.setObjects(list);
            ftable.setRowSelectionInterval(row, row);
            ftable.updateUI();
        } else {
            MsgUtil.showHRSaveErrorMsg(result);
        }
    }

    private void saveObj(QueryExtraField extfield) {
        if (extfield == null) {
            return;
        }
        ftable.editingStopped();
        String sql = transferToSQL(jtaFormulaText.getText(), extfield);
        if (detail_change_flag || extfield.isUsed()) {
            extfield.setUsed(validateSQL(sql));
        }
        ValidateSQLResult result = CommUtil.updateEntity(extfield);
        if (result.getResult() == 0) {
            MsgUtil.showHRSaveSuccessMsg(btnOk);
        } else {
            MsgUtil.showHRSaveErrorMsg(result);
        }
        change_obj = null;
        detail_change_flag = false;
        ftable.updateUI();
    }

    private boolean validateSQL(String sql) {
        ValidateSQLResult result = CommUtil.validateSQL(sql);
        boolean results = false;
        if (result != null) {
            String msg = sql;
            if (result.getResult() == 0) {
                results = true;
            } else {
                msg = msg + "\n\n" + result.getMsg();
            }
            if (detail_change_flag) {
                MsgUtil.showHRValidateMsg(msg, "SQL脚本查看", result.getResult() == 0);
            }
        }
        return results;
    }

    private String transferToSQL(String text, QueryExtraField extfield) {
        HashSet<String> entitys = new HashSet<String>();
        String s_select = text;
        Hashtable<String, String> k_keywords = jtaFormulaText.getK_keywords();
        for (String key : k_keywords.keySet()) {
            if (s_select.contains(key)) {
                String value = k_keywords.get(key);
                entitys.add(value.split("\\.")[0]);
                s_select = s_select.replace(key, k_keywords.get(key));
            }
        }
        String s_from = "C21";
        String s_where = "1=1";
        String s_group = "";
        String sql = "";
        if (field_code.equals("部门穿透")) {
            if (extfield.getField_type().equals("普通")) {
                s_from = "A01";
            } else {
                for (String key : entitys) {
                    if (key.equals("C21")) {
                        continue;
                    }
                    s_from = s_from + "," + key;
                    s_where += " and C21.pay_key=" + key + ".pay_key";
                }
                s_group = "C21.A01_KEY";
            }
            extfield.setField_sql(s_select);
            extfield.setEntity_name(s_from.replace("\\,", "\\;"));
            if (extfield.getField_type().equals("普通")) {
                sql = "select " + s_select + " from " + s_from + " where 1=0";
            } else {
                sql = "select " + DbUtil.getAnlayseOperator(extfield.getField_type()) + "(" + s_select + ") from " + s_from + " where " + s_where + " and 1=0 group by " + s_group;
            }
        } else {
            for (String key : entitys) {
                if (key.equals("C21")) {
                    continue;
                }
                s_from = s_from + "," + key;
                if (key.equals("A01")) {
                    s_where += " and C21.A01_KEY=A01.A01_KEY";
                } else {
                    s_where += " and C21.pay_key=" + key + ".pay_key";
                }
            }
            extfield.setField_sql(s_select);
//            System.out.println("aa:"+s_from.replace(",", ";"));
            extfield.setEntity_name(s_from.replace(",", ";"));
            sql = "select " + s_select + " from " + s_from + " where " + s_where + " and 1=0 ";
        }
        return sql;
    }
}
