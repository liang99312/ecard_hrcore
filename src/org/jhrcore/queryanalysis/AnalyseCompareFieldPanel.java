/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AnalyseCompareFieldPanel.java
 *
 * Created on 2010-3-9, 16:43:22
 */
package org.jhrcore.queryanalysis;

import com.foundercy.pf.control.table.FTable;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import org.apache.log4j.Logger;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import org.jhrcore.client.CommUtil;
import org.jhrcore.client.UserContext;
import org.jhrcore.ui.WizardDialog;
import org.jhrcore.ui.WizardPanel;
import org.jhrcore.util.UtilTool;
import org.jhrcore.entity.base.EntityDef;
import org.jhrcore.entity.base.TempFieldInfo;
import org.jhrcore.entity.query.CommAnalyseField;
import org.jhrcore.entity.query.EmpQueryAnalyseField;
import org.jhrcore.entity.query.QueryPart;
import org.jhrcore.msg.pay.PayAnalyseMsg;
import org.jhrcore.rebuild.EntityBuilder;
import org.jhrcore.ui.task.IModuleCode;
import org.jhrcore.ui.renderer.HRRendererView;
import org.jhrcore.util.ComponentUtil;
import org.jhrcore.util.MsgUtil;

/**
 *
 * @author mxliteboss
 */
public class AnalyseCompareFieldPanel extends WizardPanel implements IModuleCode{

    private CommAnalysePara empAnalysePara;
    private FTable ftable_fields;
    private JComboBoxBinding jcomboBoxBindingEntity;
    private List<EntityDef> listTempEntity = new ArrayList<EntityDef>();
    private List<TempFieldInfo> fields = new ArrayList<TempFieldInfo>();
    private EntityDef cur_entity;
    private Class cur_class;
    private JTree field_tree;
    private AnalyseFieldModel model;
    private Class field_class;
    private Logger log = Logger.getLogger(AnalyseCompareFieldPanel.class.getName());
    private String module_code = "PayAnalyse.btnAdd.stept4";
    

    /** Creates new form AnalyseCompareFieldPanel */
    public AnalyseCompareFieldPanel(CommAnalysePara empAnalysePara) {
        this.empAnalysePara = empAnalysePara;
        initComponents();
        initOthers();
        setupEvents();
    }

    public AnalyseCompareFieldPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        pnl_select_fields = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        comboxEntity = new javax.swing.JComboBox();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        btnDefine = new javax.swing.JButton();
        pnlField = new javax.swing.JPanel();
        btnEdit = new javax.swing.JButton();

        pnl_select_fields.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnl_select_fields.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("表选择：");

        comboxEntity.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/select_one.png"))); // NOI18N

        btnRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/remove_one.png"))); // NOI18N

        jLabel2.setText("统计指标：");

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setSelected(true);
        jRadioButton2.setText("横向");

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setText("纵向");

        btnDefine.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/define.png"))); // NOI18N

        pnlField.setLayout(new java.awt.BorderLayout());

        btnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/edit.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(pnlField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(comboxEntity, 0, 170, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton3)
                            .addComponent(jRadioButton2)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnDefine, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pnl_select_fields, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                    .addComponent(jLabel2))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboxEntity, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDefine, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlField, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE)
                    .addComponent(pnl_select_fields, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jRadioButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jRadioButton3)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 589, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 472, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDefine;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnRemove;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox comboxEntity;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JPanel pnlField;
    private javax.swing.JPanel pnl_select_fields;
    // End of variables declaration//GEN-END:variables

    private void initOthers() {
        try {
            field_class = Class.forName(empAnalysePara.getCommAnalyseScheme().getFieldClassName());
        } catch (ClassNotFoundException ex) {
            log.error(ex);
        }
        listTempEntity.clear();
        listTempEntity.addAll(empAnalysePara.getCal_entitys());
        jcomboBoxBindingEntity = SwingBindings.createJComboBoxBinding(UpdateStrategy.READ_WRITE, listTempEntity, comboxEntity);
        jcomboBoxBindingEntity.bind();
        jRadioButton3.setEnabled(empAnalysePara.getCommAnalyseScheme().getAnalyse_type() == 2);
        List<String> show_fields = EntityBuilder.getCommFieldNameListOf(field_class, EntityBuilder.COMM_FIELD_VISIBLE);
        show_fields.remove("user_define");
        ftable_fields = new FTable(field_class, show_fields, false, false, false, "AnalyseCompareFieldPanel");
        List<String> disable_fields = new ArrayList<String>();
        disable_fields.add("field_caption");
        ftable_fields.setDisable_fields(disable_fields);
        ftable_fields.setEditable(true);
        for (CommAnalyseField paf : empAnalysePara.getCommAnalyseScheme().getCommAnalyseFields()) {
            if (!paf.getStat_type().equals("普通")) {
                continue;
            }
            ftable_fields.addObject(paf);
        }
        pnl_select_fields.add(ftable_fields, BorderLayout.CENTER);
        model = new AnalyseFieldModel();
        field_tree = new JTree(model);
        HRRendererView.getCommMap().initTree(field_tree);
        field_tree.setRootVisible(false);
        field_tree.setShowsRootHandles(true);
        pnlField.add(new JScrollPane(field_tree), BorderLayout.CENTER);
    }

    public void rebuild() {
        jRadioButton3.setEnabled(empAnalysePara.getCommAnalyseScheme().getAnalyse_type() == 2);
        listTempEntity.clear();
        listTempEntity.addAll(empAnalysePara.getCal_entitys());
        jcomboBoxBindingEntity.unbind();
        jcomboBoxBindingEntity.bind();
        comboxEntity.setSelectedIndex(0);
    }

    private void setupEvents() {
        btnEdit.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                Object obj = ftable_fields.getCurrentRow();
                if (obj == null) {
                    return;
                }
                EmpQueryAnalyseField eaf = (EmpQueryAnalyseField) obj;
                if (!eaf.isPart_field()) {
                    MsgUtil.showInfoMsg(PayAnalyseMsg.msg027);
                    return;
                }
                ftable_fields.editingStopped();
                QueryPart queryPart = (QueryPart) CommUtil.fetchEntityBy("from QueryPart qp join fetch qp.queryPartParas where qp.queryPart_key='" + eaf.getField_name() + "'");
                queryPart.setEntitys(listTempEntity);
                QueryPartWizardModel qpwModel = new QueryPartWizardModel(queryPart);
                WizardDialog.showWizard(qpwModel);
            }
        });
        btnDefine.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                ftable_fields.editingStopped();
                String stat_type = getAnalysisType();
                QueryPart queryPart = (QueryPart) UtilTool.createUIDEntity(QueryPart.class);
                queryPart.setEntitys(listTempEntity);
                queryPart.setUser_code(UserContext.person_code);
                QueryPartWizardModel qpwModel = new QueryPartWizardModel(queryPart);
                if (WizardDialog.showWizard(qpwModel)) {
                    TempFieldInfo tfi = new TempFieldInfo();
                    tfi.setEntity_name(queryPart.getQueryPart_key());
                    tfi.setEntity_caption(queryPart.getEntity_caption());
                    tfi.setField_name("@part_field");
                    tfi.setCaption_name(queryPart.getPart_name());
                    model.addNode(queryPart);
                    field_tree.updateUI();
                    addAnalysisField(tfi, stat_type);
                }
            }
        });
        comboxEntity.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                Object obj = comboxEntity.getSelectedItem();
                if (obj == null) {
                    return;
                }
                cur_entity = (EntityDef) comboxEntity.getSelectedItem();
                refreshEntityField(cur_entity);
            }
        });
        btnAdd.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                TreePath tp = field_tree.getSelectionPath();
                if (tp == null) {
                    return;
                }
                Object tp_obj = tp.getLastPathComponent();
                if (tp_obj == null) {
                    return;
                }
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) tp_obj;
                if (!(node.getUserObject() instanceof TempFieldInfo)) {
                    return;
                }
                addAnalysisField((TempFieldInfo) node.getUserObject(), getAnalysisType());
            }
        });
        btnRemove.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                ftable_fields.deleteSelectedRows();
            }
        });
        comboxEntity.setSelectedIndex(0);
        ComponentUtil.setSysFuntionNew(this, false);
    }

    /**
     * 传入一个字段列表转换为新增的统计项目
     * @param field_infos: 传入的字段列表
     */
    private void addAnalysisField(TempFieldInfo curTempField, String stat_type) {
        CommAnalyseField remove_paf = null;
        for (Object obj : ftable_fields.getObjects()) {
            CommAnalyseField paf = (CommAnalyseField)obj;
            if (paf.getCal_type().equals(stat_type)) {
                remove_paf = paf;
                break;
            }
        }
        if (remove_paf != null) {
            ftable_fields.getObjects().remove(remove_paf);
        }
        CommAnalyseField qaField = (CommAnalyseField) UtilTool.createUIDEntity(field_class);
        qaField.setCommAnalyseScheme(empAnalysePara.getCommAnalyseScheme());
        qaField.setEntity_caption(curTempField.getEntity_caption());
        qaField.setEntity_name(curTempField.getEntity_name());
        qaField.setField_caption(curTempField.getCaption_name());
        qaField.setField_name(curTempField.getField_name());
        qaField.setStat_type("普通");
        qaField.setCal_type(stat_type);
        if (curTempField.getField_name().equals("@part_field")) {
            qaField.setPart_field(true);
            qaField.setField_name(qaField.getEntity_name());
            qaField.setEntity_name(cur_entity.getEntityName());
        }
        ftable_fields.addObject(qaField);
    }
    //获得当前统计方式

    private String getAnalysisType() {
        String type = "X";
        if (jRadioButton3.isSelected()) {
            type = "Y";
        }
        return type;
    }

    /**
     * 根据当前选择表刷新表字段列表
     * @param ed：当前表
     */
    private void refreshEntityField(EntityDef ed) {
        try {
            fields.clear();
            cur_class = Class.forName(EntityBuilder.getPackage(ed) + ed.getEntityName());
            List list = CommUtil.fetchEntities("from QueryPart qp join fetch qp.queryPartParas where qp.entity_name='" + ed.getEntityName() + "' and qp.user_code='" + UserContext.person_code + "'");
            List<TempFieldInfo> field_infos;
            if (ed.getEntityName().equals("A01") || cur_class.getSuperclass().getSimpleName().equals("A01")) {
                field_infos = EntityBuilder.getDeclareFieldInfoListOf(cur_class, EntityBuilder.COMM_FIELD_VISIBLE);
            } else {
                field_infos = EntityBuilder.getCommFieldInfoListOf(cur_class, EntityBuilder.COMM_FIELD_VISIBLE);
            }
            for (TempFieldInfo tfi : field_infos) {
                if (tfi.getField_type().equals("Code")) {
                    fields.add(tfi);
                }else if(cur_class.getSuperclass()!=null){
                    if(cur_class.getSuperclass().getSimpleName().equals("Pay")&&tfi.getField_name().equals("gz_ym")){
                        fields.add(tfi);
                    }
                }
            }
            model.buildTree(fields, list);
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) field_tree.getModel().getRoot();
            while (node.getChildCount() > 0 && node.getFirstChild() != null) {
                node = (DefaultMutableTreeNode) node.getFirstChild();
            }
            field_tree.setSelectionPath(new TreePath(node.getPath()));
            field_tree.expandPath(new TreePath(node.getPath()));
            field_tree.updateUI();
        } catch (ClassNotFoundException ex) {
            log.error(ex);
        }
    }

    @Override
    public boolean isValidate() {
        ftable_fields.editingStopped();
        if (ftable_fields.getObjects().size() == 0) {
            MsgUtil.showErrorMsg(PayAnalyseMsg.msg024);
            return false;
        }
        if (empAnalysePara.getCommAnalyseScheme().getAnalyse_type() == 2) {
            String msg = PayAnalyseMsg.msg025.toString();
            if (ftable_fields.getObjects().size() == 1) {
                if (((CommAnalyseField)ftable_fields.getObjects().get(0)).getCal_type().equals("X")) {
                    msg = PayAnalyseMsg.msg026.toString();
                }
                MsgUtil.showErrorMsg(msg);
                return false;
            }
        }
        return true;
    }

    @Override
    public void beforeLeave() {
        List<CommAnalyseField> pafs = empAnalysePara.getCommAnalyseScheme().getCommAnalyseFields();
        List<CommAnalyseField> remove_paf = new ArrayList<CommAnalyseField>();
        for (CommAnalyseField paf : empAnalysePara.getCommAnalyseScheme().getCommAnalyseFields()) {
            if (paf.getStat_type().equals("普通")) {
                remove_paf.add(paf);
            }
        }
        pafs.removeAll(remove_paf);
        pafs.addAll(ftable_fields.getObjects());
        empAnalysePara.getCommAnalyseScheme().setCommAnalyseFields(pafs);
    }

    @Override
    public String getTitle() {
        return PayAnalyseMsg.ttl035.toString();
    }

    @Override
    public String getModuleCode() {
        return module_code;
    }
}

